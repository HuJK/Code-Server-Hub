{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/datascience-ui/native-editor/nativeEditor.less?cef7","webpack:///./src/datascience-ui/react-common/constants.ts","webpack:///./src/datascience-ui/native-editor/addCellLine.tsx","webpack:///./src/datascience-ui/native-editor/redux/actions.ts","webpack:///./src/datascience-ui/native-editor/nativeCell.tsx","webpack:///./src/datascience-ui/native-editor/toolbar.tsx","webpack:///./src/datascience-ui/native-editor/nativeEditor.tsx","webpack:///./src/datascience-ui/native-editor/redux/reducers/effects.ts","webpack:///./src/datascience-ui/native-editor/redux/reducers/execution.ts","webpack:///./src/datascience-ui/native-editor/redux/reducers/movement.ts","webpack:///./src/datascience-ui/native-editor/redux/reducers/creation.ts","webpack:///./src/datascience-ui/native-editor/redux/reducers/index.ts","webpack:///./src/datascience-ui/native-editor/index.tsx","webpack:///./src/datascience-ui/native-editor/redux/store.ts","webpack:///external \"log4js\"","webpack:///./src/datascience-ui/native-editor/nativeEditor.less"],"names":["i","chunkIds","length","deferredModules","j","deferredModule","module","chunkId","type","target","script","enumerable","get","getter","value","key","bind","Object","prototype","hasOwnProperty","call","object","property","console","error","err","jsonpArray","webpackJsonpCallback","content","options","transform","undefined","locals","exports","getOSType","window","navigator","platform","startsWith","OSX","Windows","userAgent","indexOf","Linux","Unknown","props","render","className","this","tooltip","plus","includePlus","baseTheme","class","image","InsertBelow","role","title","onClick","click","createIncomingActionWithPayload","data","payload","messageDirection","createIncomingAction","CssConstants","actionCreators","addCell","ADD_AND_FOCUS_NEW_CELL","newCellId","insertAboveFirst","INSERT_ABOVE_FIRST_AND_FOCUS_NEW_CELL","insertAbove","cellId","INSERT_ABOVE_AND_FOCUS_NEW_CELL","insertBelow","INSERT_BELOW_AND_FOCUS_NEW_CELL","executeCell","moveOp","EXECUTE_CELL_AND_ADVANCE","focusCell","cursorPos","Current","FOCUS_CELL","unfocusCell","code","UNFOCUS_CELL","selectCell","SELECT_CELL","executeAllCells","EXECUTE_ALL_CELLS","executeAbove","EXECUTE_ABOVE","executeCellAndBelow","EXECUTE_CELL_AND_BELOW","toggleVariableExplorer","TOGGLE_VARIABLE_EXPLORER","setVariableExplorerHeight","containerHeight","gridHeight","SET_VARIABLE_EXPLORER_HEIGHT","restartKernel","RESTART_KERNEL","interruptKernel","INTERRUPT_KERNEL","clearAllOutputs","ClearAllOutputs","export","EXPORT","save","SAVE","showDataViewer","variable","columnSize","SHOW_DATA_VIEWER","sendCommand","command","SEND_COMMAND","moveCellUp","MOVE_CELL_UP","moveCellDown","MOVE_CELL_DOWN","changeCellType","CHANGE_CELL_TYPE","toggleLineNumbers","TOGGLE_LINE_NUMBERS","toggleOutput","TOGGLE_OUTPUT","deleteCell","DELETE_CELL","undo","Undo","redo","Redo","arrowUp","ARROW_UP","arrowDown","ARROW_DOWN","editCell","e","EDIT_CELL","version","versionId","modelId","model","id","forward","reverse","getValue","linkClick","href","LINK_CLICK","showPlot","imageHtml","ShowPlot","gatherCell","GATHER_CELL","gatherCellToScript","GATHER_CELL_TO_SCRIPT","editorLoaded","EDITOR_LOADED","codeCreated","CODE_CREATED","loadedAllCells","LOADED_ALL_CELLS","editorUnmounted","UNMOUNT","selectKernel","SelectKernel","selectServer","SELECT_SERVER","openSettings","setting","OPEN_SETTINGS","getVariableData","newExecutionCount","startIndex","pageSize","GET_VARIABLE_DATA","executionCount","sortColumn","sortAscending","widgetFailed","ex","IPYWIDGET_RENDER_FAILURE","runByLine","RUN_BY_LINE","continue","CONTINUE","step","STEP","CellOutputWrapper","CellOutputWrapperClass","ImageButtonClass","prop","inputRef","wrapperRef","getCell","cellVM","cell","isCodeCell","cell_type","isMarkdownCell","isSelected","selected","isFocused","focused","isError","state","onMouseClick","ev","nativeEvent","elem","allowClickPropagation","stopPropagation","lastKeyPressed","onMouseDoubleClick","shouldRenderCodeEditor","inputBlockShow","editable","shouldRenderMarkdownEditor","isShowingMarkdownEditor","EditCellId","hasOutput","finished","executing","getCodeCell","keyDownInput","isFocusedWhenNotSuggesting","editorInfo","isSuggesting","isFirstLine","shiftKey","arrowUpFromCell","isLastLine","arrowDownFromCell","ctrlKey","metaKey","escapeCell","preventDefault","ChangeToCode","ChangeToMarkdown","ToggleLineNumbers","ToggleOutput","shiftEnterCell","ctrlEnterCell","altKey","altEnterCell","enterCell","DeleteCell","setTimeout","InsertAbove","useCustomEditorApi","current","focus","Unfocus","getCurrentCode","ArrowUp","ArrowDown","runAndMove","RunAndMove","runAndAdd","RunAndAdd","submitCell","Run","addNewCell","AddToEnd","addNewCellBelow","renderNavbar","addButtonRender","lastCell","MoveCellUp","disabled","firstCell","Up","MoveCellDown","Down","renderAddDivider","checkOutput","shouldRenderOutput","renderMiddleToolbar","runCell","gatherDisabled","execution_count","hasBeenRun","enableGather","switchTooltip","otherCellType","otherCellTypeCommand","otherCellImage","SwitchToMarkdown","SwitchToCode","toolbarClassName","runningByLine","hidden","busy","RunByLine","Interrupt","supportsRunByLine","onMouseDown","event","GatherCode","Delete","renderControls","init","toString","isBusy","count","visible","renderInput","shouldRenderInput","editorOptions","glyphMargin","history","codeTheme","onCodeChange","onCodeCreated","testMode","showWatermark","ref","monacoTheme","openLink","editorMeasureClassName","onCodeFocused","unfocused","onCodeUnfocused","keyDown","showLineNumbers","font","disableUndoStack","codeVersion","focusPending","language","_code","_file","renderOutput","themeMatplotlibPlots","toolbar","expandImage","maxTextSize","enableScroll","onOuterKeyDown","focusInOutput","renderCollapseBar","input","classes","Array","isArray","outputs","uri","messages","renderNormalCell","componentDidUpdate","prevProps","giveFocus","shouldComponentUpdate","nextProps","getUnknownMimeTypeFormatString","contains","document","activeElement","scrollIntoView","behavior","block","inline","cellOuterClass","cellWrapperClass","tabIndex","onKeyDown","onDoubleClick","closest","hideOutput","getContents","source","focusedElement","selectedInfo","selectionFocusedInfo","variableExplorerTooltip","variablesVisible","canRunAbove","selectedCellIndex","canRunBelow","cellCount","selectedCellId","canRestartAndInterruptKernel","kernel","jupyterServerStatus","NotStarted","RunAll","RunAbove","RunBelow","Restart","ClearAllOutput","ToggleVariableExplorer","VariableExplorer","Save","dirty","SaveAs","ExportToPython","SelectServer","ToolbarComponent","main","cellVMs","variables","variableState","ConnectedNativeCell","renderCount","waitingForLoadRender","mainPanelToolbarRef","getContentProps","submittedText","skipNextScroll","renderCell","scrollToBottom","scrollDiv","scrollBeyondLastLine","settings","extraSettings","editor","getVariableProps","toolbarHeight","offsetHeight","debugging","showDataExplorer","skipDefault","closeVariableExplorer","pageIn","pageInVariableData","fontSize","size","currentExecutionCount","supportsDebugging","variableOptions","enableDuringDebugger","mainKeyDown","focusedCellId","debuggingCell","find","cvm","Break","focusedCell","index","firstLine","lastLine","otherCellRunningByLine","maxOutputSize","enableScrollingForCellOutputs","allowUndo","undoStack","_div","componentDidMount","addEventListener","forceUpdate","componentWillUnmount","removeEventListener","loaded","requestAnimationFrame","dynamicFont","fontFamily","family","progressBar","addCellLine","style","rootCss","buildSettingsCss","renderToolbarPanel","renderVariablePanel","renderContentPanel","variableProps","monacoReady","contentProps","Effects","arg","prevState","findIndex","c","selectionInfo","newVMs","newCell","asCellViewModel","deselectCell","removeFocusIndex","focusedCellIndex","addFocusIndex","shouldFocusCell","addIndex","someOtherCellWasFocusedAndSelected","updateSettings","newSettings","JSON","parse","newEditorOptions","newFontFamily","newFontSize","theme","vscodeThemeName","knownDark","computeKnownDark","GetCssRequest","isDark","GetMonacoThemeRequest","lineDecorationsWidth","cloneDeep","Execution","executeRange","cellIds","originalArg","cellIdsToExecute","forEach","orig","clonedCell","push","ReExecuteCells","executeResult","slice","map","cellVm","executeCellAndAdvance","EXECUTE_CELL","INSERT_BELOW","executeSelectedCell","newList","postModelClearOutputs","newType","newNotebookCell","cells","redoStack","pushStack","continueExec","cv","Continue","Step","expectedExecutionCount","newVM","handleBreakState","currentStack","frames","handleContinue","startDebugging","stopDebugging","Movement","swapCells","first","firstCellId","second","secondCellId","temp","postModelSwap","Bottom","Top","Creation","prepareCellVM","newText","inputBlockOpen","vm","position","splice","result","postModelInsert","insertExistingAbove","insertNewAbove","updateCell","updateOrAdd","s","deleteAllCells","inputBlockText","inputBlockCollapseNeeded","scrollCount","Design","postModelRemoveAll","applyCellEdit","changes","before","rangeOffset","after","rangeLength","text","postModelRemove","previousSelection","filter","nextOrPrev","loadAllCells","vms","loadTotal","addAndFocusCell","ADD_NEW_CELL","insertAboveAndFocusCell","INSERT_ABOVE","insertBelowAndFocusCell","insertAboveFirstAndFocusCell","INSERT_ABOVE_FIRST","startCell","finishCell","unmount","handleUpdate","disabledQueueArg","queueAction","kind","oldCells","cellBelow","handleUndoModel","codeCellAboveId","newCells","handleRedoModel","reducerMap","exportCells","selectJupyterURI","gather","gatherToScript","started","LOAD_IPYWIDGET_CLASS_SUCCESS","handleLoadIPyWidgetClassSuccess","LOAD_IPYWIDGET_CLASS_FAILURE","handleLoadIPyWidgetClassFailure","IPYWIDGET_WIDGET_VERSION_NOT_SUPPORTED","notifyAboutUnsupportedWidgetVersions","StartCell","FinishCell","UpdateCellWithExecutionResults","NotebookDirty","notebookDirty","NotebookClean","notebookClean","LoadAllCells","NotebookRunAllCells","NotebookRunSelectedCell","NotebookAddCellBelow","DoSave","DeleteAllCells","StartProgress","startProgress","StopProgress","stopProgress","UpdateSettings","Activate","activate","RestartKernel","handleRestarted","GetCssResponse","handleCss","MonacoReady","GetMonacoThemeResponse","monacoThemeChange","UpdateModel","UpdateKernel","updateStatus","LocInit","handleLocInit","UpdateDisplayData","handleUpdateDisplayData","ShowBreak","ShowContinue","StartDebugging","StopDebugging","postOffice","inTestMode","acquireVsCodeApi","ConnectedNativeEditor","store","widgetContainerId","getElementById","log4js"],"mappings":"aACA,cAQA,IAPA,IAMA,IANA,OACA,OACA,OAIA,SACQA,EAAIC,EAASC,OAAQF,IAC7B,OACA,MACA,gBAEA,OAEA,WACA,4CACA,WAKA,IAFA,QAEA,UACA,YAOA,OAHA,sBAGA,IAEA,aAEA,IADA,MACA,IAAkBA,EAAIG,EAAgBD,OAAQF,IAAK,CAGnD,IAFA,WACA,KACA,IAAmBI,EAAIC,EAAeH,OAAQE,IAAK,CACnD,WACA,iBAEA,IACA,gBACA,eAIA,SAIA,SAKA,GACA,gBAGA,KAQA,cAGA,QACA,oBAGA,YACA,IACA,KACA,YA2BA,OAvBA,mCAGA,OAGA,YACA,eACA,2BACA,sBACA,CACA,sBACA,0BACA,iCACA,mBACA,4BACA,4BAEA,OAEA,6BAdA,CAgBME,GACN,UAKA,gBACA,SAKA,OACA,SAGA,KACA,iBACW,CAEX,iCACA,gBAEA,eAGA,IACA,EADA,mCAGA,kBACA,cACA,MACA,6BAEA,MA3EA,YACA,gBAAyC,sFAAsF,sFAAsF,WAAa,aAAa,yBAA2B,2BAA2B,4BAA4B,4BAA4B,uBAAuB,uBAAuB,kBAAkB,kBAAkB,6BAA6B,6BAA6B,eAAe,eAAe,KAAO,OAAO,iBAAiB,kBAAkBC,IAAUA,GAAW,aA0E7kB,IAGA,gBACA,cAEA,wBACA,gBACA,WACA,UACA,MACA,4CACA,4BACA,wDACA,wBACA,SACA,YACA,QAEA,cAGA,6BACA,GAAyBC,KAAM,UAAWC,OAAQC,MAC1C,MACR,qBACA,6BAGA,uBAIA,MAGA,MAGA,oBACA,UACA,2BAA2CC,YAAY,EAAMC,IAAKC,KAKlE,gBACA,gDACA,4CAAyDC,MAAO,WAEhE,sCAAkDA,OAAO,KAQzD,kBAEA,GADA,cACA,aACA,qDACA,0BAGA,GAFA,OACA,mCAA0CH,YAAY,EAAMG,MAAOA,IACnE,2DAAiH,OAAOA,EAAMC,IAAQC,KAAK,KAAMD,IACjJ,UAIA,gBACA,sBACA,WAA4B,OAAOT,EAAgB,SACnD,WAAkC,OAAOA,GAEzC,OADA,aACA,GAIA,kBAAuD,OAAOW,OAAOC,UAAUC,eAAeC,KAAKC,EAAQC,IAG3G,OAGA,iBAA+D,MAApBC,QAAQC,MAAMC,GAAYA,GAErE,kDACA,iBACA,SACA,YACA,YAAiBzB,EAAI0B,EAAWxB,OAAQF,IAAK2B,EAAqBD,EAAW1B,IAC7E,QAIA,+BAEA,I,wEC5OA,IAAI4B,EAAU,EAAQ,QAEA,iBAAZA,IAAsBA,EAAU,CAAC,CAACtB,EAAON,EAAI4B,EAAS,MAOhE,IAAIC,EAAU,CAAC,KAAM,EAErB,eAPIC,EAQJ,gBAAqBC,GAER,EAAQ,OAAR,CAAgEH,EAASC,GAEnFD,EAAQI,SAAQ1B,EAAO2B,QAAUL,EAAQI,S,yOCHrC,SAASE,IACZ,OAAIC,OAAOC,UAAUC,SAASC,WAAW,OAC9B,IAAOC,IACPJ,OAAOC,UAAUC,SAASC,WAAW,OACrC,IAAOE,QACPL,OAAOC,UAAUK,UAAUC,QAAQ,SAAW,EAC9C,IAAOC,MAEP,IAAOC,Q,oDCPtB,cACI,WAAYC,G,OACR,YAAMA,IAAM,KAyBpB,OA3BiC,iBAKtB,YAAAC,OAAP,WACI,IAAMC,EAAY,iBAAiBC,KAAKH,MAAME,UACxCE,EAAU,YAAa,0BAA2B,qBAClDC,EAAOF,KAAKH,MAAMM,YACpB,gBAAC,IAAK,CAACC,UAAWJ,KAAKH,MAAMO,UAAWC,MAAM,qBAAqBC,MAAO,IAAUC,cACpF,KACJ,OACI,uBAAKR,UAAWA,GACZ,0BACIS,KAAK,SAAQ,eACA,QACbC,MAAOR,EAAO,aACFA,EACZF,UAAU,uBACVW,QAASV,KAAKH,MAAMc,OAEnBT,EACD,wBAAMH,UAAU,6BAKpC,EA3BA,CAAiC,a,gJCcjC,SAASa,EAGPpD,EAASqD,GAEP,MAAO,CAAErD,KAAI,EAAEsD,QAAS,CAAED,KAAI,EAAEE,iBAAkB,aAGtD,SAASC,EAAqBxD,GAC1B,MAAO,CAAEA,KAAI,EAAEsD,QAAS,CAAEC,iBAAkB,WAAYF,UAAM9B,IAI3D,ICTGkC,EDSGC,EAAiB,CAC1BC,QAAS,WAAM,OAAAP,EAAgC,IAAiBQ,uBAAwB,CAAEC,UAAW,OACrGC,iBAAkB,WACd,OAAAV,EAAgC,IAAiBW,sCAAuC,CAAEF,UAAW,OACzGG,YAAa,SAACC,GACV,OAAAb,EAAgC,IAAiBc,gCAAiC,CAC9ED,OAAM,EACNJ,UAAW,OAEnBM,YAAa,SAACF,GACV,OAAAb,EAAgC,IAAiBgB,gCAAiC,CAC9EH,OAAM,EACNJ,UAAW,OAEnBQ,YAAa,SAACJ,EAAgBK,GAC1B,OAAAlB,EAAgC,IAAiBmB,yBAA0B,CAAEN,OAAM,EAAEK,OAAM,KAC/FE,UAAW,SAACP,EAAgBQ,GACxB,YADwB,IAAAA,MAAuB,IAAUC,SACzDtB,EAAgC,IAAiBuB,WAAY,CAAEV,OAAM,EAAEQ,UAAS,KACpFG,YAAa,SAACX,EAAgBY,GAC1B,OAAAzB,EAAgC,IAAiB0B,aAAc,CAAEb,OAAM,EAAEY,KAAI,KACjFE,WAAY,SAACd,EAAgBQ,GACzB,YADyB,IAAAA,MAAuB,IAAUC,SAC1DtB,EAAgC,IAAiB4B,YAAa,CAAEf,OAAM,EAAEQ,UAAS,KACrFQ,gBAAiB,WAAoB,OAAAzB,EAAqB,IAAiB0B,oBAC3EC,aAAc,SAAClB,GACX,OAAAb,EAAgC,IAAiBgC,cAAe,CAAEnB,OAAM,KAC5EoB,oBAAqB,SAACpB,GAClB,OAAAb,EAAgC,IAAiBkC,uBAAwB,CAAErB,OAAM,KACrFsB,uBAAwB,WAAoB,OAAA/B,EAAqB,IAAiBgC,2BAClFC,0BAA2B,SAACC,EAAyBC,GACjD,OAAAvC,EAAgC,IAAiBwC,6BAA8B,CAAEF,gBAAe,EAAEC,WAAU,KAChHE,cAAe,WAAoB,OAAArC,EAAqB,IAAiBsC,iBACzEC,gBAAiB,WAAoB,OAAAvC,EAAqB,IAAiBwC,mBAC3EC,gBAAiB,WAAoB,OAAAzC,EAAqB,IAA0B0C,kBACpFC,OAAQ,WAAoB,OAAA3C,EAAqB,IAAiB4C,SAClEC,KAAM,WAAoB,OAAA7C,EAAqB,IAAiB8C,OAChEC,eAAgB,SAACC,EAA4BC,GACzC,OAAArD,EAAgC,IAAiBsD,iBAAkB,CAAEF,SAAQ,EAAEC,WAAU,KAC7FE,YAAa,SACTC,GACmC,OAAAxD,EAAgC,IAAiByD,aAAc,CAAED,QAAO,KAC/GE,WAAY,SAAC7C,GACT,OAAAb,EAAgC,IAAiB2D,aAAc,CAAE9C,OAAM,KAC3E+C,aAAc,SAAC/C,GACX,OAAAb,EAAgC,IAAiB6D,eAAgB,CAAEhD,OAAM,KAC7EiD,eAAgB,SAACjD,GAAmB,OAAAb,EAAgC,IAAiB+D,iBAAkB,CAAElD,OAAM,KAC/GmD,kBAAmB,SAACnD,GAChB,OAAAb,EAAgC,IAAiBiE,oBAAqB,CAAEpD,OAAM,KAClFqD,aAAc,SAACrD,GACX,OAAAb,EAAgC,IAAiBmE,cAAe,CAAEtD,OAAM,KAC5EuD,WAAY,SAACvD,GACT,OAAAb,EAAgC,IAAiBqE,YAAa,CAAExD,OAAM,KAC1EyD,KAAM,WAAoB,OAAAlE,EAAqB,IAA0BmE,OACzEC,KAAM,WAAoB,OAAApE,EAAqB,IAA0BqE,OACzEC,QAAS,SAAC7D,EAAgBY,GACtB,OAAAzB,EAAgC,IAAiB2E,SAAU,CAAE9D,OAAM,EAAEY,KAAI,KAC7EmD,UAAW,SAAC/D,EAAgBY,GACxB,OAAAzB,EAAgC,IAAiB6E,WAAY,CAAEhE,OAAM,EAAEY,KAAI,KAC/EqD,SAAU,SAACjE,EAAgBkE,GACvB,OAAA/E,EAAgC,IAAiBgF,UAAW,CACxDnE,OAAM,EACNoE,QAASF,EAAEG,UACXC,QAASJ,EAAEK,MAAMC,GACjBC,QAASP,EAAEO,QACXC,QAASR,EAAEQ,QACXF,GAAIxE,EACJY,KAAMsD,EAAEK,MAAMI,cAEtBC,UAAW,SAACC,GACR,OAAA1F,EAAgC,IAAiB2F,WAAY,CAAED,KAAI,KACvEE,SAAU,SAACC,GAAsB,OAAA7F,EAAgC,IAA0B8F,SAAUD,IACrGE,WAAY,SAAClF,GACT,OAAAb,EAAgC,IAAiBgG,YAAa,CAAEnF,OAAM,KAC1EoF,mBAAoB,SAACpF,GACjB,OAAAb,EAAgC,IAAiBkG,sBAAuB,CAAErF,OAAM,KACpFsF,aAAc,WAAoB,OAAA/F,EAAqB,IAAiBgG,gBACxEC,YAAa,SAACxF,EAA4BsE,GACtC,OAAAnF,EAAgC,IAAiBsG,aAAc,CAAEzF,OAAM,EAAEsE,QAAO,KACpFoB,eAAgB,WAAoB,OAAAnG,EAAqB,IAAiBoG,mBAC1EC,gBAAiB,WAAoB,OAAArG,EAAqB,IAAiBsG,UAC3EC,aAAc,WAAoB,OAAAvG,EAAqB,IAA0BwG,eACjFC,aAAc,WAAoB,OAAAzG,EAAqB,IAAiB0G,gBACxEC,aAAc,SAACC,GACX,OAAAhH,EAAgC,IAAiBiH,cAAe,CAAED,QAAO,KAC7EE,gBAAiB,SACbC,EACAC,EACAC,GAEA,YAHA,IAAAD,MAAA,QACA,IAAAC,MAAA,KAEArH,EAAgC,IAAiBsH,kBAAmB,CAChEC,eAAgBJ,EAChBK,WAAY,OACZC,eAAe,EACfL,WAAU,EACVC,SAAQ,KAEhBK,aAAc,SAACC,GACX,OAAA3H,EAAgC,IAAiB4H,yBAA0BD,IAC/EE,UAAW,SAAChH,GACR,OAAAb,EAAgC,IAAiB8H,YAAa,CAAEjH,OAAM,KAC1EkH,SAAU,SAAClH,GACP,OAAAb,EAAgC,IAAiBgI,SAAU,CAAEnH,OAAM,KACvEoH,KAAM,SAACpH,GACH,OAAAb,EAAgC,IAAiBkI,KAAM,CAAErH,OAAM,OC/GvE,SAAUR,GACO,EAAA8H,kBAAoB,sBACpB,EAAAC,uBAAyB,IAAI,EAAAD,kBAC7B,EAAAE,iBAAmB,gBAHpC,CAAUhI,MAAY,KAkCtB,kBAKI,WAAYiI,GAAZ,MACI,YAAMA,IAAK,K,OALP,EAAAC,SAAuC,cACvC,EAAAC,WAA8C,cAiD9C,EAAAC,QAAU,WACd,OAAO,EAAKxJ,MAAMyJ,OAAOC,MAGrB,EAAAC,WAAa,WACjB,MAAiD,SAA1C,EAAK3J,MAAMyJ,OAAOC,KAAK1I,KAAK4I,WAG/B,EAAAC,eAAiB,WACrB,MAAiD,aAA1C,EAAK7J,MAAMyJ,OAAOC,KAAK1I,KAAK4I,WAG/B,EAAAE,WAAa,WACjB,OAAO,EAAK9J,MAAMyJ,OAAOM,UAGrB,EAAAC,UAAY,WAChB,OAAO,EAAKhK,MAAMyJ,OAAOQ,SAGrB,EAAAC,QAAU,WACd,OAAO,EAAKlK,MAAMyJ,OAAOC,KAAKS,QAAU,IAAUxL,OAkE9C,EAAAyL,aAAe,SAACC,GACpB,GAAIA,EAAGC,YAAY1M,OAAQ,CACvB,IAAM2M,EAAOF,EAAGC,YAAY1M,OACxB,EAAK4M,sBAAsBD,KAE3BF,EAAGI,kBACH,EAAKC,oBAAiBxL,EACtB,EAAKc,MAAM0C,WAAW,EAAKd,WAK/B,EAAA+I,mBAAqB,SAACN,GAC1B,IAAME,EAAOF,EAAGC,YAAY1M,OACxB,EAAK4M,sBAAsBD,KAE3BF,EAAGI,kBACH,EAAKzK,MAAMmC,UAAU,EAAKP,OAAQ,IAAUS,WAI5C,EAAAuI,uBAAyB,WAC7B,OAAO,EAAKjB,eAAiB,EAAK3J,MAAMyJ,OAAOoB,gBAAkB,EAAK7K,MAAMyJ,OAAOqB,WAG/E,EAAAC,2BAA6B,WACjC,OACI,EAAKlB,mBACJ,EAAKmB,2BAA6B,EAAKhL,MAAMyJ,OAAOC,KAAKtD,KAAO,IAAY6E,aAI7E,EAAAD,wBAA0B,WAC9B,OAAO,EAAKnB,kBAAoB,EAAK7J,MAAMyJ,OAAOQ,SAO9C,EAAAiB,UAAY,WAChB,OACI,EAAK1B,UAAUW,QAAU,IAAUgB,UACnC,EAAK3B,UAAUW,QAAU,IAAUxL,OACnC,EAAK6K,UAAUW,QAAU,IAAUiB,WAInC,EAAAC,YAAc,WAClB,OAAO,EAAKrL,MAAMyJ,OAAOC,KAAK1I,MAoB1B,EAAAsK,aAAe,SAAC1J,EAAgBkE,GACpC,IAAMyF,EAA6B,EAAKvB,aAAelE,EAAE0F,aAAe1F,EAAE0F,WAAWC,aACrF,OAAQ3F,EAAEtD,MACN,IAAK,UACL,IAAK,KACI+I,GAA8BzF,EAAE0F,WAAYE,cAAgB5F,EAAE6F,WAAc,EAAK3B,cAClF,EAAK4B,gBAAgB9F,GAEzB,MACJ,IAAK,YACL,IAAK,KACIyF,GAA8BzF,EAAE0F,WAAYK,aAAe/F,EAAE6F,WAAc,EAAK3B,cACjF,EAAK8B,kBAAkBhG,GAE3B,MACJ,IAAK,KACIA,EAAEiG,SAAW1M,MAAgB,IAAOK,KAASoG,EAAEkG,SAAW3M,MAAgB,IAAOK,MAElF,EAAKM,MAAMgE,OAEf,MAEJ,IAAK,SACGuH,GACA,EAAKU,WAAWnG,GAEpB,MACJ,IAAK,KACI,EAAKkE,aAAe,EAAKF,cAAgB,EAAKD,mBAC/C/D,EAAE2E,kBACF3E,EAAEoG,iBACF,EAAKlM,MAAM6E,eAAejD,GAC1B,EAAK5B,MAAMsE,YAAY,IAA+B6H,eAE1D,MACJ,IAAK,KACI,EAAKnC,aAAe,EAAKF,cAAgB,EAAKH,eAC/C7D,EAAE2E,kBACF3E,EAAEoG,iBACF,EAAKlM,MAAM6E,eAAejD,GAC1B,EAAK5B,MAAMsE,YAAY,IAA+B8H,mBAE1D,MACJ,IAAK,KACI,EAAKpC,aAAe,EAAKF,eAC1BhE,EAAE2E,kBACF3E,EAAEoG,iBACF,EAAKlM,MAAM+E,kBAAkBnD,GAC7B,EAAK5B,MAAMsE,YAAY,IAA+B+H,oBAE1D,MACJ,IAAK,KACI,EAAKrC,aAAe,EAAKF,eAC1BhE,EAAE2E,kBACF3E,EAAEoG,iBACF,EAAKlM,MAAMiF,aAAarD,GACxB,EAAK5B,MAAMsE,YAAY,IAA+BgI,eAE1D,MACJ,IAAK,cACL,IAAK,QACGxG,EAAE6F,SACF,EAAKY,eAAezG,GACbA,EAAEiG,QACT,EAAKS,cAAc1G,GACZA,EAAE2G,OACT,EAAKC,aAAa5G,GAElB,EAAK6G,UAAU7G,GAEnB,MACJ,IAAK,IAC2B,MAAxB,EAAK4E,iBAA2B,EAAKV,aAAe,EAAKF,eACzDhE,EAAE2E,kBACF,EAAKC,oBAAiBxL,EACtB,EAAKc,MAAMmF,WAAWvD,GACtB,EAAK5B,MAAMsE,YAAY,IAA+BsI,aAE1D,MACJ,IAAK,IACI,EAAK5C,cACNlE,EAAE2E,kBACF3E,EAAEoG,iBACFW,YAAW,WAAM,SAAK7M,MAAM2B,YAAYC,KAAS,GACjD,EAAK5B,MAAMsE,YAAY,IAA+BwI,cAE1D,MACJ,IAAK,IACI,EAAK9C,cACNlE,EAAE2E,kBACF3E,EAAEoG,iBACFW,YAAW,WAAM,SAAK7M,MAAM8B,YAAYF,KAAS,GACjD,EAAK5B,MAAMsE,YAAY,IAA+B5D,cAE1D,MACJ,IAAK,IACL,IAAK,IACI,EAAKsJ,aAAgB,EAAKhK,MAAM+M,sBAC7BjH,EAAE6F,UAAa7F,EAAEiG,SAAYjG,EAAE2G,OAIvB3G,EAAE6F,UAAa7F,EAAE2G,QAAW3G,EAAEiG,UACtCjG,EAAE2E,kBACF,EAAKzK,MAAMqF,OACX,EAAKrF,MAAMsE,YAAY,IAA+BgB,QANtDQ,EAAE2E,kBACF,EAAKzK,MAAMuF,OACX,EAAKvF,MAAMsE,YAAY,IAA+BkB,QAYtE,EAAKkF,eAAiB5E,EAAEtD,MAOpB,EAAAyJ,WAAa,SAACnG,GAEd,EAAKyD,YAAc,EAAKA,WAAWyD,SAAW,EAAKhD,cACnDlE,EAAE2E,kBACF,EAAKlB,WAAWyD,QAAQC,QACxB,EAAKjN,MAAMsE,YAAY,IAA+B4I,WAItD,EAAAtB,gBAAkB,SAAC9F,GACvBA,EAAE2E,kBACF3E,EAAEoG,iBACF,EAAKlM,MAAMyF,QAAQ,EAAK7D,OAAQ,EAAKuL,kBACrC,EAAKnN,MAAMsE,YAAY,IAA+B8I,UAGlD,EAAAtB,kBAAoB,SAAChG,GACzBA,EAAE2E,kBACF3E,EAAEoG,iBACF,EAAKlM,MAAM2F,UAAU,EAAK/D,OAAQ,EAAKuL,kBACvC,EAAKnN,MAAMsE,YAAY,IAA+B+I,YAGlD,EAAAV,UAAY,SAAC7G,IAEZ,EAAKkE,cAAgBlE,EAAE0F,YAAc,EAAKjC,YAAc,EAAKA,YAAc,EAAKO,eACjFhE,EAAE2E,kBACF3E,EAAEoG,iBACF,EAAKlM,MAAMmC,UAAU,EAAKP,OAAQ,IAAUS,WAI5C,EAAAkK,eAAiB,SAACzG,GAEtBA,EAAE2E,kBACF3E,EAAEoG,iBAGF,EAAKoB,aAEL,EAAKtN,MAAMsE,YAAY,IAA+BiJ,aAGlD,EAAAb,aAAe,SAAC5G,GAEpBA,EAAE2E,kBACF3E,EAAEoG,iBAGF,EAAKsB,YAEL,EAAKxN,MAAMsE,YAAY,IAA+BmJ,YAalD,EAAAjB,cAAgB,SAAC1G,GAErBA,EAAE2E,kBACF3E,EAAEoG,iBAGE,EAAKrC,kBACL,EAAKoC,WAAWnG,GAIpB,EAAK4H,WAAW,QAChB,EAAK1N,MAAMsE,YAAY,IAA+BqJ,MAGlD,EAAAD,WAAa,SAACzL,GAClB,EAAKjC,MAAMgC,YAAY,EAAKJ,OAAQK,IAGhC,EAAA2L,WAAa,WACjBf,YAAW,WAAM,SAAK7M,MAAM8B,YAAY,EAAKF,UAAS,GACtD,EAAK5B,MAAMsE,YAAY,IAA4BuJ,WAE/C,EAAAC,gBAAkB,WACtBjB,YAAW,WAAM,SAAK7M,MAAM8B,YAAY,EAAKF,UAAS,GACtD,EAAK5B,MAAMsE,YAAY,IAA4B5D,cAG/C,EAAAqN,aAAe,WACnB,IAQMC,EAAmB,EAAKhO,MAAMiO,SAUhC,KATA,uBAAK/N,UAAU,qBACX,gBAAC,IAAW,CACRK,UAAW,EAAKP,MAAMO,UACtBM,QAAS,EAAKiN,gBACd1N,QAAS,YAAa,0BAA2B,sBAEjD,gBAAC,IAAK,CAACG,UAAW,EAAKP,MAAMO,UAAWC,MAAM,qBAAqBC,MAAO,IAAUC,gBAKhG,OACI,uBAAKR,UAAU,cACX,2BACI,gBAAC,IAAW,CACRK,UAAW,EAAKP,MAAMO,UACtBM,QAzBD,WACX,EAAKb,MAAMyE,WAAW,EAAK7C,QAC3B,EAAK5B,MAAMsE,YAAY,IAA4B4J,aAwBvCC,SAAU,EAAKnO,MAAMoO,UACrBhO,QAAS,YAAa,yBAA0B,iBAEhD,gBAAC,IAAK,CAACG,UAAW,EAAKP,MAAMO,UAAWC,MAAM,qBAAqBC,MAAO,IAAU4N,OAG5F,2BACI,gBAAC,IAAW,CACR9N,UAAW,EAAKP,MAAMO,UACtBM,QA/BC,WACb,EAAKb,MAAM2E,aAAa,EAAK/C,QAC7B,EAAK5B,MAAMsE,YAAY,IAA4BgK,eA8BvCH,SAAU,EAAKnO,MAAMiO,SACrB7N,QAAS,YAAa,2BAA4B,mBAElD,gBAAC,IAAK,CAACG,UAAW,EAAKP,MAAMO,UAAWC,MAAM,qBAAqBC,MAAO,IAAU8N,SAG3FP,IAKL,EAAAQ,iBAAmB,SAACC,GAExB,OAAK,EAAKzO,MAAMiO,UAEPQ,GAAgB,EAAKC,qBAYvB,KAVK,gBAAC,EAAW,CACRxO,UAAU,cACVK,UAAW,EAAKP,MAAMO,UACtBD,aAAa,EACbQ,MAAO,EAAK8M,cAexB,EAAAe,oBAAsB,WAC1B,IAAM/M,EAAS,EAAK5B,MAAMyJ,OAAOC,KAAKtD,GAChCwI,EAAU,WACZ,EAAKtB,aACL,EAAKtN,MAAMsE,YAAY,IAA4BqJ,MAoBjDkB,EAC8C,OAAhD,EAAK7O,MAAMyJ,OAAOC,KAAK1I,KAAK8N,iBACK,OAAjC,EAAK9O,MAAMyJ,OAAOsF,aACe,IAAjC,EAAK/O,MAAMyJ,OAAOsF,YAClB,EAAK7E,WACL,EAAKL,mBACuB,IAA5B,EAAK7J,MAAMgP,aACTC,EACwC,SAA1C,EAAKjP,MAAMyJ,OAAOC,KAAK1I,KAAK4I,UACtB,YAAa,+BAAgC,sBAC7C,YAAa,2BAA4B,kBAC7CsF,EAA0D,SAA1C,EAAKlP,MAAMyJ,OAAOC,KAAK1I,KAAK4I,UAAuB,WAAa,OAChFuF,EACgB,aAAlBD,EACM,IAA4B9C,iBAC5B,IAA4BD,aAChCiD,EAAmC,aAAlBF,EAA+B,IAAUG,iBAAmB,IAAUC,aASvFC,EAA6D,SAA1C,EAAKvP,MAAMyJ,OAAOC,KAAK1I,KAAK4I,UAAuB,GAAK,mBAEjF,OAAI,YAAiB,EAAK5J,MAAMwP,iBAAmB,EAAK3F,iBAEhD,uBAAK3J,UAAWqP,GACZ,uBAAKrP,UAAU,oCACX,gBAAC,IAAW,CACRA,UAAW,qBACXK,UAAW,EAAKP,MAAMO,UACtBM,QAAS+N,EACTxO,QAAS,YAAa,sBAAuB,YAC7CqP,OAAQ,EAAK5F,iBACbsE,UAAU,GAEV,gBAAC,IAAK,CAAC5N,UAAW,EAAKP,MAAMO,UAAWC,MAAM,qBAAqBC,MAAO,IAAUkN,OAExF,gBAAC,IAAW,CACRpN,UAAW,EAAKP,MAAMO,UACtBM,QA/CP,WACT,EAAKb,MAAMmC,UAAUP,GACrB,EAAK5B,MAAMgJ,KAAKpH,IA8CAxB,QAAS,YAAa,mBAAoB,uBAC1CqP,OAAQ,EAAK5F,iBACbsE,SAAU,EAAKnO,MAAM0P,MAAQ,EAAK1P,MAAMwP,gBAAkB,IAAW7B,KAErE,gBAAC,IAAK,CACFpN,UAAW,EAAKP,MAAMO,UACtBC,MAAM,qBACNC,MAAO,IAAUkP,aAGzB,gBAAC,IAAW,CACRpP,UAAW,EAAKP,MAAMO,UACtBM,QA/DP,WACT,EAAKb,MAAM0D,mBA+DKtD,QAAS,YAAa,4BAA6B,QACnDqP,OAAQ,EAAK5F,iBACbsE,UAAU,GAEV,gBAAC,IAAK,CACF5N,UAAW,EAAKP,MAAMO,UACtBC,MAAM,qBACNC,MAAO,IAAUmP,cAI7B,uBAAK1P,UAAU,uCAKvB,uBAAKA,UAAWqP,GACZ,uBAAKrP,UAAU,oCACX,gBAAC,IAAW,CACRK,UAAW,EAAKP,MAAMO,UACtBM,QAAS+N,EACTxO,QAAS,YAAa,sBAAuB,YAC7CqP,OAAQ,EAAK5F,iBACbsE,SAAU,EAAKnO,MAAM0P,MAErB,gBAAC,IAAK,CAACnP,UAAW,EAAKP,MAAMO,UAAWC,MAAM,qBAAqBC,MAAO,IAAUkN,OAExF,gBAAC,IAAW,CACRpN,UAAW,EAAKP,MAAMO,UACtBM,QAjGE,WACd,EAAKb,MAAMmC,UAAUP,GACrB,EAAK5B,MAAM4I,UAAUhH,IAgGTxB,QAAS,YAAa,wBAAyB,eAC/CqP,OAAQ,EAAK5F,mBAAqB,EAAK7J,MAAM6P,kBAC7C1B,SAAU,EAAKnO,MAAM0P,MAErB,gBAAC,IAAK,CACFnP,UAAW,EAAKP,MAAMO,UACtBC,MAAM,qBACNC,MAAO,IAAUkP,aAGzB,gBAAC,IAAW,CAACpP,UAAW,EAAKP,MAAMO,UAAWuP,YAhFnC,SAACC,GAGpBA,EAAMtF,kBACNsF,EAAM7D,iBACN,EAAKlM,MAAM6E,eAAejD,GAC1B,EAAK5B,MAAMsE,YAAY6K,IA0E4D/O,QAAS6O,GAChF,gBAAC,IAAK,CAAC1O,UAAW,EAAKP,MAAMO,UAAWC,MAAM,qBAAqBC,MAAO2O,KAE9E,gBAAC,IAAW,CACR7O,UAAW,EAAKP,MAAMO,UACtBM,QAxHG,WACf,EAAKb,MAAM8G,WAAWlF,IAwHVxB,QAAS,YACL,yBACA,sEAEJqP,OAAQZ,GAER,gBAAC,IAAK,CACFtO,UAAW,EAAKP,MAAMO,UACtBC,MAAM,qBACNC,MAAO,IAAUuP,cAGzB,gBAAC,IAAW,CACRzP,UAAW,EAAKP,MAAMO,UACtBM,QApIG,WACf,EAAKb,MAAMmF,WAAWvD,GACtB,EAAK5B,MAAMsE,YAAY,IAA4BsI,aAmIvCxM,QAAS,YAAa,yBAA0B,eAChDF,UAAU,wCAEV,gBAAC,IAAK,CAACK,UAAW,EAAKP,MAAMO,UAAWC,MAAM,qBAAqBC,MAAO,IAAUwP,WAG5F,uBAAK/P,UAAU,wCAKnB,EAAAgQ,eAAiB,WACrB,IAAMR,EACF,EAAK1P,MAAMyJ,OAAOC,KAAKS,QAAU,IAAUgG,MAAQ,EAAKnQ,MAAMyJ,OAAOC,KAAKS,QAAU,IAAUiB,UAC5F9C,EACF,EAAKtI,MAAMyJ,QACX,EAAKzJ,MAAMyJ,OAAOC,MAClB,EAAK1J,MAAMyJ,OAAOC,KAAK1I,MACvB,EAAKhB,MAAMyJ,OAAOC,KAAK1I,KAAK8N,gBACtB,EAAK9O,MAAMyJ,OAAOC,KAAK1I,KAAK8N,gBAAgBsB,WAC5C,IAEV,OACI,uBAAKlQ,UAAU,gBACX,gBAAC,IAAc,CAACmQ,OAAQX,EAAMY,MAAOhI,EAAgBiI,QAAS,EAAK5G,iBAKvE,EAAA6G,YAAc,WAClB,GAAI,EAAKC,oBAAqB,CAG1B,IAAMzR,EAAU,2BACT,EAAKgB,MAAM0Q,eAAa,CAC3BC,aAAa,IAEjB,OACI,uBAAKzQ,UAAU,sBACV,EAAKyO,sBACN,gBAAC,IAAS,CACNlF,OAAQ,EAAKzJ,MAAMyJ,OACnBiH,cAAe1R,EACf4R,aAAS1R,EACT2R,UAAW,EAAK7Q,MAAM6Q,UACtBC,aAAc,EAAKA,aACnBC,cAAe,EAAKA,cACpBC,WAAU,EAAKhR,MAAMgR,SACrBC,eAAe,EACfC,IAAK,EAAK5H,SACV6H,YAAa,EAAKnR,MAAMmR,YACxBC,SAAU,EAAKA,SACfC,4BAAwBnS,EACxB+K,QAAS,EAAKqH,cACdC,UAAW,EAAKC,gBAChBC,QAAS,EAAKnG,aACdoG,gBAAiB,EAAK1R,MAAMyJ,OAAOiI,gBACnCC,KAAM,EAAK3R,MAAM2R,KACjBC,iBAAkB,EAAK5R,MAAM+M,mBAC7B8E,YAAa,EAAK7R,MAAMyJ,OAAOoI,YAAc,EAAK7R,MAAMyJ,OAAOoI,YAAc,EAC7EC,aAAc,EAAK9R,MAAM8R,aACzBC,SAAU,EAAK/R,MAAM+R,YAKrC,OAAO,MAGH,EAAAT,cAAgB,WACpB,EAAKtR,MAAMmC,UAAU,EAAKP,OAAQ,IAAUS,UAGxC,EAAAmP,gBAAkB,WAEtB,EAAKxR,MAAMuC,YAAY,EAAKX,OAAQ,EAAKuL,mBAGrC,EAAA2D,aAAe,SAAChL,GACpB,EAAK9F,MAAM6F,SAAS,EAAK2D,UAAUpD,GAAIN,IAGnC,EAAAiL,cAAgB,SAACiB,EAAeC,EAAerQ,EAAgBsE,GACnE,EAAKlG,MAAMoH,YAAYxF,EAAQsE,IAG3B,EAAAgM,aAAe,WACnB,IAAMC,IAAuB,EAAKnS,MAAMmS,qBAClCC,EAAoD,aAA1C,EAAKpS,MAAMyJ,OAAOC,KAAK1I,KAAK4I,UAA2B,EAAK+E,sBAAwB,KACpG,OAAI,EAAKD,qBAED,uBAAKxO,UAAWkB,EAAa8H,mBACxBkJ,EACD,gBAAC,IAAU,CACP3I,OAAQ,EAAKzJ,MAAMyJ,OACnBlJ,UAAW,EAAKP,MAAMO,UACtB8R,YAAa,EAAKrS,MAAM2G,SACxB2L,YAAa,EAAKtS,MAAMsS,YACxBC,aAAc,EAAKvS,MAAMuS,aACzBJ,qBAAsBA,EACtB1J,aAAc,EAAKzI,MAAMyI,gBAKlC,MAGH,EAAA+J,eAAiB,SAACzC,GAEJ,QAAdA,EAAM7R,KAAkB,EAAK8L,aAAgB,EAAKyI,iBAClD,EAAKnH,aAAa,EAAKtL,MAAMyJ,OAAOC,KAAKtD,GAAI,CACzC5D,KAAMuN,EAAM7R,IACZyN,SAAUoE,EAAMpE,SAChBI,QAASgE,EAAMhE,QACfC,QAAS+D,EAAM/D,QACfS,OAAQsD,EAAMtD,OACd7O,OAAQmS,EAAMnS,OACd6M,gBAAiB,WAAM,OAAAsF,EAAMtF,mBAC7ByB,eAAgB,WAAM,OAAA6D,EAAM7D,qBAahC,EAAAwG,kBAAoB,SAACC,GACzB,IAAIC,EAAU,eASd,GAPI,EAAK9I,eAAiB,EAAKE,cAC3B4I,GAAW,0BAEX,EAAK5I,cACL4I,GAAW,yBAGXD,EACA,OAAO,uBAAKzS,UAAW0S,IAG3B,GAA8C,aAA1C,EAAK5S,MAAMyJ,OAAOC,KAAK1I,KAAK4I,UAC5BgJ,GAAW,6BACR,KACHC,MAAMC,QAAQ,EAAK9S,MAAMyJ,OAAOC,KAAK1I,KAAK+R,UACK,IAA/C,EAAK/S,MAAMyJ,OAAOC,KAAK1I,KAAK+R,QAAQ1V,OAIpC,OAAO,KAFPuV,GAAW,uBAKf,OAAO,uBAAK1S,UAAW0S,KAGnB,EAAAxB,SAAW,SAAC4B,GAChB,EAAKhT,MAAMwG,UAAUwM,EAAI5C,a,EAEjC,OA7xBgC,iBASrB,YAAAnQ,OAAP,WACI,MAA8C,aAA1CE,KAAKH,MAAMyJ,OAAOC,KAAK1I,KAAK4I,UACrB,gBAAC,IAAmB,CAACqJ,SAAU9S,KAAKH,MAAMyJ,OAAOC,KAAK1I,KAAKiS,WAE3D9S,KAAK+S,oBAIb,YAAAC,mBAAP,SAA0BC,IAClBjT,KAAKH,MAAMyJ,OAAOM,UAAaqJ,EAAU3J,OAAOM,UAAa5J,KAAKH,MAAMyJ,OAAOQ,SAC/E9J,KAAKkT,YAITlT,KAAKuK,oBAAiBxL,GAGnB,YAAAoU,sBAAP,SAA6BC,GACzB,OAAQ,EAAcpT,KAAKH,MAAOuT,IAI/B,YAAAC,+BAAP,WACI,OAAO,YAAa,oCAAqC,sBAGrD,YAAAH,UAAR,WACQlT,KAAKoJ,YAAcpJ,KAAKoJ,WAAWyD,UAE9B7M,KAAKoJ,WAAWyD,QAAQyG,SAASC,SAASC,gBAC3CxT,KAAKoJ,WAAWyD,QAAQC,QAMvB9M,KAAKoJ,WAAWyD,QAAgB4G,gBACjCzT,KAAKoJ,WAAWyD,QAAQ4G,eAAe,CAAEC,SAAU,OAAQC,MAAO,UAAWC,OAAQ,cA6BzF,YAAAb,iBAAR,WACI,IAAMc,EAAiB7T,KAAKH,MAAMyJ,OAAOqB,SAAW,sBAAwB,aACxEmJ,EAAmB9T,KAAKH,MAAMyJ,OAAOqB,SAAW,eAAiB,wCACjE3K,KAAK2J,eAAiB3J,KAAK6J,cAC3BiK,GAAoB,0BAEpB9T,KAAK6J,cACLiK,GAAoB,yBAIxB,IAAMlV,EACFoB,KAAK0J,mBAAqB1J,KAAK6K,0BAC3B,uBAAK9K,UAAU,yBACX,uBAAKA,UAAU,sBACVC,KAAKuS,mBAAkB,GACvBvS,KAAK+R,gBAET/R,KAAKqO,kBAAiB,IAG3B,uBAAKtO,UAAU,yBACX,uBAAKA,UAAU,sBACVC,KAAKuS,mBAAkB,GACvBvS,KAAK+P,iBACL/P,KAAKqQ,eAETrQ,KAAKqO,kBAAiB,GACvB,uBAAKtO,UAAU,sBACVC,KAAKuS,mBAAkB,GACvBvS,KAAK+R,iBAKtB,OACI,uBACIhS,UAAW+T,EACXtT,KAAMR,KAAKH,MAAMW,KACjBuQ,IAAK/Q,KAAKoJ,WACV2K,SAAU,EACVC,UAAWhU,KAAKqS,eAChB3R,QAASV,KAAKiK,aACdgK,cAAejU,KAAKwK,oBAEpB,uBAAKzK,UAAW8T,GACX7T,KAAK4N,eACN,uBAAK7N,UAAU,eAAenB,MAMtC,YAAAyL,sBAAR,SAA8BD,GAC1B,QAAIpK,KAAK0J,mBAGJU,EAAK8J,QAAQjT,EAAagI,oBAAsBmB,EAAK8J,QAAQjT,EAAa+H,yBA0C3E,YAAAsH,kBAAR,WACI,OAAOtQ,KAAKyK,0BAA4BzK,KAAK4K,8BAezC,YAAA2D,mBAAR,WACI,GAAIvO,KAAKwJ,aAAc,CACnB,IAAMD,EAAOvJ,KAAKkL,cAClB,OACIlL,KAAK+K,aACLxB,EAAKqJ,UACJ5S,KAAKH,MAAMyJ,OAAO6K,YACnBzB,MAAMC,QAAQpJ,EAAKqJ,UACK,IAAxBrJ,EAAKqJ,QAAQ1V,OAEd,QAAI8C,KAAK0J,mBACJ1J,KAAK6K,2BA0HrB,sBAAY,qBAAM,C,IAAlB,WACI,OAAO7K,KAAKH,MAAMyJ,OAAOC,KAAKtD,I,gCAyD1B,YAAAkH,WAAR,WAEInN,KAAKuN,WAAWvN,KAAKH,MAAMiO,SAAW,MAAQ,WAG1C,YAAAT,UAAR,WAEIrN,KAAKuN,WAAW,QAkGZ,YAAAP,eAAR,WAGI,OADiBhN,KAAKmJ,SAAS0D,QAAU7M,KAAKmJ,SAAS0D,QAAQuH,mBAAgBrV,IAC5D,YAA2BiB,KAAKH,MAAMyJ,OAAOC,KAAK1I,KAAKwT,SA6QtE,YAAA/B,cAAR,WACI,IAAMgC,EAAiBf,SAASC,cAChC,QAAIc,GACuE,OAAhEA,EAAeJ,QAAQjT,EAAa+H,yBAoCvD,EA7xBA,CAAgC,a,0BCVhC,kBACI,WAAYnJ,G,OACR,YAAMA,IAAM,KA0MpB,OA5M6B,iBAOlB,YAAAC,OAAP,e,IAAA,OACUyU,EAAevU,KAAKH,MAAM2U,qBAmB1BC,EAA0BzU,KAAKH,MAAM6U,iBACrC,YAAa,8CAA+C,2CAC5D,YAAa,4CAA6C,2CAuB1DC,GAA6C,QAA/B,EAACJ,EAAaK,yBAAiB,SAAK,GAAK,EACvDC,GAC6B,QAA/B,EAACN,EAAaK,yBAAiB,SAAK,GAAK5U,KAAKH,MAAMiV,UAAY,IAC/DP,EAAaQ,gBAAkB,IAAI7X,OAAS,EAE3C8X,EAA+BhV,KAAKH,MAAMoV,OAAOC,sBAAwB,IAAaC,WAE5F,OACI,uBAAKlP,GAAG,iBACJ,uBAAKlG,UAAU,oBACX,uBAAKA,UAAU,0BACX,gBAAC,IAAW,CACRK,UAAWJ,KAAKH,MAAMO,UACtBM,QAnDL,WAEX,EAAKb,MAAM4C,kBACX,EAAK5C,MAAMsE,YAAY,IAA4BiR,SAiDnCpH,SAAUhO,KAAKH,MAAM0P,KACrBxP,UAAU,gBACVE,QAAS,YAAa,qBAAsB,kBAE5C,gBAAC,IAAK,CACFG,UAAWJ,KAAKH,MAAMO,UACtBC,MAAM,qBACNC,MAAO,IAAU8U,UAGzB,gBAAC,IAAW,CACRhV,UAAWJ,KAAKH,MAAMO,UACtBM,QAhDH,WACT6T,EAAaQ,iBACb,EAAKlV,MAAM8C,aAAa4R,EAAaQ,gBACrC,EAAKlV,MAAMsE,YAAY,IAA4BkR,YA8CvCrH,UAAW2G,GAAe3U,KAAKH,MAAM0P,KACrCxP,UAAU,gBACVE,QAAS,YAAa,uBAAwB,oBAE9C,gBAAC,IAAK,CACFG,UAAWJ,KAAKH,MAAMO,UACtBC,MAAM,qBACNC,MAAO,IAAU+U,YAGzB,gBAAC,IAAW,CACRjV,UAAWJ,KAAKH,MAAMO,UACtBM,QAvDH,WACT6T,EAAaQ,gBAA4D,iBAAnCR,EAAaK,oBAGnD,EAAK/U,MAAMgD,oBAAoB0R,EAAaQ,gBAC5C,EAAKlV,MAAMsE,YAAY,IAA4BmR,YAmDvCtH,UAAW6G,GAAe7U,KAAKH,MAAM0P,KACrCxP,UAAU,gBACVE,QAAS,YAAa,uBAAwB,uBAE9C,gBAAC,IAAK,CACFG,UAAWJ,KAAKH,MAAMO,UACtBC,MAAM,qBACNC,MAAO,IAAUgV,YAGzB,gBAAC,IAAW,CACRlV,UAAWJ,KAAKH,MAAMO,UACtBM,QAASV,KAAKH,MAAMwD,cACpB2K,SAAUhO,KAAKH,MAAM0P,OAASyF,EAC9BjV,UAAU,gBACVE,QAAS,YAAa,4BAA6B,2BAEnD,gBAAC,IAAK,CACFG,UAAWJ,KAAKH,MAAMO,UACtBC,MAAM,qBACNC,MAAO,IAAUiV,WAGzB,gBAAC,IAAW,CACRnV,UAAWJ,KAAKH,MAAMO,UACtBM,QAASV,KAAKH,MAAM0D,gBACpByK,SAAUhO,KAAKH,MAAM0P,OAASyF,EAC9BjV,UAAU,gBACVE,QAAS,YAAa,8BAA+B,6BAErD,gBAAC,IAAK,CACFG,UAAWJ,KAAKH,MAAMO,UACtBC,MAAM,qBACNC,MAAO,IAAUmP,aAGzB,gBAAC,IAAW,CACRrP,UAAWJ,KAAKH,MAAMO,UACtBM,QAxHJ,WACZgM,YAAW,WAAM,SAAK7M,MAAMsB,YAAW,GACvC,EAAKtB,MAAMsE,YAAY,IAA4BuJ,WAuHnC3N,UAAU,gBACVE,QAAS,YAAa,yBAA0B,gBAEhD,gBAAC,IAAK,CACFG,UAAWJ,KAAKH,MAAMO,UACtBC,MAAM,qBACNC,MAAO,IAAUC,eAGzB,gBAAC,IAAW,CACRH,UAAWJ,KAAKH,MAAMO,UACtBM,QAASV,KAAKH,MAAM4D,gBACpBuK,UAAWhO,KAAKH,MAAMiV,UACtB/U,UAAU,gBACVE,QAAS,YAAa,6BAA8B,qBAEpD,gBAAC,IAAK,CACFG,UAAWJ,KAAKH,MAAMO,UACtBC,MAAM,qBACNC,MAAO,IAAUkV,kBAGzB,gBAAC,IAAW,CACRpV,UAAWJ,KAAKH,MAAMO,UACtBM,QApIW,WAC3B,EAAKb,MAAMkD,yBACX,EAAKlD,MAAMsE,YAAY,IAA4BsR,yBAmInC1V,UAAU,gBACVE,QAASwU,GAET,gBAAC,IAAK,CACFrU,UAAWJ,KAAKH,MAAMO,UACtBC,MAAM,qBACNC,MAAO,IAAUoV,oBAGzB,gBAAC,IAAW,CACRtV,UAAWJ,KAAKH,MAAMO,UACtBM,QApJP,WACT,EAAKb,MAAMgE,OACX,EAAKhE,MAAMsE,YAAY,IAA4BwR,OAmJnC3H,UAAWhO,KAAKH,MAAM+V,MACtB7V,UAAU,gBACVE,QAAS,YAAa,mBAAoB,cAE1C,gBAAC,IAAK,CACFG,UAAWJ,KAAKH,MAAMO,UACtBC,MAAM,qBACNC,MAAO,IAAUuV,UAGzB,gBAAC,IAAW,CACRzV,UAAWJ,KAAKH,MAAMO,UACtBM,QAASV,KAAKH,MAAM8D,OACpBqK,UAAWhO,KAAKH,MAAMiV,WAAa9U,KAAKH,MAAM0P,KAC9CxP,UAAU,gBACVE,QAAS,YAAa,wCAAyC,wBAE/D,gBAAC,IAAK,CACFG,UAAWJ,KAAKH,MAAMO,UACtBC,MAAM,qBACNC,MAAO,IAAUwV,mBAI7B,gBAAC,IAAe,CACZ1V,UAAWJ,KAAKH,MAAMO,UACtBoR,KAAMxR,KAAKH,MAAM2R,KACjByD,OAAQjV,KAAKH,MAAMoV,OACnBxN,aApJK,WACjB,EAAK5H,MAAM4H,eACX,EAAK5H,MAAMsE,YAAY,IAA4B4R,eAmJvCxO,aAzJK,WACjB,EAAK1H,MAAM0H,eACX,EAAK1H,MAAMsE,YAAY,IAA4BqD,kBA0J/C,uBAAKzH,UAAU,sBAI/B,EA5MA,CAA6B,iBA8MhBiW,EAAmB,aAvNhC,SAAyBhM,GACrB,OAAO,2BACAA,EAAMiM,MAAI,CACbnB,UAAW9K,EAAMiM,KAAKC,QAAQhZ,OAC9BsX,qBAAsB,YAA0BxK,EAAMiM,MACtDvB,iBAAkB1K,EAAMmM,UAAU/F,YAkNelP,EAAzB,CAAyC,GCxOzE,SAAS,EAAgB8I,GACrB,OAAO,2BAAKA,EAAMiM,MAAI,CAAEG,cAAepM,EAAMmM,YAGjD,IAAME,EFi0BK,YAAQ,KAAMnV,EAAd,CAA8B,GE/zBzC,cAKI,WAAYrB,GAAZ,MACI,YAAMA,IAAM,K,OALR,EAAAyW,YAAsB,EACtB,EAAAC,sBAAuB,EACvB,EAAAC,oBAAuD,cA+GvD,EAAAC,gBAAkB,SAACrW,GACvB,MAAO,CACHA,UAAWA,EACX8V,QAAS,EAAKrW,MAAMqW,QACpBrF,SAAU,EAAKhR,MAAMgR,SACrBH,UAAW,EAAK7Q,MAAM6Q,UACtBgG,cAAe,EAAK7W,MAAM6W,cAC1BC,iBAAgB,EAAK9W,MAAM8W,eAC3BhM,UAAU,EACViM,WAAY,EAAKA,WACjBC,eAAgB,EAAKC,UACrBC,uBAAsB,EAAKlX,MAAMmX,UAC3B,EAAKnX,MAAMmX,SAASC,cAAcC,OAAOH,uBAI/C,EAAAI,iBAAmB,SAAC/W,GACxB,IAAIgX,EAAgB,EAIpB,OAHI,EAAKZ,oBAAoB3J,UACzBuK,EAAgB,EAAKZ,oBAAoB3J,QAAQwK,cAE9C,CACHlB,UAAW,EAAKtW,MAAMuW,cAAcD,UACpCjT,gBAAiB,EAAKrD,MAAMuW,cAAclT,gBAC1CC,WAAY,EAAKtD,MAAMuW,cAAcjT,WACrCmU,UAAW,EAAKzX,MAAMyX,UACtB/H,KAAM,EAAK1P,MAAM0P,KACjBgI,iBAAkB,EAAK1X,MAAMkE,eAC7ByT,YAAa,EAAK3X,MAAM2X,YACxB3G,SAAU,EAAKhR,MAAMgR,SACrB4G,sBAAuB,EAAK5X,MAAMkD,uBAClCE,0BAA2B,EAAKpD,MAAMoD,0BACtC7C,UAAWA,EACXsX,OAAQ,EAAKC,mBACbC,SAAU,EAAK/X,MAAM2R,KAAKqG,KAC1B1P,eAAgB,EAAKtI,MAAMiY,sBAC3BT,aAAcD,EACdW,qBACI,EAAKlY,MAAMmX,WAAY,EAAKnX,MAAMmX,SAASgB,kBACrC,EAAKnY,MAAMmX,SAASgB,gBAAgBC,uBAK9C,EAAAN,mBAAqB,SAAC3P,EAAoBC,GAC9C,EAAKpI,MAAMiI,gBAAgB,EAAKjI,MAAMiY,sBAAuB9P,EAAYC,IAIrE,EAAAiQ,YAAc,SAACtI,G,MAEnB,OAAQA,EAAM7R,KAGV,IAAK,KACI6R,EAAMhE,SAAW1M,MAAgB,IAAOK,KAASqQ,EAAM/D,SAAW3M,MAAgB,IAAOK,OAE1F,EAAKM,MAAMgE,OACX,EAAKhE,MAAMsE,YAAY,IAA+BwR,OAE1D,MAEJ,IAAK,IACL,IAAK,IAEI,YAA0B,EAAK9V,OAAOsY,gBACnB,QAApB,EAAC,EAAKtY,MAAMmX,gBAAQ,eAAEC,cAAcrK,uBAEhCgD,EAAMpE,UAAaoE,EAAMhE,SAAYgE,EAAMtD,OAInCsD,EAAMpE,UAAaoE,EAAMtD,QAAWsD,EAAMhE,UAClDgE,EAAMtF,kBACN,EAAKzK,MAAMqF,OACX,EAAKrF,MAAMsE,YAAY,IAA+BgB,QANtDyK,EAAMtF,kBACN,EAAKzK,MAAMuF,OACX,EAAKvF,MAAMsE,YAAY,IAA+BkB,QAO9D,MAEJ,IAAK,MACD,GAAI,EAAKxF,MAAMyX,UAAW,EAEhBc,EAAgB,EAAKvY,MAAMqW,QAAQmC,MAAK,SAACC,GAAQ,OAAAA,EAAIjJ,gBAAkB,IAAWkJ,WAEpF,EAAK1Y,MAAMgJ,KAAKuP,EAAc7O,KAAKtD,IAEvC2J,EAAMtF,sBACH,CAEH,IAAMkO,EAAc,YAA0B,EAAK3Y,OAAOsY,cACtDK,GACA,EAAK3Y,MAAM4I,UAAU+P,GAG7B,MACJ,IAAK,KAGG,IAAMJ,EAFV,GAAI,EAAKvY,MAAMyX,WAELc,EAAgB,EAAKvY,MAAMqW,QAAQmC,MAAK,SAACC,GAAQ,OAAAA,EAAIjJ,gBAAkB,IAAWkJ,WAEpF,EAAK1Y,MAAM8I,SAASyP,EAAc7O,KAAKtD,IAE3C2J,EAAMtF,oBAwCd,EAAAsM,WAAa,SAACtN,EAAwBmP,G,UAE1C,IAAK,EAAK5Y,MAAMmX,WAAa,EAAKnX,MAAM0Q,cACpC,OAAO,KAEX,IAIMmI,EAAsB,IAAVD,EACZE,EACFF,IAAU,EAAK5Y,MAAMqW,QAAQhZ,OAAS,EAClC,gBAAC,EAAW,CACRiD,aAAa,EACbC,UAAW,EAAKP,MAAMO,UACtBL,UAAU,qBACVY,MAXO,WACf+L,YAAW,WAAM,SAAK7M,MAAM8B,YAAY2H,EAAOC,KAAKtD,MAAK,GACzD,EAAKpG,MAAMsE,YAAY,IAA4BuJ,aAW/C,KAEFkL,EAAyB,EAAK/Y,MAAMqW,QAAQmC,MAC9C,SAACC,GAAQ,mBAAiBA,EAAIjJ,gBAAkBiJ,EAAI/O,KAAKtD,KAAOqD,EAAOC,KAAKtD,MAE1E4S,EAAgB,EAAKhZ,MAAMmX,SAAS6B,cAEpC1G,EACF0G,GAAiBA,EAFG,KAEgCA,EAAgB,EAC9DA,EACA,EAAKhZ,MAAMmX,SAAS8B,8BACpB,SACA/Z,EAEV,OACI,uBAAKhB,IAAKuL,EAAOC,KAAKtD,GAAIA,GAAIqD,EAAOC,KAAKtD,IACtC,gBAAC,IAAa,KACV,gBAACoQ,EAAmB,CAChB7V,KAAK,WACL2R,YAAaA,EACbC,aAAc,EAAKvS,MAAMmX,SAAS8B,8BAClCjI,SAAU,EAAKhR,MAAMgR,SACrBvH,OAAQA,EACRlJ,UAAW,EAAKP,MAAMO,UACtBsQ,UAAW,EAAK7Q,MAAM6Q,UACtBM,YAAa,EAAKnR,MAAMmR,YACxBlD,SAAuB,OAAb6K,EACV1K,UAAWyK,EACXlH,KAAM,EAAK3R,MAAM2R,KACjBuH,UAAW,EAAKlZ,MAAMmZ,UAAU9b,OAAS,EACzCqT,cAAe,EAAK1Q,MAAM0Q,cAC1B1B,aAAc,EAAKhP,MAAMmX,SAASnI,aAClCmD,qBAAsB,EAAKnS,MAAMmX,SAAShF,qBAE1CL,aAAc,EACdpC,KAAM,EAAK1P,MAAM0P,KACjB3C,mBAAuC,QAArB,EAAE,EAAK/M,MAAMmX,gBAAQ,eAAEC,cAAcrK,mBACvDyC,cAAe/F,EAAO+F,cACtBK,oBACwC,QAApC,EAAmB,QAAnB,IAAK7P,MAAMmX,gBAAQ,eAAEgB,uBAAe,UAAEC,4BACLlZ,IAA3B6Z,EAGVhH,SAAU,EAAK/R,MAAMoV,OAAOrD,YAGnC+G,IAKL,EAAA7B,UAAY,SAACmC,KAIb,EAAA5S,UAAY,SAAC6D,GACjB,YAAgBA,EAAI,EAAKrK,MAAMwG,YApU/B,EAAK/E,iBAAmB,EAAKA,iBAAiBtD,KAAK,G,EAsU3D,OA7UkC,iBAUvB,YAAAkb,kBAAP,sBACIlZ,KAAKH,MAAMkH,eACX5H,OAAOga,iBAAiB,UAAWnZ,KAAKkY,aACxC/Y,OAAOga,iBAAiB,UAAU,WAAM,SAAKC,iBAAe,GAC5D7F,SAAS4F,iBAAiB,QAASnZ,KAAKqG,WAAW,IAGhD,YAAAgT,qBAAP,sBACIla,OAAOma,oBAAoB,UAAWtZ,KAAKkY,aAC3C/Y,OAAOma,oBAAoB,UAAU,WAAM,SAAKF,iBAChD7F,SAAS+F,oBAAoB,QAAStZ,KAAKqG,WAC3CrG,KAAKH,MAAMwH,mBAGR,YAAA2L,mBAAP,SAA0BC,GAA1B,WACQjT,KAAKH,MAAM0Z,SAAWtG,EAAUsG,QAAUvZ,KAAKuW,uBAC/CvW,KAAKuW,sBAAuB,EAK5B7J,YAAW,WACPvN,OAAOqa,uBAAsB,WACzB,EAAK3Z,MAAMsH,yBAMpB,YAAArH,OAAP,WACI,IAAM2Z,EAAmC,CACrC7B,SAAU5X,KAAKH,MAAM2R,KAAKqG,KAC1B6B,WAAY1Z,KAAKH,MAAM2R,KAAKmI,QAI5B3Z,KAAKH,MAAMgR,WACX7Q,KAAKsW,YAActW,KAAKsW,YAAc,GAI1C,IAAMsD,GAAe5Z,KAAKH,MAAM0P,MAASvP,KAAKH,MAAM0Z,QAAYvZ,KAAKH,MAAMgR,cAA0B9R,EAAf,gBAAC,IAAQ,MACzF8a,EAC4B,IAA9B7Z,KAAKH,MAAMqW,QAAQhZ,OAAe,KAC9B,gBAAC,EAAW,CACRiD,aAAa,EACbJ,UAAU,oBACVY,MAAOX,KAAKsB,iBACZlB,UAAWJ,KAAKH,MAAMO,YAIlC,OACI,uBAAK6F,GAAG,aAAazF,KAAK,OAAOsZ,MAAOL,GACpC,uBAAK1Z,UAAU,eACX,8BAAWC,KAAKH,MAAMka,QAAU/Z,KAAKH,MAAMka,QAAU,IAAE,KACzE,OAAAC,EAAA,GAAiBha,KAAKH,MAAMmX,YAEd,0BAAQjG,IAAK/Q,KAAKwW,oBAAqBvQ,GAAG,sBACrCjG,KAAKia,qBACLL,GAEL,2BACI3T,GAAG,sBAAqB,aACZ,YAAa,4CAA6C,cAErEjG,KAAKka,oBAAoBla,KAAKH,MAAMO,YAEzC,wBAAM6F,GAAG,sBACJ4T,EACA7Z,KAAKma,mBAAmBna,KAAKH,MAAMO,cAM5C,YAAAkB,iBAAR,sBACIoL,YAAW,WAAM,SAAK7M,MAAMyB,qBAAoB,IAE5C,YAAA2Y,mBAAR,WACI,OAAO,gBAACjE,EAAgB,OAGpB,YAAAkE,oBAAR,SAA4B9Z,GACxB,GAAIJ,KAAKH,MAAMuW,cAAchG,QAAS,CAClC,IAAMgK,EAAgBpa,KAAKmX,iBAAiB/W,GAC5C,OAAO,gBAAC,IAAa,eAAKga,IAG9B,OAAO,MAGH,YAAAD,mBAAR,SAA2B/Z,GAGvB,IAAKJ,KAAKH,MAAMwa,cAAgBra,KAAKH,MAAMgR,SACvC,OAAO,KAIX,IAAMyJ,EAAeta,KAAKyW,gBAAgBrW,GAC1C,OAAO,gBAAC,IAAY,eAAKka,KA8NjC,EA7UA,CAAkC,a,ICzBjB,E,8GAAjB,SAAiBC,GAuDb,SAAgBnY,EAAYoY,GAExB,IAAM/B,EAAQ+B,EAAIC,UAAUvE,QAAQwE,WAAU,SAACC,GAAM,OAAAA,EAAEpR,KAAKtD,KAAOuU,EAAI1Z,QAAQD,KAAKY,UAC9EmZ,EAAgB,YAA0BJ,EAAIC,WACpD,GAAIhC,GAAS,GAAKmC,EAAczC,gBAAkBqC,EAAI1Z,QAAQD,KAAKY,OAAQ,CACvE,IAAMoZ,EAAS,YAAIL,EAAIC,UAAUvE,SAC3BrJ,EAAU2N,EAAIC,UAAUvE,QAAQuC,GAChCqC,EAAU,2BACTjO,GAAO,CACV/C,SAAS,IAMb,OAFA+Q,EAAOpC,GAAS,IAAQsC,gBAAgBD,GAEjC,2BACAN,EAAIC,WAAS,CAChBvE,QAAS2E,IAEV,GAAIpC,GAAS,EAAG,CAEboC,EAAS,YAAIL,EAAIC,UAAUvE,SAC3BrJ,EAAU2N,EAAIC,UAAUvE,QAAQuC,GAChCqC,EAAU,eACTjO,GAMP,OAFAgO,EAAOpC,GAASqC,EAET,2BACAN,EAAIC,WAAS,CAChBvE,QAAS2E,IAIjB,OAAOL,EAAIC,UAGf,SAAgBO,EAAaR,GACzB,IAAM/B,EAAQ+B,EAAIC,UAAUvE,QAAQwE,WAAU,SAACC,GAAM,OAAAA,EAAEpR,KAAKtD,KAAOuU,EAAI1Z,QAAQD,KAAKY,UAC9EmZ,EAAgB,YAA0BJ,EAAIC,WACpD,GAAIhC,GAAS,GAAKmC,EAAc7F,iBAAmByF,EAAI1Z,QAAQD,KAAKY,OAAQ,CACxE,IAAMoZ,EAAS,YAAIL,EAAIC,UAAUvE,SAC3BzY,EAAS+c,EAAIC,UAAUvE,QAAQuC,GAC/BqC,EAAU,2BACTrd,GAAM,CACTmM,UAAU,IAMd,OAFAiR,EAAOpC,GAASqC,EAET,2BACAN,EAAIC,WAAS,CAChBvE,QAAS2E,IAIjB,OAAOL,EAAIC,UAjHC,EAAAzY,UAAhB,SAA0BwY,GAEtB,IAAII,EAAgB,YAA0BJ,EAAIC,WAClD,GAAIG,EAAczC,gBAAkBqC,EAAI1Z,QAAQD,KAAKY,OAAQ,CAIzD,IAHA,IAAIgZ,EAAYD,EAAIC,UAGbG,EAAczC,eAAiByC,EAAc7F,gBAAgB,CAGhE,IAAIkG,GAFJL,EAAgB,YAA0BH,IAELS,iBACL,iBAArBD,IACPA,EAAmBL,EAAchG,mBAGL,iBAArBqG,IACPR,EAAYrY,EAAY,2BACjBoY,GAAG,CACNC,UAAS,EACT3Z,QAAS,2BACF0Z,EAAI1Z,SAAO,CACdD,KAAM,CAAEY,OAAQgZ,EAAUvE,QAAQ+E,GAAkB1R,KAAKtD,SAGjEwU,EAAYO,EAAa,2BAClBR,GAAG,CACNC,UAAS,EACT3Z,QAAS,2BAAK0Z,EAAI1Z,SAAO,CAAED,KAAM,CAAEY,OAAQgZ,EAAUvE,QAAQ+E,GAAkB1R,KAAKtD,UAKhG,IAAM4U,EAAS,YAAIJ,EAAUvE,SAGvBiF,EAAgBN,EAAOH,WAAU,SAACC,GAAM,OAAAA,EAAEpR,KAAKtD,KAAOuU,EAAI1Z,QAAQD,KAAKY,UAU7E,OATI0Z,GAAiB,IACjBN,EAAOM,GAAiB,2BACjBN,EAAOM,IAAc,CACxBrR,SAAS,EACTF,UAAU,EACV3H,UAAWuY,EAAI1Z,QAAQD,KAAKoB,aAI7B,2BACAwY,GAAS,CACZvE,QAAS2E,IAIjB,OAAOL,EAAIC,WAGC,EAAArY,YAAW,EAuCX,EAAA4Y,aAAY,EA4BZ,EAAAzY,WAAhB,SACIiY,EACAY,GAGA,IAAMR,EAAgB,YAA0BJ,EAAIC,WACpD,GAAID,EAAI1Z,QAAQD,KAAKY,SAAWmZ,EAAc7F,eAAgB,CAC1D,IAAI0F,EAAYD,EAAIC,UACdY,EAAWZ,EAAUvE,QAAQwE,WAAU,SAACC,GAAM,OAAAA,EAAEpR,KAAKtD,KAAOuU,EAAI1Z,QAAQD,KAAKY,UAC7E6Z,EACFV,EAAczC,gBAAkByC,EAAc7F,kBAAoB6F,EAAczC,cAEhF8C,EAAmBT,EAAIC,UAAUvE,QAAQwE,WAAU,SAACC,GAAM,OAAAA,EAAEpR,KAAKtD,KAAO2U,EAAczC,iBACtF8C,EAAmB,IACnBA,EAAmBT,EAAIC,UAAUvE,QAAQwE,WAAU,SAACC,GAAM,OAAAA,EAAEpR,KAAKtD,KAAO2U,EAAc7F,mBAGtFkG,GAAoB,IACpBR,EAAYrY,EAAY,2BACjBoY,GAAG,CACNC,UAAS,EACT3Z,QAAS,2BACF0Z,EAAI1Z,SAAO,CACdD,KAAM,CAAEY,OAAQgZ,EAAUvE,QAAQ+E,GAAkB1R,KAAKtD,SAGjEwU,EAAYO,EAAa,2BAClBR,GAAG,CACNC,UAAS,EACT3Z,QAAS,2BAAK0Z,EAAI1Z,SAAO,CAAED,KAAM,CAAEY,OAAQgZ,EAAUvE,QAAQ+E,GAAkB1R,KAAKtD,UAI5F,IAAM4U,EAAS,YAAIJ,EAAUvE,SAW7B,OAVImF,GAAY,GAAKb,EAAI1Z,QAAQD,KAAKY,SAAWmZ,EAAc7F,iBAC3D8F,EAAOQ,GAAY,2BACZR,EAAOQ,IAAS,CACnBvR,QAC+B,kBAApBsR,EAAgCA,EAAkBE,EAC7D1R,UAAU,EACV3H,UAAWuY,EAAI1Z,QAAQD,KAAKoB,aAI7B,2BACAwY,GAAS,CACZvE,QAAS2E,IAGjB,OAAOL,EAAIC,WAGC,EAAA7V,kBAAhB,SAAkC4V,GAC9B,IAAM/B,EAAQ+B,EAAIC,UAAUvE,QAAQwE,WAAU,SAACC,GAAM,OAAAA,EAAEpR,KAAKtD,KAAOuU,EAAI1Z,QAAQD,KAAKY,UACpF,GAAIgX,GAAS,EAAG,CACZ,IAAMoC,EAAS,YAAIL,EAAIC,UAAUvE,SAEjC,OADA2E,EAAOpC,GAAS,2BAAKoC,EAAOpC,IAAM,CAAElH,iBAAkBsJ,EAAOpC,GAAOlH,kBAC7D,2BACAiJ,EAAIC,WAAS,CAChBvE,QAAS2E,IAGjB,OAAOL,EAAIC,WAGC,EAAA3V,aAAhB,SAA6B0V,GACzB,IAAM/B,EAAQ+B,EAAIC,UAAUvE,QAAQwE,WAAU,SAACC,GAAM,OAAAA,EAAEpR,KAAKtD,KAAOuU,EAAI1Z,QAAQD,KAAKY,UACpF,GAAIgX,GAAS,EAAG,CACZ,IAAMoC,EAAS,YAAIL,EAAIC,UAAUvE,SAEjC,OADA2E,EAAOpC,GAAS,2BAAKoC,EAAOpC,IAAM,CAAEtE,YAAa0G,EAAOpC,GAAOtE,aACxD,2BACAqG,EAAIC,WAAS,CAChBvE,QAAS2E,IAGjB,OAAOL,EAAIC,WAGC,EAAAc,eAAhB,SAA+Bf,GAE3B,IACMgB,EADkBC,KAAKC,MAAMlB,EAAI1Z,QAAQD,MAEzC8a,EAAmB,aAAqBH,GACxCI,EAAgBJ,EAAYvE,cAC5BuE,EAAYvE,cAAcC,OAAOwC,WACjCc,EAAIC,UAAUjJ,KAAKmI,OACnBkC,EAAcL,EAAYvE,cAC1BuE,EAAYvE,cAAcC,OAAOU,SACjC4C,EAAIC,UAAUjJ,KAAKqG,KAGzB,GACI2D,GACAA,EAAYvE,eACZuE,EAAYvE,cAAc6E,QAAUtB,EAAIC,UAAUsB,gBACpD,CACE,IAAMC,EAAY,IAAQC,iBAAiBT,GAE3C,YAAsBhB,EAAK,IAAY0B,cAAe,CAAEC,OAAQH,IAChE,YAAsBxB,EAAK,IAAY4B,sBAAuB,CAAED,OAAQH,IAG5E,OAAO,2BACAxB,EAAIC,WAAS,CAChBzD,SAAUwE,EACVjL,cAAe,2BAAKoL,GAAgB,CAAEU,qBAAsB,IAC5D7K,KAAM,CACFqG,KAAMgE,EACNlC,OAAQiC,MAtOxB,CAAiB,MAAO,K,ICkBP,GCpBA,GCqBA,G,gBF3BXU,GAAY,EAAQ,SA0B1B,SAAiBC,GACb,SAASC,EACL/B,EACAgC,EAEAC,GAEA,IAAM7B,EAAS,YAAIJ,EAAUvE,SACvByG,EAA6B,GA6BnC,OA5BAF,EAAQG,SAAQ,SAACnb,GACb,IAAMgX,EAAQgC,EAAUvE,QAAQwE,WAAU,SAACnR,GAAS,OAAAA,EAAKA,KAAKtD,KAAOxE,KACrE,IAAe,IAAXgX,EAAJ,CAGA,IAAMoE,EAAOpC,EAAUvE,QAAQuC,GAE/B,GAAiC,SAA7BoE,EAAKtT,KAAK1I,KAAK4I,WAAwB,YAA2BoT,EAAKtT,KAAK1I,KAAKwT,QAAS,CAE1F,IAAMyI,EAAaR,GAAUO,EAAKtT,KAAK1I,MAEvCic,EAAWlK,QAAU,GACrBiI,EAAOpC,GAAS,IAAQsC,gBAAgB,2BACjC8B,GAAI,CACPtT,KAAM,2BAAKsT,EAAKtT,MAAI,CAAES,MAAO,IAAUiB,UAAWpK,KAAMic,OAE5DH,EAAiBI,KAAKF,EAAKtT,KAAKtD,SAKpC0W,EAAiBzf,OAAS,GAE1B,YAAsBwf,EAAa,IAA0BM,eAAgB,CACzEP,QAASE,IAIV,2BACAlC,GAAS,CACZvE,QAAS2E,IAiCjB,SAAgBhZ,EAAY2Y,GACxB,IAAM/B,EAAQ+B,EAAIC,UAAUvE,QAAQwE,WAAU,SAACC,GAAM,OAAAA,EAAEpR,KAAKtD,KAAOuU,EAAI1Z,QAAQD,KAAKY,UACpF,GAAIgX,GAAS,GAAK+B,EAAI1Z,QAAQD,KAAKY,OAAQ,CAEvC,IAAMwb,EAAgBT,EAAahC,EAAIC,UAAW,CAACD,EAAI1Z,QAAQD,KAAKY,QAAS+Y,GAG7E,MAAgC,WAA5BA,EAAI1Z,QAAQD,KAAKiB,QAEb2W,EAAQ+B,EAAIC,UAAUvE,QAAQhZ,OAAS,EAChC,EAAQqF,WAAW,2BAEfiY,GAAG,CACNC,UAAW,eACJwC,GAEPnc,QAAS,2BACF0Z,EAAI1Z,SAAO,CACdD,KAAM,2BACC2Z,EAAI1Z,QAAQD,MAAI,CACnBY,OAAQ+Y,EAAIC,UAAUvE,QAAQuC,EAAQ,GAAGlP,KAAKtD,GAC9ChE,UAAW,IAAUC,eAKjC,GAKD+a,EAGf,OAAOzC,EAAIC,UA/DC,EAAA9X,aAAhB,SAA6B6X,GACzB,IAAM/B,EAAQ+B,EAAIC,UAAUvE,QAAQwE,WAAU,SAACC,GAAM,OAAAA,EAAEpR,KAAKtD,KAAOuU,EAAI1Z,QAAQD,KAAKY,UACpF,GAAIgX,EAAQ,EAAG,CAEX,IAAMgE,EAAUjC,EAAIC,UAAUvE,QAAQgH,MAAM,EAAGzE,GAAO0E,KAAI,SAACC,GAAW,OAAAA,EAAO7T,KAAKtD,MAClF,OAAOuW,EAAahC,EAAIC,UAAWgC,EAASjC,GAEhD,OAAOA,EAAIC,WAGC,EAAA4C,sBAAhB,SAAsC7C,GAKlC,GAJA,YAA+BA,EAAK,IAAiB8C,aAAc,CAC/D7b,OAAQ+Y,EAAI1Z,QAAQD,KAAKY,OACzBK,OAAQ0Y,EAAI1Z,QAAQD,KAAKiB,SAEG,QAA5B0Y,EAAI1Z,QAAQD,KAAKiB,OAAkB,CACnC,IAAMT,EAAY,IAClB,YAA+BmZ,EAAK,IAAiB+C,aAAc,CAC/D9b,OAAQ+Y,EAAI1Z,QAAQD,KAAKY,OACzBJ,UAAS,IAEb,YAA+BmZ,EAAK,IAAiBrY,WAAY,CAC7DV,OAAQJ,EACRY,UAAW,IAAUC,UAG7B,OAAOsY,EAAIC,WAGC,EAAA5Y,YAAW,EAqCX,EAAAgB,oBAAhB,SAAoC2X,GAChC,IAAM/B,EAAQ+B,EAAIC,UAAUvE,QAAQwE,WAAU,SAACC,GAAM,OAAAA,EAAEpR,KAAKtD,KAAOuU,EAAI1Z,QAAQD,KAAKY,UACpF,GAAIgX,GAAS,EAAG,CAEZ,IAAMgE,EAAUjC,EAAIC,UAAUvE,QAAQgH,MAAMzE,GAAO0E,KAAI,SAACC,GAAW,OAAAA,EAAO7T,KAAKtD,MAC/E,OAAOuW,EAAahC,EAAIC,UAAWgC,EAASjC,GAEhD,OAAOA,EAAIC,WAGC,EAAAhY,gBAAhB,SAAgC+X,GAC5B,GAAIA,EAAIC,UAAUvE,QAAQhZ,OAAS,EAAG,CAClC,IAAMuf,EAAUjC,EAAIC,UAAUvE,QAAQiH,KAAI,SAACC,GAAW,OAAAA,EAAO7T,KAAKtD,MAClE,OAAOuW,EAAahC,EAAIC,UAAWgC,EAASjC,GAEhD,OAAOA,EAAIC,WAGC,EAAA+C,oBAAhB,SAAoChD,GAEhC,IAAMI,EAAgB,YAA0BJ,EAAIC,WAC9ChC,EAAQ+B,EAAIC,UAAUvE,QAAQwE,WAAU,SAACC,GAAM,OAAAA,EAAEpR,KAAKtD,KAAO2U,EAAc7F,kBACjF,OAAI6F,EAAc7F,gBAAkB0D,GAAS,EAClC5W,EAAY,2BACZ2Y,GAAG,CACN1Z,QAAS,2BACF0Z,EAAI1Z,SAAO,CACdD,KAAM,CACFY,OAAQmZ,EAAc7F,eACtBjT,OAAQ,aAMjB0Y,EAAIC,WAGC,EAAAhX,gBAAhB,SAAgC+W,GAC5B,IAAMiD,EAAUjD,EAAIC,UAAUvE,QAAQiH,KAAI,SAAC7T,GACvC,OAAO,IAAQyR,gBAAgB,2BACxBzR,GAAM,CACTC,KAAM,2BAAKD,EAAOC,MAAI,CAAE1I,KAAM,2BAAKyI,EAAOC,KAAK1I,MAAI,CAAE+R,QAAS,GAAIjE,gBAAiB,eAM3F,OAFA,IAAS+O,sBAAsBlD,GAExB,2BACAA,EAAIC,WAAS,CAChBvE,QAASuH,KAID,EAAA/Y,eAAhB,SAA+B8V,GAC3B,IAAM/B,EAAQ+B,EAAIC,UAAUvE,QAAQwE,WAAU,SAACC,GAAM,OAAAA,EAAEpR,KAAKtD,KAAOuU,EAAI1Z,QAAQD,KAAKY,UACpF,GAAIgX,GAAS,EAAG,CACZ,IAAMvC,EAAU,YAAIsE,EAAIC,UAAUvE,SAC5BrJ,EAAU2N,EAAIC,UAAUvE,QAAQuC,GAChCkF,EAA0C,SAAhC9Q,EAAQtD,KAAK1I,KAAK4I,UAAuB,WAAa,OAChEmU,EAAkB,aAAe/Q,EAAQtD,KAAK1I,KAAM8c,GACpD7C,EAAO,2BACNjO,GAAO,CACVtD,KAAM,2BACCsD,EAAQtD,MAAI,CACf1I,KAAM+c,MAMd,OAHA1H,EAAQuC,GAASqC,EACjB,IAASpW,eAAe8V,EAAKtE,EAAQuC,GAAOlP,MAErC,2BACAiR,EAAIC,WAAS,CAChBvE,QAAO,IAIf,OAAOsE,EAAIC,WAGC,EAAAvV,KAAhB,SAAqBsV,GACjB,GAAIA,EAAIC,UAAUzB,UAAU9b,OAAS,EAAG,CAEpC,IAAM2gB,EAAQrD,EAAIC,UAAUzB,UAAUwB,EAAIC,UAAUzB,UAAU9b,OAAS,GACjE8b,EAAYwB,EAAIC,UAAUzB,UAAUkE,MAAM,EAAG1C,EAAIC,UAAUzB,UAAU9b,OAAS,GAC9E4gB,EAAY,IAAQC,UAAUvD,EAAIC,UAAUqD,UAAWtD,EAAIC,UAAUvE,SAE3E,OADA,YAAsBsE,EAAK,IAA0BrV,MAC9C,2BACAqV,EAAIC,WAAS,CAChBvE,QAAS2H,EACT7E,UAAWA,EACX8E,UAAWA,EACXnH,gBAAgB,IAIxB,OAAO6D,EAAIC,WAGC,EAAArV,KAAhB,SAAqBoV,GACjB,GAAIA,EAAIC,UAAUqD,UAAU5gB,OAAS,EAAG,CAEpC,IAAM2gB,EAAQrD,EAAIC,UAAUqD,UAAUtD,EAAIC,UAAUqD,UAAU5gB,OAAS,GACjE4gB,EAAYtD,EAAIC,UAAUqD,UAAUZ,MAAM,EAAG1C,EAAIC,UAAUqD,UAAU5gB,OAAS,GAC9E8b,EAAY,IAAQ+E,UAAUvD,EAAIC,UAAUzB,UAAWwB,EAAIC,UAAUvE,SAE3E,OADA,YAAsBsE,EAAK,IAA0BnV,MAC9C,2BACAmV,EAAIC,WAAS,CAChBvE,QAAS2H,EACT7E,UAAWA,EACX8E,UAAWA,EACXnH,gBAAgB,IAIxB,OAAO6D,EAAIC,WAGC,EAAAuD,aAAhB,SAA6BxD,GAKzB,OAJcA,EAAIC,UAAUvE,QAAQwE,WAAU,SAACuD,GAAO,OAAAA,EAAG1U,KAAKtD,KAAOuU,EAAI1Z,QAAQD,KAAKY,WACzE,GACT,YAAsB+Y,EAAK,IAA0B0D,UAElD1D,EAAIC,WAGC,EAAA5R,KAAhB,SAAqB2R,GAKjB,OAJcA,EAAIC,UAAUvE,QAAQwE,WAAU,SAACuD,GAAO,OAAAA,EAAG1U,KAAKtD,KAAOuU,EAAI1Z,QAAQD,KAAKY,WACzE,GACT,YAAsB+Y,EAAK,IAA0B2D,MAElD3D,EAAIC,WAGC,EAAAhS,UAAhB,SAA0B+R,GACtB,IAAM/B,EAAQ+B,EAAIC,UAAUvE,QAAQwE,WAAU,SAACuD,GAAO,OAAAA,EAAG1U,KAAKtD,KAAOuU,EAAI1Z,QAAQD,KAAKY,UACtF,GAAIgX,GAAS,EAAG,CACZ,YAAsB+B,EAAK,IAA0BhL,UAAW,CAC5DjG,KAAMiR,EAAIC,UAAUvE,QAAQuC,GAAOlP,KACnC6U,uBAAwB5D,EAAIC,UAAU3C,sBAAwB,IAElE,IAAMuG,EAAQ,2BACP7D,EAAIC,UAAUvE,QAAQuC,IAAM,CAC/BpJ,cAAe,IAAW7B,MAExBqN,EAAS,YAAIL,EAAIC,UAAUvE,SAEjC,OADA2E,EAAOpC,GAAS4F,EACT,2BACA7D,EAAIC,WAAS,CAChBvE,QAAS2E,IAGjB,OAAOL,EAAIC,WAGC,EAAA6D,iBAAhB,SACI9D,GAEA,IAAM/B,EAAQ+B,EAAIC,UAAUvE,QAAQwE,WAAU,SAACuD,GAAO,OAAAA,EAAG1U,KAAKtD,KAAOuU,EAAI1Z,QAAQD,KAAK0I,KAAKtD,MAC3F,GAAIwS,GAAS,EAAG,CACZ,IAAM4F,EAAQ,2BACP7D,EAAIC,UAAUvE,QAAQuC,IAAM,CAC/BpJ,cAAe,IAAWkJ,MAC1BgG,aAAc/D,EAAI1Z,QAAQD,KAAK2d,SAE7B3D,EAAS,YAAIL,EAAIC,UAAUvE,SAEjC,OADA2E,EAAOpC,GAAS4F,EACT,2BACA7D,EAAIC,WAAS,CAChBvE,QAAS2E,IAGjB,OAAOL,EAAIC,WAGC,EAAAgE,eAAhB,SAA+BjE,GAC3B,IAAM/B,EAAQ+B,EAAIC,UAAUvE,QAAQwE,WAAU,SAACuD,GAAO,OAAAA,EAAG1U,KAAKtD,KAAOuU,EAAI1Z,QAAQD,KAAKoF,MACtF,GAAIwS,GAAS,EAAG,CACZ,IAAM4F,EAAQ,2BACP7D,EAAIC,UAAUvE,QAAQuC,IAAM,CAC/BpJ,cAAe,IAAW7B,IAC1B+Q,kBAAcxf,IAEZ8b,EAAS,YAAIL,EAAIC,UAAUvE,SAEjC,OADA2E,EAAOpC,GAAS4F,EACT,2BACA7D,EAAIC,WAAS,CAChBvE,QAAS2E,IAGjB,OAAOL,EAAIC,WAGC,EAAAiE,eAAhB,SAA+BlE,GAC3B,OAAO,2BACAA,EAAIC,WAAS,CAChBnD,WAAW,KAIH,EAAAqH,cAAhB,SAA8BnE,GAE1B,IAAM/B,EAAQ+B,EAAIC,UAAUvE,QAAQwE,WAAU,SAACpC,GAAQ,OAAAA,EAAIiG,gBACrD1D,EAAS,YAAIL,EAAIC,UAAUvE,SACjC,GAAIuC,GAAS,EAAG,CACZ,IAAM4F,EAAQ,2BACPxD,EAAOpC,IAAM,CAChB8F,kBAAcxf,IAElB8b,EAAOpC,GAAS4F,EAEpB,OAAO,2BACA7D,EAAIC,WAAS,CAChBvE,QAAS2E,EACTvD,WAAW,KAnUvB,CAAiB,QAAS,KCpB1B,SAAiBsH,GACb,SAAgBC,EAAUrE,GACtB,IAAMK,EAAS,YAAIL,EAAIC,UAAUvE,SAC3B4I,EAAQjE,EAAOH,WAAU,SAACpC,GAAQ,OAAAA,EAAI/O,KAAKtD,KAAOuU,EAAI1Z,QAAQD,KAAKke,eACnEC,EAASnE,EAAOH,WAAU,SAACpC,GAAQ,OAAAA,EAAI/O,KAAKtD,KAAOuU,EAAI1Z,QAAQD,KAAKoe,gBAC1E,GAAIH,GAAS,GAAKE,GAAU,GAAKF,IAAUE,EAAQ,CAC/C,IAAME,EAAOrE,EAAOiE,GAIpB,OAHAjE,EAAOiE,GAASjE,EAAOmE,GACvBnE,EAAOmE,GAAUE,EACjB,IAASC,cAAc3E,EAAKA,EAAI1Z,QAAQD,KAAKke,YAAavE,EAAI1Z,QAAQD,KAAKoe,cACpE,2BACAzE,EAAIC,WAAS,CAChBvE,QAAS2E,EACT7B,UAAW,IAAQ+E,UAAUvD,EAAIC,UAAUzB,UAAWwB,EAAIC,UAAUvE,WAI5E,OAAOsE,EAAIC,UAhBC,EAAAoE,UAAS,EAmBT,EAAAva,WAAhB,SAA2BkW,GACvB,IAAM/B,EAAQ+B,EAAIC,UAAUvE,QAAQwE,WAAU,SAACpC,GAAQ,OAAAA,EAAI/O,KAAKtD,KAAOuU,EAAI1Z,QAAQD,KAAKY,UACxF,OAAIgX,EAAQ,GAAK+B,EAAI1Z,QAAQD,KAAKY,OACvBod,EAAU,2BACVrE,GAAG,CACN1Z,QAAS,2BACF0Z,EAAI1Z,SAAO,CACdD,KAAM,CACFke,YAAavE,EAAIC,UAAUvE,QAAQuC,EAAQ,GAAGlP,KAAKtD,GACnDgZ,aAAczE,EAAI1Z,QAAQD,KAAKY,aAMxC+Y,EAAIC,WAGC,EAAAjW,aAAhB,SAA6BgW,GACzB,IAAMK,EAAS,YAAIL,EAAIC,UAAUvE,SAC3BuC,EAAQoC,EAAOH,WAAU,SAACpC,GAAQ,OAAAA,EAAI/O,KAAKtD,KAAOuU,EAAI1Z,QAAQD,KAAKY,UACzE,OAAIgX,EAAQoC,EAAO3d,OAAS,GAAKsd,EAAI1Z,QAAQD,KAAKY,OACvCod,EAAU,2BACVrE,GAAG,CACN1Z,QAAS,2BACF0Z,EAAI1Z,SAAO,CACdD,KAAM,CACFke,YAAavE,EAAI1Z,QAAQD,KAAKY,OAC9Bwd,aAAczE,EAAIC,UAAUvE,QAAQuC,EAAQ,GAAGlP,KAAKtD,SAM7DuU,EAAIC,WAGC,EAAAnV,QAAhB,SAAwBkV,GACpB,IAAM/B,EAAQ+B,EAAIC,UAAUvE,QAAQwE,WAAU,SAACC,GAAM,OAAAA,EAAEpR,KAAKtD,KAAOuU,EAAI1Z,QAAQD,KAAKY,UAQpF,OAPIgX,EAAQ,GACR,YAA+B+B,EAAK,IAAiBhY,YAAa,CAC9Df,OAAQ+Y,EAAIC,UAAUvE,QAAQuC,EAAQ,GAAGlP,KAAKtD,GAC9ChE,UAAW,IAAUmd,SAItB5E,EAAIC,WAGC,EAAAjV,UAAhB,SAA0BgV,GACtB,IAAM/B,EAAQ+B,EAAIC,UAAUvE,QAAQwE,WAAU,SAACC,GAAM,OAAAA,EAAEpR,KAAKtD,KAAOuU,EAAI1Z,QAAQD,KAAKY,UAQpF,OAPIgX,EAAQ+B,EAAIC,UAAUvE,QAAQhZ,OAAS,GACvC,YAA+Bsd,EAAK,IAAiBhY,YAAa,CAC9Df,OAAQ+Y,EAAIC,UAAUvE,QAAQuC,EAAQ,GAAGlP,KAAKtD,GAC9ChE,UAAW,IAAUod,MAItB7E,EAAIC,WA9EnB,CAAiB,QAAQ,KCqBzB,SAAiB6E,GACb,SAASC,EAAchW,EAAaqF,EAAqBoI,GACrD,IAAM1N,EAAyB,YAAaC,EAAMyN,GAAU,GAAM,GAGlE1N,EAAOqB,UAAW,EAGlB,IAAM6U,EAAU,YAAiBlW,EAAQ0N,GAMzC,OAJA1N,EAAOmW,gBAAiB,EACxBlW,EAAK1I,KAAKwT,OAAS,YAAqBmL,GACxClW,EAAOsF,WAAaA,EAEbtF,EA+CX,SAAS9H,EAAYgZ,GACjB,IAAMiD,EAAU,YAAIjD,EAAIC,UAAUvE,SAC5BmI,EAAQ7D,EAAI1Z,QAAQD,KAAK6e,GAG3BC,EAAWnF,EAAIC,UAAUvE,QAAQwE,WAAU,SAACC,GAAM,OAAAA,EAAEpR,KAAKtD,KAAOuU,EAAI1Z,QAAQD,KAAKY,UACjFke,GAAY,EACZlC,EAAQmC,OAAOD,EAAU,EAAGtB,IAE5BZ,EAAQmC,OAAO,EAAG,EAAGvB,GACrBsB,EAAW,GAGf,IAAME,EAAS,2BACRrF,EAAIC,WAAS,CAChBzB,UAAW,IAAQ+E,UAAUvD,EAAIC,UAAUzB,UAAWwB,EAAIC,UAAUvE,SACpEA,QAASuH,IAMb,OAFA,IAASqC,gBAAgBtF,EAAKmF,EAAUtB,EAAM9U,KAAMiR,EAAI1Z,QAAQD,KAAKY,QAE9Doe,EAGX,SAAgBE,EAAoBvF,GAChC,IAAM6D,EAAQkB,EAAc/E,EAAI1Z,QAAQD,KAAK0I,MAAM,EAAOiR,EAAIC,UAAUzD,UACxE,OAAOxV,EAAY,2BACZgZ,GAAG,CACN1Z,QAAS,2BACF0Z,EAAI1Z,SAAO,CACdD,KAAM,CACFY,OAAQ+Y,EAAI1Z,QAAQD,KAAKY,OACzBie,GAAIrB,QAMpB,SAAgB2B,EAAexF,GAC3B,IAAM6D,EAAQkB,EAAc,YAAgB/E,EAAI1Z,QAAQD,KAAKQ,UAAW,OAAO,EAAOmZ,EAAIC,UAAUzD,UACpG,OAAOxV,EAAY,2BACZgZ,GAAG,CACN1Z,QAAS,2BACF0Z,EAAI1Z,SAAO,CACdD,KAAM,CACFY,OAAQ+Y,EAAI1Z,QAAQD,KAAKY,OACzBie,GAAIrB,QAMpB,SAAgB1c,EAAY6Y,GACxB,IAAM6D,EAAQkB,EAAc,YAAgB/E,EAAI1Z,QAAQD,KAAKQ,UAAW,OAAO,EAAOmZ,EAAIC,UAAUzD,UAC9FyG,EAAU,YAAIjD,EAAIC,UAAUvE,SAG9ByJ,EAAWnF,EAAIC,UAAUvE,QAAQwE,WAAU,SAACC,GAAM,OAAAA,EAAEpR,KAAKtD,KAAOuU,EAAI1Z,QAAQD,KAAKY,UACjFke,GAAY,GACZA,GAAY,EACZlC,EAAQmC,OAAOD,EAAU,EAAGtB,KAE5BZ,EAAQV,KAAKsB,GACbsB,EAAWlC,EAAQvgB,QAGvB,IAAM2iB,EAAS,2BACRrF,EAAIC,WAAS,CAChBzB,UAAW,IAAQ+E,UAAUvD,EAAIC,UAAUzB,UAAWwB,EAAIC,UAAUvE,SACpEA,QAASuH,IAMb,OAFA,IAASqC,gBAAgBtF,EAAKmF,EAAUtB,EAAM9U,KAAMiR,EAAI1Z,QAAQD,KAAKY,QAE9Doe,EAgCX,SAAgBI,EAAWzF,GACvB,OAAO,IAAQ0F,YAAY1F,GAAK,SAACG,EAAUwF,GAAkB,OAAAZ,EAAc5E,GAAG,EAAMwF,EAAEnJ,aAO1F,SAAgBoJ,EAAe5F,GAE3B,IAAM6D,EAAwB,CAC1B9U,KAAM,YAAgBiR,EAAI1Z,QAAQD,KAAKQ,UAAW,MAClDsJ,UAAU,EACV8U,gBAAgB,EAChB/U,gBAAgB,EAChB2V,eAAgB,GAChBC,0BAA0B,EAC1B1W,UAAU,EACVE,SAAS,EACT7H,UAAW,IAAUC,QACrB0M,YAAY,EACZ2R,YAAa,EACblR,cAAe,IAAWmR,QAK9B,OAFA,IAASC,mBAAmBjG,EAAK6D,EAAM9U,KAAKtD,IAErC,2BACAuU,EAAIC,WAAS,CAChBvE,QAAS,CAACmI,GACVrF,UAAW,IAAQ+E,UAAUvD,EAAIC,UAAUzB,UAAWwB,EAAIC,UAAUvE,WAI5E,SAAgBwK,EACZlG,GAEA,IAAM/B,EAAQ+B,EAAIC,UAAUvE,QAAQwE,WAAU,SAACC,GAAM,OAAAA,EAAEpR,KAAKtD,KAAOuU,EAAI1Z,QAAQD,KAAKoF,MACpF,GAAIwS,GAAS,EAAG,CACZ,IAAM,EAAQ,eAAK+B,EAAIC,UAAUvE,QAAQuC,IACzC+B,EAAI1Z,QAAQD,KAAK8f,QAAQ/D,SAAQ,SAACjC,GAC9B,IAAMtG,EAAS,EAAMgM,eACfO,EAASvM,EAAO6I,MAAM,EAAGvC,EAAEkG,aAE3BC,EAAQzM,EAAO6I,MAAMvC,EAAEkG,YAAclG,EAAEoG,aAC7C,EAAMV,eAAiB,GAAGO,EAASjG,EAAEqG,KAAOF,KAEhD,EAAMpP,YAAc,EAAMA,YAAc,EAAMA,YAAc,EAAI,EAChE,EAAMnI,KAAK1I,KAAKwT,OAAS,YAAqB,EAAMgM,gBACpD,EAAMpe,UAAYuY,EAAI1Z,QAAQD,KAAK8f,QAAQ,GAAGhB,SAC9C,IAAM9E,EAAS,YAAIL,EAAIC,UAAUvE,SAGjC,OAFA2E,EAAOpC,GAAS,IAAQsC,gBAAgB,GAEjC,EAAQ/Y,UAAU,2BAClBwY,GAAG,CACNC,UAAW,2BAAKD,EAAIC,WAAS,CAAEvE,QAAS2E,IACxC/Z,QAAS,2BAAK0Z,EAAI1Z,SAAO,CAAED,KAAM,CAAEoB,UAAW,IAAUC,QAAST,OAAQ+Y,EAAI1Z,QAAQD,KAAKoF,SAGlG,OAAOuU,EAAIC,UAGf,SAAgBzV,EAAWwV,GACvB,IAAMqD,EAAQrD,EAAIC,UAAUvE,QAC5B,GAAqB,IAAjB2H,EAAM3gB,QAAgB2gB,EAAM,GAAGtU,KAAKtD,KAAOuU,EAAI1Z,QAAQD,KAAKY,OAAQ,CAEpE,IAAM4c,EAAwB,CAC1B9U,KAAM,YAAgBiR,EAAI1Z,QAAQD,KAAKY,OAAQ,MAC/CkJ,UAAU,EACV8U,gBAAgB,EAChB/U,gBAAgB,EAChB2V,eAAgB,GAChBC,0BAA0B,EAC1B1W,SAAUiU,EAAM,GAAGjU,SACnBE,QAAS+T,EAAM,GAAG/T,QAClB7H,UAAW,IAAUC,QACrB0M,YAAY,EACZ2R,YAAa,EACblR,cAAe,IAAWmR,QAO9B,OAHA,IAASS,gBAAgBzG,EAAK,EAAGqD,EAAM,GAAGtU,MAC1C,IAASuW,gBAAgBtF,EAAK,EAAG6D,EAAM9U,MAEhC,2BACAiR,EAAIC,WAAS,CAChBzB,UAAW,IAAQ+E,UAAUvD,EAAIC,UAAUzB,UAAWwB,EAAIC,UAAUvE,SACpEA,QAAS,CAACmI,KAEX,GAAI7D,EAAI1Z,QAAQD,KAAKY,OAAQ,CAEhC,IAAMgX,EAAQ+B,EAAIC,UAAUvE,QAAQwE,WAAU,SAACC,GAAM,OAAAA,EAAEpR,KAAKtD,KAAOuU,EAAI1Z,QAAQD,KAAKY,UACpF,GAAIgX,GAAS,EAAG,CACZ,IAASwI,gBAAgBzG,EAAK,EAAGqD,EAAMpF,GAAOlP,MAG9C,IAAM2X,EAAoB,YAA0B1G,EAAIC,WAClDI,EAAS,YAAIL,EAAIC,UAAUvE,QAAQiL,QAAO,SAACxG,GAAM,OAAAA,EAAEpR,KAAKtD,KAAOuU,EAAI1Z,QAAQD,KAAKY,WAChF2f,EAAa3I,IAAU+B,EAAIC,UAAUvE,QAAQhZ,OAAS,EAAIub,EAAQ,EAAIA,EAc5E,OAZIyI,EAAkBnM,iBAAmByF,EAAI1Z,QAAQD,KAAKY,QACtDyf,EAAkB/I,gBAAkBqC,EAAI1Z,QAAQD,KAAKY,QAEjD2f,GAAc,IACdvG,EAAOuG,GAAc,2BACdvG,EAAOuG,IAAW,CACrBxX,UAAU,EACVE,QAASoX,EAAkB/I,gBAAkBqC,EAAI1Z,QAAQD,KAAKY,UAKnE,2BACA+Y,EAAIC,WAAS,CAChBvE,QAAS2E,EACT7B,UAAW,IAAQ+E,UAAUvD,EAAIC,UAAUzB,UAAWwB,EAAIC,UAAUvE,SACpES,gBAAgB,KAK5B,OAAO6D,EAAIC,UAGf,SAAgB4G,EAAa7G,GACzB,IAAM8G,EAAM9G,EAAI1Z,QAAQD,KAAKgd,MAAMV,KAAI,SAACxC,GAAM,OAAA4E,EAAc5E,GAAG,EAAOH,EAAIC,UAAUzD,aACpF,OAAO,2BACAwD,EAAIC,WAAS,CAChBlL,MAAM,EACNgS,UAAW/G,EAAI1Z,QAAQD,KAAKgd,MAAM3gB,OAClC8b,UAAW,GACX9C,QAASoL,EACT/H,QAAQ,IA7RA,EAAAiI,gBAAhB,SAAgChH,GAM5B,OALA,YAA+BA,EAAK,IAAiBiH,aAAc,CAAEpgB,UAAWmZ,EAAI1Z,QAAQD,KAAKQ,YACjG,YAA+BmZ,EAAK,IAAiBrY,WAAY,CAC7DV,OAAQ+Y,EAAI1Z,QAAQD,KAAKQ,UACzBY,UAAW,IAAUC,UAElBsY,EAAIC,WAGC,EAAAiH,wBAAhB,SAAwClH,GASpC,OARA,YAA+BA,EAAK,IAAiBmH,aAAc,CAC/DlgB,OAAQ+Y,EAAI1Z,QAAQD,KAAKY,OACzBJ,UAAWmZ,EAAI1Z,QAAQD,KAAKQ,YAEhC,YAA+BmZ,EAAK,IAAiBrY,WAAY,CAC7DV,OAAQ+Y,EAAI1Z,QAAQD,KAAKQ,UACzBY,UAAW,IAAUC,UAElBsY,EAAIC,WAGC,EAAAmH,wBAAhB,SAAwCpH,GASpC,OARA,YAA+BA,EAAK,IAAiB+C,aAAc,CAC/D9b,OAAQ+Y,EAAI1Z,QAAQD,KAAKY,OACzBJ,UAAWmZ,EAAI1Z,QAAQD,KAAKQ,YAEhC,YAA+BmZ,EAAK,IAAiBrY,WAAY,CAC7DV,OAAQ+Y,EAAI1Z,QAAQD,KAAKQ,UACzBY,UAAW,IAAUC,UAElBsY,EAAIC,WAGC,EAAAoH,6BAAhB,SAA6CrH,GAQzC,OAPA,YAA+BA,EAAK,IAAiBsH,mBAAoB,CACrEzgB,UAAWmZ,EAAI1Z,QAAQD,KAAKQ,YAEhC,YAA+BmZ,EAAK,IAAiBrY,WAAY,CAC7DV,OAAQ+Y,EAAI1Z,QAAQD,KAAKQ,UACzBY,UAAW,IAAUC,UAElBsY,EAAIC,WA4BC,EAAAsF,oBAAmB,EAcnB,EAAAC,eAAc,EAcd,EAAAre,YAAW,EA0BX,EAAAL,iBAAhB,SAAiCkZ,GAE7B,IAAMuE,EAAcvE,EAAIC,UAAUvE,QAAQhZ,OAAS,EAAIsd,EAAIC,UAAUvE,QAAQ,GAAG3M,KAAKtD,QAAKlH,EAG1F,OAAOihB,EAAe,2BACfxF,GAAG,CACN1Z,QAAS,2BAAK0Z,EAAI1Z,SAAO,CAAED,KAAM,CAAEY,OAAQsd,EAAa1d,UAAWmZ,EAAI1Z,QAAQD,KAAKQ,iBAI5E,EAAAoM,WAAhB,SAA2B+M,GAEvB,OAAO7Y,EAAY,2BACZ6Y,GAAG,CACN1Z,QAAS,2BACF0Z,EAAI1Z,SAAO,CACdD,KAAM,CACFY,OAAQ,YAA0B+Y,EAAIC,WAAW1F,eACjD1T,UAAWmZ,EAAI1Z,QAAQD,KAAKQ,iBAM5B,EAAA0gB,UAAhB,SAA0BvH,GACtB,OAAO,IAAQ0F,YAAY1F,GAAK,SAACG,EAAUwF,GAAkB,OAAAZ,EAAc5E,GAAG,EAAMwF,EAAEnJ,cAG1E,EAAAiJ,WAAU,EAIV,EAAA+B,WAAhB,SAA2BxH,GACvB,OAAO,IAAQ0F,YAAY1F,GAAK,SAACG,EAAUwF,GAAkB,OAAAZ,EAAc5E,GAAG,EAAMwF,EAAEnJ,cAG1E,EAAAoJ,eAAc,EA0Bd,EAAAM,cAAa,EA4Bb,EAAA1b,WAAU,EA+DV,EAAAqc,aAAY,EAYZ,EAAAY,QAAhB,SAAwBzH,GACpB,OAAO,2BACAA,EAAIC,WAAS,CAChBvE,QAAS,GACT8C,UAAW,GACX8E,UAAW,MAqIH,EAAAoE,aAAhB,SAA6B1H,GACzB,OAAQA,EAAI1Z,QAAQD,KAAKwT,QACrB,IAAK,OACD,OApIZ,SAAyBmG,GAGrB,IAAM2H,EAAmB,2BAAK3H,GAAG,CAAE4H,YAAa,MAChD,OAAQ5H,EAAI1Z,QAAQD,KAAKwhB,MACrB,IAAK,QACD,OAAOhB,EAAa,2BACbc,GAAgB,CACnBrhB,QAAS,2BAAK0Z,EAAI1Z,SAAO,CAAED,KAAM,CAAEgd,MAAOrD,EAAI1Z,QAAQD,KAAKyhB,eAEnE,IAAK,OACD,OAAO5B,EAAc,2BACdyB,GAAgB,CACnBrhB,QAAS,2BAAK0Z,EAAI1Z,SAAO,CAAED,KAAM,CAAEoF,GAAIuU,EAAI1Z,QAAQD,KAAKoF,GAAI0a,QAASnG,EAAI1Z,QAAQD,KAAKsF,cAE9F,IAAK,SACD,OAAOnB,EAAW,2BACXmd,GAAgB,CACnBrhB,QAAS,2BAAK0Z,EAAI1Z,SAAO,CAAED,KAAM,CAAEY,OAAQ+Y,EAAI1Z,QAAQD,KAAK0I,KAAKtD,SAEzE,IAAK,SACD,IAAMsc,EACF/H,EAAIC,UAAUvE,QAAQhZ,OAASsd,EAAI1Z,QAAQD,KAAK4X,MAC1C+B,EAAIC,UAAUvE,QAAQsE,EAAI1Z,QAAQD,KAAK4X,OAAOlP,UAC9CxK,EACV,OAAOghB,EAAoB,2BACpBoC,GAAgB,CACnBrhB,QAAS,2BACF0Z,EAAI1Z,SAAO,CACdD,KAAM,CAAE0I,KAAMiR,EAAI1Z,QAAQD,KAAK0I,KAAM9H,OAAQ8gB,EAAYA,EAAUtc,QAAKlH,QAGpF,IAAK,aACD,OAAOsiB,EAAa,2BACbc,GAAgB,CACnBrhB,QAAS,2BAAK0Z,EAAI1Z,SAAO,CAAED,KAAM,CAAEgd,MAAOrD,EAAI1Z,QAAQD,KAAKyhB,eAEnE,IAAK,OACD,OAAO,GAASzD,UAAU,2BACnBsD,GAAgB,CACnBrhB,QAAS,2BACF0Z,EAAI1Z,SAAO,CACdD,KAAM,CACFke,YAAavE,EAAI1Z,QAAQD,KAAKoe,aAC9BA,aAAczE,EAAI1Z,QAAQD,KAAKke,kBAI/C,IAAK,SAED,IAAI,EAASvE,EAAIC,UAQjB,OAPAD,EAAI1Z,QAAQD,KAAKyhB,SAAS1F,SAAQ,SAACjC,GAC/B,EAASsF,EAAW,2BACbkC,GAAgB,CACnB1H,UAAW,EACX3Z,QAAS,2BAAK0Z,EAAI1Z,SAAO,CAAED,KAAM8Z,UAGlC,EAOf,OAAOH,EAAIC,UAmEI+H,CAAgBhI,GAC3B,IAAK,OACD,OAlEZ,SAAyBA,GAGrB,IAAM2H,EAAmB,2BAAK3H,GAAG,CAAE4H,YAAa,MAChD,OAAQ5H,EAAI1Z,QAAQD,KAAKwhB,MACrB,IAAK,QAED,OAAO,GAAU5e,gBAAgB0e,GACrC,IAAK,OACD,OAAOzB,EAAc,2BACdyB,GAAgB,CACnBrhB,QAAS,2BAAK0Z,EAAI1Z,SAAO,CAAED,KAAM,CAAEoF,GAAIuU,EAAI1Z,QAAQD,KAAKoF,GAAI0a,QAASnG,EAAI1Z,QAAQD,KAAKqF,cAE9F,IAAK,SACD,OAAO6Z,EAAoB,2BACpBoC,GAAgB,CACnBrhB,QAAS,2BACF0Z,EAAI1Z,SAAO,CACdD,KAAM,CAAE0I,KAAMiR,EAAI1Z,QAAQD,KAAK0I,KAAM9H,OAAQ+Y,EAAI1Z,QAAQD,KAAK4hB,sBAG1E,IAAK,SACD,OAAOzd,EAAW,2BACXmd,GAAgB,CACnBrhB,QAAS,2BAAK0Z,EAAI1Z,SAAO,CAAED,KAAM,CAAEY,OAAQ+Y,EAAI1Z,QAAQD,KAAK0I,KAAKtD,SAEzE,IAAK,aACD,OAAOma,EAAe,2BACf+B,GAAgB,CACnBrhB,QAAS,2BAAK0Z,EAAI1Z,SAAO,CAAED,KAAM,CAAEQ,UAAWmZ,EAAI1Z,QAAQD,KAAKQ,gBAEvE,IAAK,OACD,OAAO,GAASwd,UAAU,2BACnBsD,GAAgB,CACnBrhB,QAAS,2BACF0Z,EAAI1Z,SAAO,CACdD,KAAM,CACFke,YAAavE,EAAI1Z,QAAQD,KAAKoe,aAC9BA,aAAczE,EAAI1Z,QAAQD,KAAKke,kBAI/C,IAAK,SAED,IAAI,EAASvE,EAAIC,UAQjB,OAPAD,EAAI1Z,QAAQD,KAAK6hB,SAAS9F,SAAQ,SAACjC,GAC/B,EAASsF,EAAW,2BACbkC,GAAgB,CACnB1H,UAAW,EACX3Z,QAAS,2BAAK0Z,EAAI1Z,SAAO,CAAED,KAAM8Z,UAGlC,EAMf,OAAOH,EAAIC,UAQIkI,CAAgBnI,GAI/B,OAAOA,EAAIC,WArcnB,CAAiB,QAAQ,KCflB,IAAMmI,KAAU,OAElB,IAAiBlhB,iCAAkC,GAASggB,wBAC7D,GAAC,IAAiBngB,uCAAwC,GAASsgB,6BACnE,GAAC,IAAiBjgB,iCAAkC,GAASggB,wBAC7D,GAAC,IAAiBD,cAAe,GAAS3B,eAC1C,GAAC,IAAiB8B,oBAAqB,GAASxgB,iBAChD,GAAC,IAAiBic,cAAe,GAAS5b,YAC1C,GAAC,IAAiBQ,YAAa,EAAQH,UACvC,GAAC,IAAiBM,cAAe,EAAQF,YACzC,GAAC,IAAiBhB,wBAAyB,GAASogB,gBACpD,GAAC,IAAiBC,cAAe,GAAShU,WAC1C,GAAC,IAAiB1L,0BAA2B,GAAUsb,sBACvD,GAAC,IAAiBC,cAAe,GAAUzb,YAC3C,GAAC,IAAiBa,mBAAoB,GAAUD,gBAChD,GAAC,IAAiBG,eAAgB,GAAUD,aAC5C,GAAC,IAAiBG,wBAAyB,GAAUD,oBACrD,GAAC,IAAiBS,gBAAiB,IAAOD,cAC1C,GAAC,IAAiBG,kBAAmB,IAAOD,gBAC5C,GAAC,IAA0BG,iBAAkB,GAAUD,gBACvD,GAAC,IAAiBG,QAAS,IAASif,YACpC,GAAC,IAAiB/e,MAAO,IAASD,KAClC,GAAC,IAAiBK,kBAAmB,IAASH,eAC9C,GAAC,IAAiBM,cAAe,IAASF,YAC1C,GAAC,IAAiB3B,aAAc,EAAQD,WACxC,GAAC,IAA0BiF,cAAe,IAAOD,aACjD,GAAC,IAAiBG,eAAgB,IAAOob,iBACzC,GAAC,IAAiBve,cAAe,GAASD,WAC1C,GAAC,IAAiBG,gBAAiB,GAASD,aAC5C,GAAC,IAAiBS,aAAc,GAASD,WACzC,GAAC,IAAiBH,qBAAsB,EAAQD,kBAChD,GAAC,IAAiBG,eAAgB,EAAQD,aAC1C,GAAC,IAAiBH,kBAAmB,GAAUD,eAC/C,GAAC,IAA0BS,MAAO,GAAUD,KAC5C,GAAC,IAA0BG,MAAO,GAAUD,KAC5C,GAAC,IAAiBG,UAAW,GAASD,QACtC,GAAC,IAAiBG,YAAa,GAASD,UACxC,GAAC,IAAiBI,WAAY,IAASF,SACvC,GAAC,IAA0BgB,UAAW,IAASF,SAC/C,GAAC,IAAiBD,YAAa,IAASF,UACxC,GAAC,IAAiBO,aAAc,IAASmc,OACzC,GAAC,IAAiBjc,uBAAwB,IAASkc,eACnD,GAAC,IAAiBhc,eAAgB,IAASic,QAC3C,GAAC,IAAiB7b,kBAAmB,IAASD,eAC9C,GAAC,IAAiBG,SAAU,GAAS2a,QACrC,GAAC,IAAiBiB,8BAA+B,IAAcC,gCAC/D,GAAC,IAAiBC,8BAA+B,IAAcC,gCAC/D,GAAC,IAAiBC,wCAAyC,IAAcC,qCACzE,GAAC,IAAiB3a,UAAW,GAAUoV,aACvC,GAAC,IAAiBlV,MAAO,GAAUD,KACnC,GAAC,IAAiBH,aAAc,GAAUD,UAG1C,GAAC,IAA0B+a,WAAY,GAASzB,UAChD,GAAC,IAA0B0B,YAAa,GAASzB,WACjD,GAAC,IAA0B0B,gCAAiC,GAASzD,WACrE,GAAC,IAA0B0D,eAAgB,IAAcC,cACzD,GAAC,IAA0BC,eAAgB,IAAcC,cACzD,GAAC,IAA0BC,cAAe,GAAS1C,aACnD,GAAC,IAA0B2C,qBAAsB,GAAUvhB,gBAC3D,GAAC,IAA0BwhB,yBAA0B,GAAUzG,oBAC/D,GAAC,IAA0B0G,sBAAuB,GAAS1C,gBAC3D,GAAC,IAA0B2C,QAAS,IAAStgB,KAC7C,GAAC,IAA0BugB,gBAAiB,GAAShE,eACrD,GAAC,IAA0Bjb,MAAO,GAAUD,KAC5C,GAAC,IAA0BG,MAAO,GAAUD,KAC5C,GAAC,IAA0Bif,eAAgB,IAAcC,cACzD,GAAC,IAA0BC,cAAe,IAAcC,aACxD,GAAC,IAAeC,gBAAiB,EAAQlJ,eACzC,GAAC,IAA0BmJ,UAAW,IAAcC,SACpD,GAAC,IAA0BC,eAAgB,IAAOC,gBAClD,GAAC,IAAYC,gBAAiB,IAAcC,UAC5C,GAAC,IAA0BC,aAAc,IAAc3K,YACvD,GAAC,IAAY4K,wBAAyB,IAAcC,kBACpD,GAAC,IAA0BC,aAAc,GAASjD,aAClD,GAAC,IAA0BkD,cAAe,IAAOC,aACjD,GAAC,IAAeC,SAAU,IAAcC,cACxC,GAAC,IAA0BC,mBAAoB,IAAcC,wBAC7D,GAAC,IAA0BC,WAAY,GAAUpH,iBACjD,GAAC,IAA0BqH,cAAe,GAAUlH,eACpD,GAAC,IAA0BmH,gBAAiB,GAAUlH,eACtD,GAAC,IAA0BmH,eAAgB,GAAUlH,c,IC1EzD,ICd4BnH,GAAsBpX,GAAmByQ,GAAmBiV,GDclF,GAAY,cAEZ,GAAY3mB,OAAe4mB,WAE3B,IAAc,IAA+C,oBAArBC,iBAGxC,GAAa,IAAI,IACjB,ICtBsBxO,GDsBF,GCtBwBpX,GDsBX,GCtB8ByQ,GDsBnB,GCtBsCiV,GDsB5B,GCrBjD,IAAwBtO,GAAapX,GAAWyQ,IAAU,EAAM+R,GAAYkD,KDwBjFG,GNoVK,YAAQ,EAAiB/kB,EAAzB,CAAyC,GMjVpD,SACI,gBAAC,IAAQ,CAACglB,MAAO,IACb,gBAACD,GAAqB,MACtB,gBAAC,IAAsB,CAACH,WAAY,GAAYK,kBAAmB,aAAcD,MAAO,MAE5F3S,SAAS6S,eAAe,U,mBE1C5B9oB,EAAO2B,QAAUonB,Q,wBCAjBpnB,EAAU3B,EAAO2B,QAAU,EAAQ,OAAR,EAA4D,IAE/EjC,EAAE,EAAQ,QAAiF,IAGnGiC,EAAQ8d,KAAK,CAACzf,EAAON,EAAI,i+RAAk+R","file":"nativeEditor.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"nativeEditor\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"\" + ({\"vendors~dataresource~geojson~modeldebug~nteract_transforms~nteract_transforms_vsdom\":\"vendors~dataresource~geojson~modeldebug~nteract_transforms~nteract_transforms_vsdom\",\"modeldebug\":\"modeldebug\",\"nteract_transforms_vsdom\":\"nteract_transforms_vsdom\",\"vendors~dataresource~vega\":\"vendors~dataresource~vega\",\"vendors~dataresource\":\"vendors~dataresource\",\"vendors~geojson\":\"vendors~geojson\",\"vendors~nteract_transforms\":\"vendors~nteract_transforms\",\"vendors~vega\":\"vendors~vega\",\"vega\":\"vega\",\"vendors~plotly\":\"vendors~plotly\"}[chunkId]||chunkId) + \".bundle.js\"\n \t}\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\t(function (module) {\n \t\t  if (module.exports\n \t\t    && !module.exports.__esModule\n \t\t    && module.exports.default === undefined\n \t\t  ) {\n \t\t    if (module.exports.headers\n \t\t      && module.exports.headers.common\n \t\t      && module.exports.headers.common.Accept\n \t\t      && module.exports.adapter\n \t\t      && module.exports.transformRequest\n \t\t      && module.exports.transformResponse\n \t\t    ) {\n \t\t      return;\n \t\t    }\n \t\t    module.exports.default = module.exports;\n \t\t  }\n \t\t})(module);\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n\n \t\t\t\t// create error before stack unwound to get useful stacktrace later\n \t\t\t\tvar error = new Error();\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n \t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tdocument.head.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"monaco\",\"commons\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","\nvar content = require(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./nativeEditor.less\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./nativeEditor.less\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./nativeEditor.less\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import { OSType } from '../../client/common/utils/platform';\n\n// Javascript keyCodes\nexport const KeyCodes = {\n    LeftArrow: 37,\n    UpArrow: 38,\n    RightArrow: 39,\n    DownArrow: 40,\n    PageUp: 33,\n    PageDown: 34,\n    End: 35,\n    Home: 36\n};\n\nexport function getOSType() {\n    if (window.navigator.platform.startsWith('Mac')) {\n        return OSType.OSX;\n    } else if (window.navigator.platform.startsWith('Win')) {\n        return OSType.Windows;\n    } else if (window.navigator.userAgent.indexOf('Linux') > 0) {\n        return OSType.Linux;\n    } else {\n        return OSType.Unknown;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n'use strict';\nimport * as React from 'react';\nimport { Image, ImageName } from '../react-common/image';\nimport { getLocString } from '../react-common/locReactSide';\n\ninterface IAddCellLineProps {\n    baseTheme: string;\n    includePlus: boolean;\n    className: string;\n    click(): void;\n}\n\nexport class AddCellLine extends React.Component<IAddCellLineProps> {\n    constructor(props: IAddCellLineProps) {\n        super(props);\n    }\n\n    public render() {\n        const className = `add-cell-line ${this.props.className}`;\n        const tooltip = getLocString('DataScience.insertBelow', 'Insert cell below');\n        const plus = this.props.includePlus ? (\n            <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.InsertBelow} />\n        ) : null;\n        return (\n            <div className={className}>\n                <button\n                    role=\"button\"\n                    aria-pressed=\"false\"\n                    title={tooltip}\n                    aria-label={tooltip}\n                    className=\"add-cell-line-button\"\n                    onClick={this.props.click}\n                >\n                    {plus}\n                    <span className=\"add-cell-line-divider\" />\n                </button>\n            </div>\n        );\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport * as uuid from 'uuid/v4';\nimport { NativeKeyboardCommandTelemetry, NativeMouseCommandTelemetry } from '../../../client/datascience/constants';\nimport {\n    IInteractiveWindowMapping,\n    InteractiveWindowMessages\n} from '../../../client/datascience/interactive-common/interactiveWindowTypes';\nimport { IJupyterVariable, IJupyterVariablesRequest } from '../../../client/datascience/types';\nimport { CursorPos } from '../../interactive-common/mainState';\nimport {\n    CommonAction,\n    CommonActionType,\n    CommonActionTypeMapping,\n    ICellAction,\n    ICellAndCursorAction,\n    ICodeAction,\n    ICodeCreatedAction,\n    IEditCellAction,\n    ILinkClickAction,\n    IOpenSettingsAction,\n    ISendCommandAction,\n    IShowDataViewerAction,\n    IVariableExplorerHeight\n} from '../../interactive-common/redux/reducers/types';\nimport { IMonacoModelContentChangeEvent } from '../../react-common/monacoHelpers';\n\n// This function isn't made common and not exported, to ensure it isn't used elsewhere.\nfunction createIncomingActionWithPayload<\n    M extends IInteractiveWindowMapping & CommonActionTypeMapping,\n    K extends keyof M\n>(type: K, data: M[K]): CommonAction<M[K]> {\n    // tslint:disable-next-line: no-any\n    return { type, payload: { data, messageDirection: 'incoming' } as any } as any;\n}\n// This function isn't made common and not exported, to ensure it isn't used elsewhere.\nfunction createIncomingAction(type: CommonActionType | InteractiveWindowMessages): CommonAction {\n    return { type, payload: { messageDirection: 'incoming', data: undefined } };\n}\n\n// See https://react-redux.js.org/using-react-redux/connect-mapdispatch#defining-mapdispatchtoprops-as-an-object\nexport const actionCreators = {\n    addCell: () => createIncomingActionWithPayload(CommonActionType.ADD_AND_FOCUS_NEW_CELL, { newCellId: uuid() }),\n    insertAboveFirst: () =>\n        createIncomingActionWithPayload(CommonActionType.INSERT_ABOVE_FIRST_AND_FOCUS_NEW_CELL, { newCellId: uuid() }),\n    insertAbove: (cellId: string | undefined) =>\n        createIncomingActionWithPayload(CommonActionType.INSERT_ABOVE_AND_FOCUS_NEW_CELL, {\n            cellId,\n            newCellId: uuid()\n        }),\n    insertBelow: (cellId: string | undefined) =>\n        createIncomingActionWithPayload(CommonActionType.INSERT_BELOW_AND_FOCUS_NEW_CELL, {\n            cellId,\n            newCellId: uuid()\n        }),\n    executeCell: (cellId: string, moveOp: 'add' | 'select' | 'none') =>\n        createIncomingActionWithPayload(CommonActionType.EXECUTE_CELL_AND_ADVANCE, { cellId, moveOp }),\n    focusCell: (cellId: string, cursorPos: CursorPos = CursorPos.Current): CommonAction<ICellAndCursorAction> =>\n        createIncomingActionWithPayload(CommonActionType.FOCUS_CELL, { cellId, cursorPos }),\n    unfocusCell: (cellId: string, code: string) =>\n        createIncomingActionWithPayload(CommonActionType.UNFOCUS_CELL, { cellId, code }),\n    selectCell: (cellId: string, cursorPos: CursorPos = CursorPos.Current): CommonAction<ICellAndCursorAction> =>\n        createIncomingActionWithPayload(CommonActionType.SELECT_CELL, { cellId, cursorPos }),\n    executeAllCells: (): CommonAction => createIncomingAction(CommonActionType.EXECUTE_ALL_CELLS),\n    executeAbove: (cellId: string): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.EXECUTE_ABOVE, { cellId }),\n    executeCellAndBelow: (cellId: string): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.EXECUTE_CELL_AND_BELOW, { cellId }),\n    toggleVariableExplorer: (): CommonAction => createIncomingAction(CommonActionType.TOGGLE_VARIABLE_EXPLORER),\n    setVariableExplorerHeight: (containerHeight: number, gridHeight: number): CommonAction<IVariableExplorerHeight> =>\n        createIncomingActionWithPayload(CommonActionType.SET_VARIABLE_EXPLORER_HEIGHT, { containerHeight, gridHeight }),\n    restartKernel: (): CommonAction => createIncomingAction(CommonActionType.RESTART_KERNEL),\n    interruptKernel: (): CommonAction => createIncomingAction(CommonActionType.INTERRUPT_KERNEL),\n    clearAllOutputs: (): CommonAction => createIncomingAction(InteractiveWindowMessages.ClearAllOutputs),\n    export: (): CommonAction => createIncomingAction(CommonActionType.EXPORT),\n    save: (): CommonAction => createIncomingAction(CommonActionType.SAVE),\n    showDataViewer: (variable: IJupyterVariable, columnSize: number): CommonAction<IShowDataViewerAction> =>\n        createIncomingActionWithPayload(CommonActionType.SHOW_DATA_VIEWER, { variable, columnSize }),\n    sendCommand: (\n        command: NativeKeyboardCommandTelemetry | NativeMouseCommandTelemetry\n    ): CommonAction<ISendCommandAction> => createIncomingActionWithPayload(CommonActionType.SEND_COMMAND, { command }),\n    moveCellUp: (cellId: string): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.MOVE_CELL_UP, { cellId }),\n    moveCellDown: (cellId: string): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.MOVE_CELL_DOWN, { cellId }),\n    changeCellType: (cellId: string) => createIncomingActionWithPayload(CommonActionType.CHANGE_CELL_TYPE, { cellId }),\n    toggleLineNumbers: (cellId: string): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.TOGGLE_LINE_NUMBERS, { cellId }),\n    toggleOutput: (cellId: string): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.TOGGLE_OUTPUT, { cellId }),\n    deleteCell: (cellId: string): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.DELETE_CELL, { cellId }),\n    undo: (): CommonAction => createIncomingAction(InteractiveWindowMessages.Undo),\n    redo: (): CommonAction => createIncomingAction(InteractiveWindowMessages.Redo),\n    arrowUp: (cellId: string, code: string): CommonAction<ICodeAction> =>\n        createIncomingActionWithPayload(CommonActionType.ARROW_UP, { cellId, code }),\n    arrowDown: (cellId: string, code: string): CommonAction<ICodeAction> =>\n        createIncomingActionWithPayload(CommonActionType.ARROW_DOWN, { cellId, code }),\n    editCell: (cellId: string, e: IMonacoModelContentChangeEvent): CommonAction<IEditCellAction> =>\n        createIncomingActionWithPayload(CommonActionType.EDIT_CELL, {\n            cellId,\n            version: e.versionId,\n            modelId: e.model.id,\n            forward: e.forward,\n            reverse: e.reverse,\n            id: cellId,\n            code: e.model.getValue()\n        }),\n    linkClick: (href: string): CommonAction<ILinkClickAction> =>\n        createIncomingActionWithPayload(CommonActionType.LINK_CLICK, { href }),\n    showPlot: (imageHtml: string) => createIncomingActionWithPayload(InteractiveWindowMessages.ShowPlot, imageHtml),\n    gatherCell: (cellId: string | undefined): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.GATHER_CELL, { cellId }),\n    gatherCellToScript: (cellId: string | undefined): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.GATHER_CELL_TO_SCRIPT, { cellId }),\n    editorLoaded: (): CommonAction => createIncomingAction(CommonActionType.EDITOR_LOADED),\n    codeCreated: (cellId: string | undefined, modelId: string): CommonAction<ICodeCreatedAction> =>\n        createIncomingActionWithPayload(CommonActionType.CODE_CREATED, { cellId, modelId }),\n    loadedAllCells: (): CommonAction => createIncomingAction(CommonActionType.LOADED_ALL_CELLS),\n    editorUnmounted: (): CommonAction => createIncomingAction(CommonActionType.UNMOUNT),\n    selectKernel: (): CommonAction => createIncomingAction(InteractiveWindowMessages.SelectKernel),\n    selectServer: (): CommonAction => createIncomingAction(CommonActionType.SELECT_SERVER),\n    openSettings: (setting?: string): CommonAction<IOpenSettingsAction> =>\n        createIncomingActionWithPayload(CommonActionType.OPEN_SETTINGS, { setting }),\n    getVariableData: (\n        newExecutionCount: number,\n        startIndex: number = 0,\n        pageSize: number = 100\n    ): CommonAction<IJupyterVariablesRequest> =>\n        createIncomingActionWithPayload(CommonActionType.GET_VARIABLE_DATA, {\n            executionCount: newExecutionCount,\n            sortColumn: 'name',\n            sortAscending: true,\n            startIndex,\n            pageSize\n        }),\n    widgetFailed: (ex: Error): CommonAction<Error> =>\n        createIncomingActionWithPayload(CommonActionType.IPYWIDGET_RENDER_FAILURE, ex),\n    runByLine: (cellId: string): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.RUN_BY_LINE, { cellId }),\n    continue: (cellId: string): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.CONTINUE, { cellId }),\n    step: (cellId: string): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.STEP, { cellId })\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport '../../client/common/extensions';\n\nimport { nbformat } from '@jupyterlab/coreutils';\nimport * as fastDeepEqual from 'fast-deep-equal';\nimport * as monacoEditor from 'monaco-editor/esm/vs/editor/editor.api';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\n\nimport { OSType } from '../../client/common/utils/platform';\nimport {\n    Identifiers,\n    NativeKeyboardCommandTelemetry,\n    NativeMouseCommandTelemetry\n} from '../../client/datascience/constants';\nimport { CellState } from '../../client/datascience/types';\nimport { concatMultilineStringInput } from '../common';\nimport { CellInput } from '../interactive-common/cellInput';\nimport { CellOutput } from '../interactive-common/cellOutput';\nimport { ExecutionCount } from '../interactive-common/executionCount';\nimport { InformationMessages } from '../interactive-common/informationMessages';\nimport { activeDebugState, CursorPos, DebugState, ICellViewModel, IFont } from '../interactive-common/mainState';\nimport { getOSType } from '../react-common/constants';\nimport { IKeyboardEvent } from '../react-common/event';\nimport { Image, ImageName } from '../react-common/image';\nimport { ImageButton } from '../react-common/imageButton';\nimport { getLocString } from '../react-common/locReactSide';\nimport { IMonacoModelContentChangeEvent } from '../react-common/monacoHelpers';\nimport { AddCellLine } from './addCellLine';\nimport { actionCreators } from './redux/actions';\n\nnamespace CssConstants {\n    export const CellOutputWrapper = 'cell-output-wrapper';\n    export const CellOutputWrapperClass = `.${CellOutputWrapper}`;\n    export const ImageButtonClass = '.image-button';\n}\n\ninterface INativeCellBaseProps {\n    role?: string;\n    cellVM: ICellViewModel;\n    language: string;\n\n    baseTheme: string;\n    codeTheme: string;\n    testMode?: boolean;\n    maxTextSize?: number;\n    enableScroll?: boolean;\n    monacoTheme: string | undefined;\n    lastCell: boolean;\n    firstCell: boolean;\n    font: IFont;\n    allowUndo: boolean;\n    enableGather: boolean | undefined;\n    editorOptions: monacoEditor.editor.IEditorOptions;\n    themeMatplotlibPlots: boolean | undefined;\n    focusPending: number;\n    busy: boolean;\n    useCustomEditorApi: boolean;\n    runningByLine: DebugState;\n    supportsRunByLine: boolean;\n}\n\ntype INativeCellProps = INativeCellBaseProps & typeof actionCreators;\n\n// tslint:disable: react-this-binding-issue\nexport class NativeCell extends React.Component<INativeCellProps> {\n    private inputRef: React.RefObject<CellInput> = React.createRef<CellInput>();\n    private wrapperRef: React.RefObject<HTMLDivElement> = React.createRef<HTMLDivElement>();\n    private lastKeyPressed: string | undefined;\n\n    constructor(prop: INativeCellProps) {\n        super(prop);\n    }\n\n    public render() {\n        if (this.props.cellVM.cell.data.cell_type === 'messages') {\n            return <InformationMessages messages={this.props.cellVM.cell.data.messages} />;\n        } else {\n            return this.renderNormalCell();\n        }\n    }\n\n    public componentDidUpdate(prevProps: INativeCellProps) {\n        if (this.props.cellVM.selected && !prevProps.cellVM.selected && !this.props.cellVM.focused) {\n            this.giveFocus();\n        }\n\n        // Anytime we update, reset the key. This object will be reused for different cell ids\n        this.lastKeyPressed = undefined;\n    }\n\n    public shouldComponentUpdate(nextProps: INativeCellProps): boolean {\n        return !fastDeepEqual(this.props, nextProps);\n    }\n\n    // Public for testing\n    public getUnknownMimeTypeFormatString() {\n        return getLocString('DataScience.unknownMimeTypeFormat', 'Unknown Mime Type');\n    }\n\n    private giveFocus() {\n        if (this.wrapperRef && this.wrapperRef.current) {\n            // Give focus to the cell if not already owning focus\n            if (!this.wrapperRef.current.contains(document.activeElement)) {\n                this.wrapperRef.current.focus();\n            }\n\n            // Scroll into view (since we have focus). However this function\n            // is not supported on enzyme\n            // tslint:disable-next-line: no-any\n            if ((this.wrapperRef.current as any).scrollIntoView) {\n                this.wrapperRef.current.scrollIntoView({ behavior: 'auto', block: 'nearest', inline: 'nearest' });\n            }\n        }\n    }\n\n    private getCell = () => {\n        return this.props.cellVM.cell;\n    };\n\n    private isCodeCell = () => {\n        return this.props.cellVM.cell.data.cell_type === 'code';\n    };\n\n    private isMarkdownCell = () => {\n        return this.props.cellVM.cell.data.cell_type === 'markdown';\n    };\n\n    private isSelected = () => {\n        return this.props.cellVM.selected;\n    };\n\n    private isFocused = () => {\n        return this.props.cellVM.focused;\n    };\n\n    private isError = () => {\n        return this.props.cellVM.cell.state === CellState.error;\n    };\n\n    private renderNormalCell() {\n        const cellOuterClass = this.props.cellVM.editable ? 'cell-outer-editable' : 'cell-outer';\n        let cellWrapperClass = this.props.cellVM.editable ? 'cell-wrapper' : 'cell-wrapper cell-wrapper-noneditable';\n        if (this.isSelected() && !this.isFocused()) {\n            cellWrapperClass += ' cell-wrapper-selected';\n        }\n        if (this.isFocused()) {\n            cellWrapperClass += ' cell-wrapper-focused';\n        }\n\n        // Content changes based on if a markdown cell or not.\n        const content =\n            this.isMarkdownCell() && !this.isShowingMarkdownEditor() ? (\n                <div className=\"cell-result-container\">\n                    <div className=\"cell-row-container\">\n                        {this.renderCollapseBar(false)}\n                        {this.renderOutput()}\n                    </div>\n                    {this.renderAddDivider(false)}\n                </div>\n            ) : (\n                <div className=\"cell-result-container\">\n                    <div className=\"cell-row-container\">\n                        {this.renderCollapseBar(true)}\n                        {this.renderControls()}\n                        {this.renderInput()}\n                    </div>\n                    {this.renderAddDivider(true)}\n                    <div className=\"cell-row-container\">\n                        {this.renderCollapseBar(false)}\n                        {this.renderOutput()}\n                    </div>\n                </div>\n            );\n\n        return (\n            <div\n                className={cellWrapperClass}\n                role={this.props.role}\n                ref={this.wrapperRef}\n                tabIndex={0}\n                onKeyDown={this.onOuterKeyDown}\n                onClick={this.onMouseClick}\n                onDoubleClick={this.onMouseDoubleClick}\n            >\n                <div className={cellOuterClass}>\n                    {this.renderNavbar()}\n                    <div className=\"content-div\">{content}</div>\n                </div>\n            </div>\n        );\n    }\n\n    private allowClickPropagation(elem: HTMLElement): boolean {\n        if (this.isMarkdownCell()) {\n            return true;\n        }\n        if (!elem.closest(CssConstants.ImageButtonClass) && !elem.closest(CssConstants.CellOutputWrapperClass)) {\n            return true;\n        }\n        return false;\n    }\n\n    private onMouseClick = (ev: React.MouseEvent<HTMLDivElement>) => {\n        if (ev.nativeEvent.target) {\n            const elem = ev.nativeEvent.target as HTMLElement;\n            if (this.allowClickPropagation(elem)) {\n                // Not a click on an button in a toolbar or in output, select the cell.\n                ev.stopPropagation();\n                this.lastKeyPressed = undefined;\n                this.props.selectCell(this.cellId);\n            }\n        }\n    };\n\n    private onMouseDoubleClick = (ev: React.MouseEvent<HTMLDivElement>) => {\n        const elem = ev.nativeEvent.target as HTMLElement;\n        if (this.allowClickPropagation(elem)) {\n            // When we receive double click, propagate upwards. Might change our state\n            ev.stopPropagation();\n            this.props.focusCell(this.cellId, CursorPos.Current);\n        }\n    };\n\n    private shouldRenderCodeEditor = (): boolean => {\n        return this.isCodeCell() && (this.props.cellVM.inputBlockShow || this.props.cellVM.editable);\n    };\n\n    private shouldRenderMarkdownEditor = (): boolean => {\n        return (\n            this.isMarkdownCell() &&\n            (this.isShowingMarkdownEditor() || this.props.cellVM.cell.id === Identifiers.EditCellId)\n        );\n    };\n\n    private isShowingMarkdownEditor = (): boolean => {\n        return this.isMarkdownCell() && this.props.cellVM.focused;\n    };\n\n    private shouldRenderInput(): boolean {\n        return this.shouldRenderCodeEditor() || this.shouldRenderMarkdownEditor();\n    }\n\n    private hasOutput = () => {\n        return (\n            this.getCell().state === CellState.finished ||\n            this.getCell().state === CellState.error ||\n            this.getCell().state === CellState.executing\n        );\n    };\n\n    private getCodeCell = () => {\n        return this.props.cellVM.cell.data as nbformat.ICodeCell;\n    };\n\n    private shouldRenderOutput(): boolean {\n        if (this.isCodeCell()) {\n            const cell = this.getCodeCell();\n            return (\n                this.hasOutput() &&\n                cell.outputs &&\n                !this.props.cellVM.hideOutput &&\n                Array.isArray(cell.outputs) &&\n                cell.outputs.length !== 0\n            );\n        } else if (this.isMarkdownCell()) {\n            return !this.isShowingMarkdownEditor();\n        }\n        return false;\n    }\n\n    // tslint:disable-next-line: cyclomatic-complexity max-func-body-length\n    private keyDownInput = (cellId: string, e: IKeyboardEvent) => {\n        const isFocusedWhenNotSuggesting = this.isFocused() && e.editorInfo && !e.editorInfo.isSuggesting;\n        switch (e.code) {\n            case 'ArrowUp':\n            case 'k':\n                if ((isFocusedWhenNotSuggesting && e.editorInfo!.isFirstLine && !e.shiftKey) || !this.isFocused()) {\n                    this.arrowUpFromCell(e);\n                }\n                break;\n            case 'ArrowDown':\n            case 'j':\n                if ((isFocusedWhenNotSuggesting && e.editorInfo!.isLastLine && !e.shiftKey) || !this.isFocused()) {\n                    this.arrowDownFromCell(e);\n                }\n                break;\n            case 's':\n                if ((e.ctrlKey && getOSType() !== OSType.OSX) || (e.metaKey && getOSType() === OSType.OSX)) {\n                    // This is save, save our cells\n                    this.props.save();\n                }\n                break;\n\n            case 'Escape':\n                if (isFocusedWhenNotSuggesting) {\n                    this.escapeCell(e);\n                }\n                break;\n            case 'y':\n                if (!this.isFocused() && this.isSelected() && this.isMarkdownCell()) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                    this.props.changeCellType(cellId);\n                    this.props.sendCommand(NativeKeyboardCommandTelemetry.ChangeToCode);\n                }\n                break;\n            case 'm':\n                if (!this.isFocused() && this.isSelected() && this.isCodeCell()) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                    this.props.changeCellType(cellId);\n                    this.props.sendCommand(NativeKeyboardCommandTelemetry.ChangeToMarkdown);\n                }\n                break;\n            case 'l':\n                if (!this.isFocused() && this.isSelected()) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                    this.props.toggleLineNumbers(cellId);\n                    this.props.sendCommand(NativeKeyboardCommandTelemetry.ToggleLineNumbers);\n                }\n                break;\n            case 'o':\n                if (!this.isFocused() && this.isSelected()) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                    this.props.toggleOutput(cellId);\n                    this.props.sendCommand(NativeKeyboardCommandTelemetry.ToggleOutput);\n                }\n                break;\n            case 'NumpadEnter':\n            case 'Enter':\n                if (e.shiftKey) {\n                    this.shiftEnterCell(e);\n                } else if (e.ctrlKey) {\n                    this.ctrlEnterCell(e);\n                } else if (e.altKey) {\n                    this.altEnterCell(e);\n                } else {\n                    this.enterCell(e);\n                }\n                break;\n            case 'd':\n                if (this.lastKeyPressed === 'd' && !this.isFocused() && this.isSelected()) {\n                    e.stopPropagation();\n                    this.lastKeyPressed = undefined; // Reset it so we don't keep deleting\n                    this.props.deleteCell(cellId);\n                    this.props.sendCommand(NativeKeyboardCommandTelemetry.DeleteCell);\n                }\n                break;\n            case 'a':\n                if (!this.isFocused()) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                    setTimeout(() => this.props.insertAbove(cellId), 1);\n                    this.props.sendCommand(NativeKeyboardCommandTelemetry.InsertAbove);\n                }\n                break;\n            case 'b':\n                if (!this.isFocused()) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                    setTimeout(() => this.props.insertBelow(cellId), 1);\n                    this.props.sendCommand(NativeKeyboardCommandTelemetry.InsertBelow);\n                }\n                break;\n            case 'z':\n            case 'Z':\n                if (!this.isFocused() && !this.props.useCustomEditorApi) {\n                    if (e.shiftKey && !e.ctrlKey && !e.altKey) {\n                        e.stopPropagation();\n                        this.props.redo();\n                        this.props.sendCommand(NativeKeyboardCommandTelemetry.Redo);\n                    } else if (!e.shiftKey && !e.altKey && !e.ctrlKey) {\n                        e.stopPropagation();\n                        this.props.undo();\n                        this.props.sendCommand(NativeKeyboardCommandTelemetry.Undo);\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n\n        this.lastKeyPressed = e.code;\n    };\n\n    private get cellId(): string {\n        return this.props.cellVM.cell.id;\n    }\n\n    private escapeCell = (e: IKeyboardEvent) => {\n        // Unfocus the current cell by giving focus to the cell itself\n        if (this.wrapperRef && this.wrapperRef.current && this.isFocused()) {\n            e.stopPropagation();\n            this.wrapperRef.current.focus();\n            this.props.sendCommand(NativeKeyboardCommandTelemetry.Unfocus);\n        }\n    };\n\n    private arrowUpFromCell = (e: IKeyboardEvent) => {\n        e.stopPropagation();\n        e.preventDefault();\n        this.props.arrowUp(this.cellId, this.getCurrentCode());\n        this.props.sendCommand(NativeKeyboardCommandTelemetry.ArrowUp);\n    };\n\n    private arrowDownFromCell = (e: IKeyboardEvent) => {\n        e.stopPropagation();\n        e.preventDefault();\n        this.props.arrowDown(this.cellId, this.getCurrentCode());\n        this.props.sendCommand(NativeKeyboardCommandTelemetry.ArrowDown);\n    };\n\n    private enterCell = (e: IKeyboardEvent) => {\n        // If focused, then ignore this call. It should go to the focused cell instead.\n        if (!this.isFocused() && !e.editorInfo && this.wrapperRef && this.wrapperRef && this.isSelected()) {\n            e.stopPropagation();\n            e.preventDefault();\n            this.props.focusCell(this.cellId, CursorPos.Current);\n        }\n    };\n\n    private shiftEnterCell = (e: IKeyboardEvent) => {\n        // Prevent shift enter from add an enter\n        e.stopPropagation();\n        e.preventDefault();\n\n        // Submit and move to the next.\n        this.runAndMove();\n\n        this.props.sendCommand(NativeKeyboardCommandTelemetry.RunAndMove);\n    };\n\n    private altEnterCell = (e: IKeyboardEvent) => {\n        // Prevent shift enter from add an enter\n        e.stopPropagation();\n        e.preventDefault();\n\n        // Submit this cell\n        this.runAndAdd();\n\n        this.props.sendCommand(NativeKeyboardCommandTelemetry.RunAndAdd);\n    };\n\n    private runAndMove() {\n        // Submit this cell\n        this.submitCell(this.props.lastCell ? 'add' : 'select');\n    }\n\n    private runAndAdd() {\n        // Submit this cell\n        this.submitCell('add');\n    }\n\n    private ctrlEnterCell = (e: IKeyboardEvent) => {\n        // Prevent shift enter from add an enter\n        e.stopPropagation();\n        e.preventDefault();\n\n        // Escape the current cell if it is markdown to make it render\n        if (this.isMarkdownCell()) {\n            this.escapeCell(e);\n        }\n\n        // Submit this cell\n        this.submitCell('none');\n        this.props.sendCommand(NativeKeyboardCommandTelemetry.Run);\n    };\n\n    private submitCell = (moveOp: 'add' | 'select' | 'none') => {\n        this.props.executeCell(this.cellId, moveOp);\n    };\n\n    private addNewCell = () => {\n        setTimeout(() => this.props.insertBelow(this.cellId), 1);\n        this.props.sendCommand(NativeMouseCommandTelemetry.AddToEnd);\n    };\n    private addNewCellBelow = () => {\n        setTimeout(() => this.props.insertBelow(this.cellId), 1);\n        this.props.sendCommand(NativeMouseCommandTelemetry.InsertBelow);\n    };\n\n    private renderNavbar = () => {\n        const moveUp = () => {\n            this.props.moveCellUp(this.cellId);\n            this.props.sendCommand(NativeMouseCommandTelemetry.MoveCellUp);\n        };\n        const moveDown = () => {\n            this.props.moveCellDown(this.cellId);\n            this.props.sendCommand(NativeMouseCommandTelemetry.MoveCellDown);\n        };\n        const addButtonRender = !this.props.lastCell ? (\n            <div className=\"navbar-add-button\">\n                <ImageButton\n                    baseTheme={this.props.baseTheme}\n                    onClick={this.addNewCellBelow}\n                    tooltip={getLocString('DataScience.insertBelow', 'Insert cell below')}\n                >\n                    <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.InsertBelow} />\n                </ImageButton>\n            </div>\n        ) : null;\n\n        return (\n            <div className=\"navbar-div\">\n                <div>\n                    <ImageButton\n                        baseTheme={this.props.baseTheme}\n                        onClick={moveUp}\n                        disabled={this.props.firstCell}\n                        tooltip={getLocString('DataScience.moveCellUp', 'Move cell up')}\n                    >\n                        <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Up} />\n                    </ImageButton>\n                </div>\n                <div>\n                    <ImageButton\n                        baseTheme={this.props.baseTheme}\n                        onClick={moveDown}\n                        disabled={this.props.lastCell}\n                        tooltip={getLocString('DataScience.moveCellDown', 'Move cell down')}\n                    >\n                        <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Down} />\n                    </ImageButton>\n                </div>\n                {addButtonRender}\n            </div>\n        );\n    };\n\n    private renderAddDivider = (checkOutput: boolean) => {\n        // Skip on the last cell\n        if (!this.props.lastCell) {\n            // Divider should only show if no output\n            if (!checkOutput || !this.shouldRenderOutput()) {\n                return (\n                    <AddCellLine\n                        className=\"add-divider\"\n                        baseTheme={this.props.baseTheme}\n                        includePlus={false}\n                        click={this.addNewCell}\n                    />\n                );\n            }\n        }\n\n        return null;\n    };\n\n    private getCurrentCode(): string {\n        // Input may not be open at this time. If not, then use current cell contents.\n        const contents = this.inputRef.current ? this.inputRef.current.getContents() : undefined;\n        return contents || concatMultilineStringInput(this.props.cellVM.cell.data.source);\n    }\n\n    private renderMiddleToolbar = () => {\n        const cellId = this.props.cellVM.cell.id;\n        const runCell = () => {\n            this.runAndMove();\n            this.props.sendCommand(NativeMouseCommandTelemetry.Run);\n        };\n        const gatherCell = () => {\n            this.props.gatherCell(cellId);\n        };\n        const deleteCell = () => {\n            this.props.deleteCell(cellId);\n            this.props.sendCommand(NativeMouseCommandTelemetry.DeleteCell);\n        };\n        const runbyline = () => {\n            this.props.focusCell(cellId);\n            this.props.runByLine(cellId);\n        };\n        const stop = () => {\n            this.props.interruptKernel();\n        };\n        const step = () => {\n            this.props.focusCell(cellId);\n            this.props.step(cellId);\n        };\n        const gatherDisabled =\n            this.props.cellVM.cell.data.execution_count === null ||\n            this.props.cellVM.hasBeenRun === null ||\n            this.props.cellVM.hasBeenRun === false ||\n            this.isError() ||\n            this.isMarkdownCell() ||\n            this.props.enableGather === false;\n        const switchTooltip =\n            this.props.cellVM.cell.data.cell_type === 'code'\n                ? getLocString('DataScience.switchToMarkdown', 'Change to markdown')\n                : getLocString('DataScience.switchToCode', 'Change to code');\n        const otherCellType = this.props.cellVM.cell.data.cell_type === 'code' ? 'markdown' : 'code';\n        const otherCellTypeCommand =\n            otherCellType === 'markdown'\n                ? NativeMouseCommandTelemetry.ChangeToMarkdown\n                : NativeMouseCommandTelemetry.ChangeToCode;\n        const otherCellImage = otherCellType === 'markdown' ? ImageName.SwitchToMarkdown : ImageName.SwitchToCode;\n        const switchCellType = (event: React.MouseEvent<HTMLButtonElement>) => {\n            // Prevent this mouse click from stealing focus so that we\n            // can give focus to the cell input.\n            event.stopPropagation();\n            event.preventDefault();\n            this.props.changeCellType(cellId);\n            this.props.sendCommand(otherCellTypeCommand);\n        };\n        const toolbarClassName = this.props.cellVM.cell.data.cell_type === 'code' ? '' : 'markdown-toolbar';\n\n        if (activeDebugState(this.props.runningByLine) && !this.isMarkdownCell()) {\n            return (\n                <div className={toolbarClassName}>\n                    <div className=\"native-editor-celltoolbar-middle\">\n                        <ImageButton\n                            className={'image-button-empty'} // Just takes up space for now\n                            baseTheme={this.props.baseTheme}\n                            onClick={runCell}\n                            tooltip={getLocString('DataScience.runCell', 'Run cell')}\n                            hidden={this.isMarkdownCell()}\n                            disabled={true}\n                        >\n                            <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Run} />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={step}\n                            tooltip={getLocString('DataScience.step', 'Run next line (F10)')}\n                            hidden={this.isMarkdownCell()}\n                            disabled={this.props.busy || this.props.runningByLine === DebugState.Run}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.RunByLine}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={stop}\n                            tooltip={getLocString('DataScience.stopRunByLine', 'Stop')}\n                            hidden={this.isMarkdownCell()}\n                            disabled={false}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.Interrupt}\n                            />\n                        </ImageButton>\n                    </div>\n                    <div className=\"native-editor-celltoolbar-divider\" />\n                </div>\n            );\n        }\n        return (\n            <div className={toolbarClassName}>\n                <div className=\"native-editor-celltoolbar-middle\">\n                    <ImageButton\n                        baseTheme={this.props.baseTheme}\n                        onClick={runCell}\n                        tooltip={getLocString('DataScience.runCell', 'Run cell')}\n                        hidden={this.isMarkdownCell()}\n                        disabled={this.props.busy}\n                    >\n                        <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Run} />\n                    </ImageButton>\n                    <ImageButton\n                        baseTheme={this.props.baseTheme}\n                        onClick={runbyline}\n                        tooltip={getLocString('DataScience.runByLine', 'Run by line')}\n                        hidden={this.isMarkdownCell() || !this.props.supportsRunByLine}\n                        disabled={this.props.busy}\n                    >\n                        <Image\n                            baseTheme={this.props.baseTheme}\n                            class=\"image-button-image\"\n                            image={ImageName.RunByLine}\n                        />\n                    </ImageButton>\n                    <ImageButton baseTheme={this.props.baseTheme} onMouseDown={switchCellType} tooltip={switchTooltip}>\n                        <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={otherCellImage} />\n                    </ImageButton>\n                    <ImageButton\n                        baseTheme={this.props.baseTheme}\n                        onClick={gatherCell}\n                        tooltip={getLocString(\n                            'DataScience.gatherCell',\n                            'Gather the code required to generate this cell into a new notebook'\n                        )}\n                        hidden={gatherDisabled}\n                    >\n                        <Image\n                            baseTheme={this.props.baseTheme}\n                            class=\"image-button-image\"\n                            image={ImageName.GatherCode}\n                        />\n                    </ImageButton>\n                    <ImageButton\n                        baseTheme={this.props.baseTheme}\n                        onClick={deleteCell}\n                        tooltip={getLocString('DataScience.deleteCell', 'Delete cell')}\n                        className=\"delete-cell-button hover-cell-button\"\n                    >\n                        <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Delete} />\n                    </ImageButton>\n                </div>\n                <div className=\"native-editor-celltoolbar-divider\" />\n            </div>\n        );\n    };\n\n    private renderControls = () => {\n        const busy =\n            this.props.cellVM.cell.state === CellState.init || this.props.cellVM.cell.state === CellState.executing;\n        const executionCount =\n            this.props.cellVM &&\n            this.props.cellVM.cell &&\n            this.props.cellVM.cell.data &&\n            this.props.cellVM.cell.data.execution_count\n                ? this.props.cellVM.cell.data.execution_count.toString()\n                : '-';\n\n        return (\n            <div className=\"controls-div\">\n                <ExecutionCount isBusy={busy} count={executionCount} visible={this.isCodeCell()} />\n            </div>\n        );\n    };\n\n    private renderInput = () => {\n        if (this.shouldRenderInput()) {\n            // Make sure the glyph margin is always there for native cells.\n            // We need it for debugging.\n            const options = {\n                ...this.props.editorOptions,\n                glyphMargin: true\n            };\n            return (\n                <div className=\"cell-input-wrapper\">\n                    {this.renderMiddleToolbar()}\n                    <CellInput\n                        cellVM={this.props.cellVM}\n                        editorOptions={options}\n                        history={undefined}\n                        codeTheme={this.props.codeTheme}\n                        onCodeChange={this.onCodeChange}\n                        onCodeCreated={this.onCodeCreated}\n                        testMode={this.props.testMode ? true : false}\n                        showWatermark={false}\n                        ref={this.inputRef}\n                        monacoTheme={this.props.monacoTheme}\n                        openLink={this.openLink}\n                        editorMeasureClassName={undefined}\n                        focused={this.onCodeFocused}\n                        unfocused={this.onCodeUnfocused}\n                        keyDown={this.keyDownInput}\n                        showLineNumbers={this.props.cellVM.showLineNumbers}\n                        font={this.props.font}\n                        disableUndoStack={this.props.useCustomEditorApi}\n                        codeVersion={this.props.cellVM.codeVersion ? this.props.cellVM.codeVersion : 1}\n                        focusPending={this.props.focusPending}\n                        language={this.props.language}\n                    />\n                </div>\n            );\n        }\n        return null;\n    };\n\n    private onCodeFocused = () => {\n        this.props.focusCell(this.cellId, CursorPos.Current);\n    };\n\n    private onCodeUnfocused = () => {\n        // Make sure to save the code from the editor into the cell\n        this.props.unfocusCell(this.cellId, this.getCurrentCode());\n    };\n\n    private onCodeChange = (e: IMonacoModelContentChangeEvent) => {\n        this.props.editCell(this.getCell().id, e);\n    };\n\n    private onCodeCreated = (_code: string, _file: string, cellId: string, modelId: string) => {\n        this.props.codeCreated(cellId, modelId);\n    };\n\n    private renderOutput = (): JSX.Element | null => {\n        const themeMatplotlibPlots = this.props.themeMatplotlibPlots ? true : false;\n        const toolbar = this.props.cellVM.cell.data.cell_type === 'markdown' ? this.renderMiddleToolbar() : null;\n        if (this.shouldRenderOutput()) {\n            return (\n                <div className={CssConstants.CellOutputWrapper}>\n                    {toolbar}\n                    <CellOutput\n                        cellVM={this.props.cellVM}\n                        baseTheme={this.props.baseTheme}\n                        expandImage={this.props.showPlot}\n                        maxTextSize={this.props.maxTextSize}\n                        enableScroll={this.props.enableScroll}\n                        themeMatplotlibPlots={themeMatplotlibPlots}\n                        widgetFailed={this.props.widgetFailed}\n                    />\n                </div>\n            );\n        }\n        return null;\n    };\n\n    private onOuterKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n        // Handle keydown events for the entire cell when we don't have focus\n        if (event.key !== 'Tab' && !this.isFocused() && !this.focusInOutput()) {\n            this.keyDownInput(this.props.cellVM.cell.id, {\n                code: event.key,\n                shiftKey: event.shiftKey,\n                ctrlKey: event.ctrlKey,\n                metaKey: event.metaKey,\n                altKey: event.altKey,\n                target: event.target as HTMLDivElement,\n                stopPropagation: () => event.stopPropagation(),\n                preventDefault: () => event.preventDefault()\n            });\n        }\n    };\n\n    private focusInOutput(): boolean {\n        const focusedElement = document.activeElement as HTMLElement;\n        if (focusedElement) {\n            return focusedElement.closest(CssConstants.CellOutputWrapperClass) !== null;\n        }\n        return false;\n    }\n\n    private renderCollapseBar = (input: boolean) => {\n        let classes = 'collapse-bar';\n\n        if (this.isSelected() && !this.isFocused()) {\n            classes += ' collapse-bar-selected';\n        }\n        if (this.isFocused()) {\n            classes += ' collapse-bar-focused';\n        }\n\n        if (input) {\n            return <div className={classes}></div>;\n        }\n\n        if (this.props.cellVM.cell.data.cell_type === 'markdown') {\n            classes += ' collapse-bar-markdown';\n        } else if (\n            Array.isArray(this.props.cellVM.cell.data.outputs) &&\n            this.props.cellVM.cell.data.outputs.length !== 0\n        ) {\n            classes += ' collapse-bar-output';\n        } else {\n            return null;\n        }\n\n        return <div className={classes}></div>;\n    };\n\n    private openLink = (uri: monacoEditor.Uri) => {\n        this.props.linkClick(uri.toString());\n    };\n}\n\n// Main export, return a redux connected editor\nexport function getConnectedNativeCell() {\n    return connect(null, actionCreators)(NativeCell);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { NativeMouseCommandTelemetry } from '../../client/datascience/constants';\nimport { KernelSelection } from '../interactive-common/kernelSelection';\nimport {\n    getSelectedAndFocusedInfo,\n    IFont,\n    IServerState,\n    SelectionAndFocusedInfo,\n    ServerStatus\n} from '../interactive-common/mainState';\nimport { IStore } from '../interactive-common/redux/store';\nimport { Image, ImageName } from '../react-common/image';\nimport { ImageButton } from '../react-common/imageButton';\nimport { getLocString } from '../react-common/locReactSide';\nimport './nativeEditor.less';\nimport { actionCreators } from './redux/actions';\n\ntype INativeEditorDataProps = {\n    busy: boolean;\n    dirty: boolean;\n    baseTheme: string;\n    cellCount: number;\n    font: IFont;\n    kernel: IServerState;\n    selectionFocusedInfo: SelectionAndFocusedInfo;\n    variablesVisible: boolean;\n};\nexport type INativeEditorToolbarProps = INativeEditorDataProps & {\n    sendCommand: typeof actionCreators.sendCommand;\n    clearAllOutputs: typeof actionCreators.clearAllOutputs;\n    export: typeof actionCreators.export;\n    addCell: typeof actionCreators.addCell;\n    save: typeof actionCreators.save;\n    executeAllCells: typeof actionCreators.executeAllCells;\n    toggleVariableExplorer: typeof actionCreators.toggleVariableExplorer;\n    setVariableExplorerHeight: typeof actionCreators.setVariableExplorerHeight;\n    executeAbove: typeof actionCreators.executeAbove;\n    executeCellAndBelow: typeof actionCreators.executeCellAndBelow;\n    restartKernel: typeof actionCreators.restartKernel;\n    interruptKernel: typeof actionCreators.interruptKernel;\n    selectKernel: typeof actionCreators.selectKernel;\n    selectServer: typeof actionCreators.selectServer;\n};\n\nfunction mapStateToProps(state: IStore): INativeEditorDataProps {\n    return {\n        ...state.main,\n        cellCount: state.main.cellVMs.length,\n        selectionFocusedInfo: getSelectedAndFocusedInfo(state.main),\n        variablesVisible: state.variables.visible\n    };\n}\n\nexport class Toolbar extends React.PureComponent<INativeEditorToolbarProps> {\n    constructor(props: INativeEditorToolbarProps) {\n        super(props);\n    }\n\n    // tslint:disable: react-this-binding-issue\n    // tslint:disable-next-line: max-func-body-length\n    public render() {\n        const selectedInfo = this.props.selectionFocusedInfo;\n\n        const addCell = () => {\n            setTimeout(() => this.props.addCell(), 1);\n            this.props.sendCommand(NativeMouseCommandTelemetry.AddToEnd);\n        };\n        const runAll = () => {\n            // Run all cells currently available.\n            this.props.executeAllCells();\n            this.props.sendCommand(NativeMouseCommandTelemetry.RunAll);\n        };\n        const save = () => {\n            this.props.save();\n            this.props.sendCommand(NativeMouseCommandTelemetry.Save);\n        };\n        const toggleVariableExplorer = () => {\n            this.props.toggleVariableExplorer();\n            this.props.sendCommand(NativeMouseCommandTelemetry.ToggleVariableExplorer);\n        };\n        const variableExplorerTooltip = this.props.variablesVisible\n            ? getLocString('DataScience.collapseVariableExplorerTooltip', 'Hide variables active in jupyter kernel')\n            : getLocString('DataScience.expandVariableExplorerTooltip', 'Show variables active in jupyter kernel');\n        const runAbove = () => {\n            if (selectedInfo.selectedCellId) {\n                this.props.executeAbove(selectedInfo.selectedCellId);\n                this.props.sendCommand(NativeMouseCommandTelemetry.RunAbove);\n            }\n        };\n        const runBelow = () => {\n            if (selectedInfo.selectedCellId && typeof selectedInfo.selectedCellIndex === 'number') {\n                // tslint:disable-next-line: no-suspicious-comment\n                // TODO: Is the source going to be up to date during run below?\n                this.props.executeCellAndBelow(selectedInfo.selectedCellId);\n                this.props.sendCommand(NativeMouseCommandTelemetry.RunBelow);\n            }\n        };\n        const selectKernel = () => {\n            this.props.selectKernel();\n            this.props.sendCommand(NativeMouseCommandTelemetry.SelectKernel);\n        };\n        const selectServer = () => {\n            this.props.selectServer();\n            this.props.sendCommand(NativeMouseCommandTelemetry.SelectServer);\n        };\n        const canRunAbove = (selectedInfo.selectedCellIndex ?? -1) > 0;\n        const canRunBelow =\n            (selectedInfo.selectedCellIndex ?? -1) < this.props.cellCount - 1 &&\n            (selectedInfo.selectedCellId || '').length > 0;\n\n        const canRestartAndInterruptKernel = this.props.kernel.jupyterServerStatus !== ServerStatus.NotStarted;\n\n        return (\n            <div id=\"toolbar-panel\">\n                <div className=\"toolbar-menu-bar\">\n                    <div className=\"toolbar-menu-bar-child\">\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={runAll}\n                            disabled={this.props.busy}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.runAll', 'Run All Cells')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.RunAll}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={runAbove}\n                            disabled={!canRunAbove || this.props.busy}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.runAbove', 'Run cells above')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.RunAbove}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={runBelow}\n                            disabled={!canRunBelow || this.props.busy}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.runBelow', 'Run cell and below')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.RunBelow}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.restartKernel}\n                            disabled={this.props.busy || !canRestartAndInterruptKernel}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.restartServer', 'Restart IPython kernel')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.Restart}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.interruptKernel}\n                            disabled={this.props.busy || !canRestartAndInterruptKernel}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.interruptKernel', 'Interrupt IPython kernel')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.Interrupt}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={addCell}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.addNewCell', 'Insert cell')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.InsertBelow}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.clearAllOutputs}\n                            disabled={!this.props.cellCount}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.clearAllOutput', 'Clear All Output')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.ClearAllOutput}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={toggleVariableExplorer}\n                            className=\"native-button\"\n                            tooltip={variableExplorerTooltip}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.VariableExplorer}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={save}\n                            disabled={!this.props.dirty}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.save', 'Save File')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.SaveAs}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.export}\n                            disabled={!this.props.cellCount || this.props.busy}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.exportAsPythonFileTooltip', 'Save As Python File')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.ExportToPython}\n                            />\n                        </ImageButton>\n                    </div>\n                    <KernelSelection\n                        baseTheme={this.props.baseTheme}\n                        font={this.props.font}\n                        kernel={this.props.kernel}\n                        selectServer={selectServer}\n                        selectKernel={selectKernel}\n                    />\n                </div>\n                <div className=\"toolbar-divider\" />\n            </div>\n        );\n    }\n}\n\nexport const ToolbarComponent = connect(mapStateToProps, actionCreators)(Toolbar);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { OSType } from '../../client/common/utils/platform';\nimport { NativeKeyboardCommandTelemetry, NativeMouseCommandTelemetry } from '../../client/datascience/constants';\nimport { buildSettingsCss } from '../interactive-common/buildSettingsCss';\nimport { ContentPanel, IContentPanelProps } from '../interactive-common/contentPanel';\nimport { handleLinkClick } from '../interactive-common/handlers';\nimport {\n    activeDebugState,\n    DebugState,\n    getSelectedAndFocusedInfo,\n    ICellViewModel,\n    IMainState\n} from '../interactive-common/mainState';\nimport { IMainWithVariables, IStore } from '../interactive-common/redux/store';\nimport { IVariablePanelProps, VariablePanel } from '../interactive-common/variablePanel';\nimport { getOSType } from '../react-common/constants';\nimport { ErrorBoundary } from '../react-common/errorBoundary';\nimport { getLocString } from '../react-common/locReactSide';\nimport { Progress } from '../react-common/progress';\nimport { AddCellLine } from './addCellLine';\nimport { getConnectedNativeCell } from './nativeCell';\nimport './nativeEditor.less';\nimport { actionCreators } from './redux/actions';\nimport { ToolbarComponent } from './toolbar';\n\ntype INativeEditorProps = IMainWithVariables & typeof actionCreators;\n\nfunction mapStateToProps(state: IStore): IMainWithVariables {\n    return { ...state.main, variableState: state.variables };\n}\n\nconst ConnectedNativeCell = getConnectedNativeCell();\n\nexport class NativeEditor extends React.Component<INativeEditorProps> {\n    private renderCount: number = 0;\n    private waitingForLoadRender = true;\n    private mainPanelToolbarRef: React.RefObject<HTMLDivElement> = React.createRef();\n\n    constructor(props: INativeEditorProps) {\n        super(props);\n        this.insertAboveFirst = this.insertAboveFirst.bind(this);\n    }\n\n    public componentDidMount() {\n        this.props.editorLoaded();\n        window.addEventListener('keydown', this.mainKeyDown);\n        window.addEventListener('resize', () => this.forceUpdate(), true);\n        document.addEventListener('click', this.linkClick, true);\n    }\n\n    public componentWillUnmount() {\n        window.removeEventListener('keydown', this.mainKeyDown);\n        window.removeEventListener('resize', () => this.forceUpdate());\n        document.removeEventListener('click', this.linkClick);\n        this.props.editorUnmounted();\n    }\n\n    public componentDidUpdate(prevProps: IMainState) {\n        if (this.props.loaded && !prevProps.loaded && this.waitingForLoadRender) {\n            this.waitingForLoadRender = false;\n            // After this render is complete (see this SO)\n            // https://stackoverflow.com/questions/26556436/react-after-render-code,\n            // indicate we are done loading. We want to wait for the render\n            // so we get accurate timing on first launch.\n            setTimeout(() => {\n                window.requestAnimationFrame(() => {\n                    this.props.loadedAllCells();\n                });\n            });\n        }\n    }\n\n    public render() {\n        const dynamicFont: React.CSSProperties = {\n            fontSize: this.props.font.size,\n            fontFamily: this.props.font.family\n        };\n\n        // If in test mode, update our count. Use this to determine how many renders a normal update takes.\n        if (this.props.testMode) {\n            this.renderCount = this.renderCount + 1;\n        }\n\n        // Update the state controller with our new state\n        const progressBar = (this.props.busy || !this.props.loaded) && !this.props.testMode ? <Progress /> : undefined;\n        const addCellLine =\n            this.props.cellVMs.length === 0 ? null : (\n                <AddCellLine\n                    includePlus={true}\n                    className=\"add-cell-line-top\"\n                    click={this.insertAboveFirst}\n                    baseTheme={this.props.baseTheme}\n                />\n            );\n\n        return (\n            <div id=\"main-panel\" role=\"Main\" style={dynamicFont}>\n                <div className=\"styleSetter\">\n                    <style>{`${this.props.rootCss ? this.props.rootCss : ''}\n${buildSettingsCss(this.props.settings)}`}</style>\n                </div>\n                <header ref={this.mainPanelToolbarRef} id=\"main-panel-toolbar\">\n                    {this.renderToolbarPanel()}\n                    {progressBar}\n                </header>\n                <section\n                    id=\"main-panel-variable\"\n                    aria-label={getLocString('DataScience.collapseVariableExplorerLabel', 'Variables')}\n                >\n                    {this.renderVariablePanel(this.props.baseTheme)}\n                </section>\n                <main id=\"main-panel-content\">\n                    {addCellLine}\n                    {this.renderContentPanel(this.props.baseTheme)}\n                </main>\n            </div>\n        );\n    }\n\n    private insertAboveFirst() {\n        setTimeout(() => this.props.insertAboveFirst(), 1);\n    }\n    private renderToolbarPanel() {\n        return <ToolbarComponent></ToolbarComponent>;\n    }\n\n    private renderVariablePanel(baseTheme: string) {\n        if (this.props.variableState.visible) {\n            const variableProps = this.getVariableProps(baseTheme);\n            return <VariablePanel {...variableProps} />;\n        }\n\n        return null;\n    }\n\n    private renderContentPanel(baseTheme: string) {\n        // Skip if the tokenizer isn't finished yet. It needs\n        // to finish loading so our code editors work.\n        if (!this.props.monacoReady && !this.props.testMode) {\n            return null;\n        }\n\n        // Otherwise render our cells.\n        const contentProps = this.getContentProps(baseTheme);\n        return <ContentPanel {...contentProps} />;\n    }\n\n    private getContentProps = (baseTheme: string): IContentPanelProps => {\n        return {\n            baseTheme: baseTheme,\n            cellVMs: this.props.cellVMs,\n            testMode: this.props.testMode,\n            codeTheme: this.props.codeTheme,\n            submittedText: this.props.submittedText,\n            skipNextScroll: this.props.skipNextScroll ? true : false,\n            editable: true,\n            renderCell: this.renderCell,\n            scrollToBottom: this.scrollDiv,\n            scrollBeyondLastLine: this.props.settings\n                ? this.props.settings.extraSettings.editor.scrollBeyondLastLine\n                : false\n        };\n    };\n    private getVariableProps = (baseTheme: string): IVariablePanelProps => {\n        let toolbarHeight = 0;\n        if (this.mainPanelToolbarRef.current) {\n            toolbarHeight = this.mainPanelToolbarRef.current.offsetHeight;\n        }\n        return {\n            variables: this.props.variableState.variables,\n            containerHeight: this.props.variableState.containerHeight,\n            gridHeight: this.props.variableState.gridHeight,\n            debugging: this.props.debugging,\n            busy: this.props.busy,\n            showDataExplorer: this.props.showDataViewer,\n            skipDefault: this.props.skipDefault,\n            testMode: this.props.testMode,\n            closeVariableExplorer: this.props.toggleVariableExplorer,\n            setVariableExplorerHeight: this.props.setVariableExplorerHeight,\n            baseTheme: baseTheme,\n            pageIn: this.pageInVariableData,\n            fontSize: this.props.font.size,\n            executionCount: this.props.currentExecutionCount,\n            offsetHeight: toolbarHeight,\n            supportsDebugging:\n                this.props.settings && this.props.settings.variableOptions\n                    ? this.props.settings.variableOptions.enableDuringDebugger\n                    : false\n        };\n    };\n\n    private pageInVariableData = (startIndex: number, pageSize: number) => {\n        this.props.getVariableData(this.props.currentExecutionCount, startIndex, pageSize);\n    };\n\n    // tslint:disable-next-line: cyclomatic-complexity\n    private mainKeyDown = (event: KeyboardEvent) => {\n        // Handler for key down presses in the main panel\n        switch (event.key) {\n            // tslint:disable-next-line: no-suspicious-comment\n            // TODO: How to have this work for when the keyboard shortcuts are changed?\n            case 's': {\n                if ((event.ctrlKey && getOSType() !== OSType.OSX) || (event.metaKey && getOSType() === OSType.OSX)) {\n                    // This is save, save our cells\n                    this.props.save();\n                    this.props.sendCommand(NativeKeyboardCommandTelemetry.Save);\n                }\n                break;\n            }\n            case 'z':\n            case 'Z':\n                if (\n                    !getSelectedAndFocusedInfo(this.props).focusedCellId &&\n                    !this.props.settings?.extraSettings.useCustomEditorApi\n                ) {\n                    if (event.shiftKey && !event.ctrlKey && !event.altKey) {\n                        event.stopPropagation();\n                        this.props.redo();\n                        this.props.sendCommand(NativeKeyboardCommandTelemetry.Redo);\n                    } else if (!event.shiftKey && !event.altKey && !event.ctrlKey) {\n                        event.stopPropagation();\n                        this.props.undo();\n                        this.props.sendCommand(NativeKeyboardCommandTelemetry.Undo);\n                    }\n                }\n                break;\n\n            case 'F10':\n                if (this.props.debugging) {\n                    // Only allow step if debugging in break mode\n                    const debuggingCell = this.props.cellVMs.find((cvm) => cvm.runningByLine === DebugState.Break);\n                    if (debuggingCell) {\n                        this.props.step(debuggingCell.cell.id);\n                    }\n                    event.stopPropagation();\n                } else {\n                    // Otherwise if not debugging, run by line the current focused cell\n                    const focusedCell = getSelectedAndFocusedInfo(this.props).focusedCellId;\n                    if (focusedCell) {\n                        this.props.runByLine(focusedCell);\n                    }\n                }\n                break;\n            case 'F5':\n                if (this.props.debugging) {\n                    // Only allow continue if debugging in break mode\n                    const debuggingCell = this.props.cellVMs.find((cvm) => cvm.runningByLine === DebugState.Break);\n                    if (debuggingCell) {\n                        this.props.continue(debuggingCell.cell.id);\n                    }\n                    event.stopPropagation();\n                }\n                break;\n            default:\n                break;\n        }\n    };\n\n    // private copyToClipboard = (cellId: string) => {\n    //     const cell = this.props.findCell(cellId);\n    //     if (cell) {\n    //         // Need to do this in this process so it copies to the user's clipboard and not\n    //         // the remote clipboard where the extension is running\n    //         const textArea = document.createElement('textarea');\n    //         textArea.value = concatMultilineString(cell.cell.data.source);\n    //         document.body.appendChild(textArea);\n    //         textArea.select();\n    //         document.execCommand('Copy');\n    //         textArea.remove();\n    //     }\n    // }\n\n    // private pasteFromClipboard = (cellId: string) => {\n    //     const editedCells = this.props.cellVMs;\n    //     const index = editedCells.findIndex(x => x.cell.id === cellId) + 1;\n\n    //     if (index > -1) {\n    //         const textArea = document.createElement('textarea');\n    //         document.body.appendChild(textArea);\n    //         textArea.select();\n    //         document.execCommand('Paste');\n    //         editedCells[index].cell.data.source = textArea.value.split(/\\r?\\n/);\n    //         textArea.remove();\n    //     }\n\n    //     this.setState({\n    //         cellVMs: editedCells\n    //     });\n    // }\n\n    private renderCell = (cellVM: ICellViewModel, index: number): JSX.Element | null => {\n        // Don't render until we have settings\n        if (!this.props.settings || !this.props.editorOptions) {\n            return null;\n        }\n        const addNewCell = () => {\n            setTimeout(() => this.props.insertBelow(cellVM.cell.id), 1);\n            this.props.sendCommand(NativeMouseCommandTelemetry.AddToEnd);\n        };\n        const firstLine = index === 0;\n        const lastLine =\n            index === this.props.cellVMs.length - 1 ? (\n                <AddCellLine\n                    includePlus={true}\n                    baseTheme={this.props.baseTheme}\n                    className=\"add-cell-line-cell\"\n                    click={addNewCell}\n                />\n            ) : null;\n\n        const otherCellRunningByLine = this.props.cellVMs.find(\n            (cvm) => activeDebugState(cvm.runningByLine) && cvm.cell.id !== cellVM.cell.id\n        );\n        const maxOutputSize = this.props.settings.maxOutputSize;\n        const outputSizeLimit = 10000;\n        const maxTextSize =\n            maxOutputSize && maxOutputSize < outputSizeLimit && maxOutputSize > 0\n                ? maxOutputSize\n                : this.props.settings.enableScrollingForCellOutputs\n                ? 400\n                : undefined;\n\n        return (\n            <div key={cellVM.cell.id} id={cellVM.cell.id}>\n                <ErrorBoundary>\n                    <ConnectedNativeCell\n                        role=\"listitem\"\n                        maxTextSize={maxTextSize}\n                        enableScroll={this.props.settings.enableScrollingForCellOutputs}\n                        testMode={this.props.testMode}\n                        cellVM={cellVM}\n                        baseTheme={this.props.baseTheme}\n                        codeTheme={this.props.codeTheme}\n                        monacoTheme={this.props.monacoTheme}\n                        lastCell={lastLine !== null}\n                        firstCell={firstLine}\n                        font={this.props.font}\n                        allowUndo={this.props.undoStack.length > 0}\n                        editorOptions={this.props.editorOptions}\n                        enableGather={this.props.settings.enableGather}\n                        themeMatplotlibPlots={this.props.settings.themeMatplotlibPlots}\n                        // Focus pending does not apply to native editor.\n                        focusPending={0}\n                        busy={this.props.busy}\n                        useCustomEditorApi={this.props.settings?.extraSettings.useCustomEditorApi}\n                        runningByLine={cellVM.runningByLine}\n                        supportsRunByLine={\n                            this.props.settings?.variableOptions?.enableDuringDebugger\n                                ? otherCellRunningByLine === undefined\n                                : false\n                        }\n                        language={this.props.kernel.language}\n                    />\n                </ErrorBoundary>\n                {lastLine}\n            </div>\n        );\n    };\n\n    private scrollDiv = (_div: HTMLDivElement) => {\n        // Doing nothing for now. This should be implemented once redux refactor is done.\n    };\n\n    private linkClick = (ev: MouseEvent) => {\n        handleLinkClick(ev, this.props.linkClick);\n    };\n}\n\n// Main export, return a redux connected editor\nexport function getConnectedNativeEditor() {\n    return connect(mapStateToProps, actionCreators)(NativeEditor);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport { CssMessages } from '../../../../client/datascience/messages';\nimport { IDataScienceExtraSettings } from '../../../../client/datascience/types';\nimport { getSelectedAndFocusedInfo, IMainState } from '../../../interactive-common/mainState';\nimport { postActionToExtension } from '../../../interactive-common/redux/helpers';\nimport { Helpers } from '../../../interactive-common/redux/reducers/helpers';\nimport { ICellAction, ICellAndCursorAction } from '../../../interactive-common/redux/reducers/types';\nimport { computeEditorOptions } from '../../../react-common/settingsReactSide';\nimport { NativeEditorReducerArg } from '../mapping';\n\nexport namespace Effects {\n    export function focusCell(arg: NativeEditorReducerArg<ICellAndCursorAction>): IMainState {\n        // Do nothing if already the focused cell.\n        let selectionInfo = getSelectedAndFocusedInfo(arg.prevState);\n        if (selectionInfo.focusedCellId !== arg.payload.data.cellId) {\n            let prevState = arg.prevState;\n\n            // Ensure we unfocus & unselect all cells.\n            while (selectionInfo.focusedCellId || selectionInfo.selectedCellId) {\n                selectionInfo = getSelectedAndFocusedInfo(prevState);\n                // First find the old focused cell and unfocus it\n                let removeFocusIndex = selectionInfo.focusedCellIndex;\n                if (typeof removeFocusIndex !== 'number') {\n                    removeFocusIndex = selectionInfo.selectedCellIndex;\n                }\n\n                if (typeof removeFocusIndex === 'number') {\n                    prevState = unfocusCell({\n                        ...arg,\n                        prevState,\n                        payload: {\n                            ...arg.payload,\n                            data: { cellId: prevState.cellVMs[removeFocusIndex].cell.id }\n                        }\n                    });\n                    prevState = deselectCell({\n                        ...arg,\n                        prevState,\n                        payload: { ...arg.payload, data: { cellId: prevState.cellVMs[removeFocusIndex].cell.id } }\n                    });\n                }\n            }\n\n            const newVMs = [...prevState.cellVMs];\n\n            // Add focus on new cell\n            const addFocusIndex = newVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n            if (addFocusIndex >= 0) {\n                newVMs[addFocusIndex] = {\n                    ...newVMs[addFocusIndex],\n                    focused: true,\n                    selected: true,\n                    cursorPos: arg.payload.data.cursorPos\n                };\n            }\n\n            return {\n                ...prevState,\n                cellVMs: newVMs\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function unfocusCell(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        // Unfocus the cell\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        const selectionInfo = getSelectedAndFocusedInfo(arg.prevState);\n        if (index >= 0 && selectionInfo.focusedCellId === arg.payload.data.cellId) {\n            const newVMs = [...arg.prevState.cellVMs];\n            const current = arg.prevState.cellVMs[index];\n            const newCell = {\n                ...current,\n                focused: false\n            };\n\n            // tslint:disable-next-line: no-any\n            newVMs[index] = Helpers.asCellViewModel(newCell); // This is because IMessageCell doesn't fit in here\n\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs\n            };\n        } else if (index >= 0) {\n            // Dont change focus state if not the focused cell. Just update the code.\n            const newVMs = [...arg.prevState.cellVMs];\n            const current = arg.prevState.cellVMs[index];\n            const newCell = {\n                ...current\n            };\n\n            // tslint:disable-next-line: no-any\n            newVMs[index] = newCell as any; // This is because IMessageCell doesn't fit in here\n\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function deselectCell(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        const selectionInfo = getSelectedAndFocusedInfo(arg.prevState);\n        if (index >= 0 && selectionInfo.selectedCellId === arg.payload.data.cellId) {\n            const newVMs = [...arg.prevState.cellVMs];\n            const target = arg.prevState.cellVMs[index];\n            const newCell = {\n                ...target,\n                selected: false\n            };\n\n            // tslint:disable-next-line: no-any\n            newVMs[index] = newCell as any; // This is because IMessageCell doesn't fit in here\n\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    /**\n     * Select a cell.\n     *\n     * @param {boolean} [shouldFocusCell] If provided, then will control the focus behavior of the cell. (defaults to focus state of previously selected cell).\n     */\n    export function selectCell(\n        arg: NativeEditorReducerArg<ICellAndCursorAction>,\n        shouldFocusCell?: boolean\n    ): IMainState {\n        // Skip doing anything if already selected.\n        const selectionInfo = getSelectedAndFocusedInfo(arg.prevState);\n        if (arg.payload.data.cellId !== selectionInfo.selectedCellId) {\n            let prevState = arg.prevState;\n            const addIndex = prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n            const someOtherCellWasFocusedAndSelected =\n                selectionInfo.focusedCellId === selectionInfo.selectedCellId && !!selectionInfo.focusedCellId;\n            // First find the old focused cell and unfocus it\n            let removeFocusIndex = arg.prevState.cellVMs.findIndex((c) => c.cell.id === selectionInfo.focusedCellId);\n            if (removeFocusIndex < 0) {\n                removeFocusIndex = arg.prevState.cellVMs.findIndex((c) => c.cell.id === selectionInfo.selectedCellId);\n            }\n\n            if (removeFocusIndex >= 0) {\n                prevState = unfocusCell({\n                    ...arg,\n                    prevState,\n                    payload: {\n                        ...arg.payload,\n                        data: { cellId: prevState.cellVMs[removeFocusIndex].cell.id }\n                    }\n                });\n                prevState = deselectCell({\n                    ...arg,\n                    prevState,\n                    payload: { ...arg.payload, data: { cellId: prevState.cellVMs[removeFocusIndex].cell.id } }\n                });\n            }\n\n            const newVMs = [...prevState.cellVMs];\n            if (addIndex >= 0 && arg.payload.data.cellId !== selectionInfo.selectedCellId) {\n                newVMs[addIndex] = {\n                    ...newVMs[addIndex],\n                    focused:\n                        typeof shouldFocusCell === 'boolean' ? shouldFocusCell : someOtherCellWasFocusedAndSelected,\n                    selected: true,\n                    cursorPos: arg.payload.data.cursorPos\n                };\n            }\n\n            return {\n                ...prevState,\n                cellVMs: newVMs\n            };\n        }\n        return arg.prevState;\n    }\n\n    export function toggleLineNumbers(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        if (index >= 0) {\n            const newVMs = [...arg.prevState.cellVMs];\n            newVMs[index] = { ...newVMs[index], showLineNumbers: !newVMs[index].showLineNumbers };\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs\n            };\n        }\n        return arg.prevState;\n    }\n\n    export function toggleOutput(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        if (index >= 0) {\n            const newVMs = [...arg.prevState.cellVMs];\n            newVMs[index] = { ...newVMs[index], hideOutput: !newVMs[index].hideOutput };\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs\n            };\n        }\n        return arg.prevState;\n    }\n\n    export function updateSettings(arg: NativeEditorReducerArg<string>): IMainState {\n        // String arg should be the IDataScienceExtraSettings\n        const newSettingsJSON = JSON.parse(arg.payload.data);\n        const newSettings = <IDataScienceExtraSettings>newSettingsJSON;\n        const newEditorOptions = computeEditorOptions(newSettings);\n        const newFontFamily = newSettings.extraSettings\n            ? newSettings.extraSettings.editor.fontFamily\n            : arg.prevState.font.family;\n        const newFontSize = newSettings.extraSettings\n            ? newSettings.extraSettings.editor.fontSize\n            : arg.prevState.font.size;\n\n        // Ask for new theme data if necessary\n        if (\n            newSettings &&\n            newSettings.extraSettings &&\n            newSettings.extraSettings.theme !== arg.prevState.vscodeThemeName\n        ) {\n            const knownDark = Helpers.computeKnownDark(newSettings);\n            // User changed the current theme. Rerender\n            postActionToExtension(arg, CssMessages.GetCssRequest, { isDark: knownDark });\n            postActionToExtension(arg, CssMessages.GetMonacoThemeRequest, { isDark: knownDark });\n        }\n\n        return {\n            ...arg.prevState,\n            settings: newSettings,\n            editorOptions: { ...newEditorOptions, lineDecorationsWidth: 5 },\n            font: {\n                size: newFontSize,\n                family: newFontFamily\n            }\n        };\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\n// tslint:disable-next-line: no-require-imports no-var-requires\nconst cloneDeep = require('lodash/cloneDeep');\nimport * as uuid from 'uuid/v4';\nimport { DebugProtocol } from 'vscode-debugprotocol';\nimport { InteractiveWindowMessages } from '../../../../client/datascience/interactive-common/interactiveWindowTypes';\nimport { CellState, ICell } from '../../../../client/datascience/types';\nimport { concatMultilineStringInput } from '../../../common';\nimport { createCellFrom } from '../../../common/cellFactory';\nimport {\n    CursorPos,\n    DebugState,\n    getSelectedAndFocusedInfo,\n    ICellViewModel,\n    IMainState\n} from '../../../interactive-common/mainState';\nimport { postActionToExtension, queueIncomingActionWithPayload } from '../../../interactive-common/redux/helpers';\nimport { Helpers } from '../../../interactive-common/redux/reducers/helpers';\nimport { Transfer } from '../../../interactive-common/redux/reducers/transfer';\nimport {\n    CommonActionType,\n    ICellAction,\n    IChangeCellTypeAction,\n    IExecuteAction\n} from '../../../interactive-common/redux/reducers/types';\nimport { NativeEditorReducerArg } from '../mapping';\nimport { Effects } from './effects';\n\nexport namespace Execution {\n    function executeRange(\n        prevState: IMainState,\n        cellIds: string[],\n        // tslint:disable-next-line: no-any\n        originalArg: NativeEditorReducerArg<any>\n    ): IMainState {\n        const newVMs = [...prevState.cellVMs];\n        const cellIdsToExecute: string[] = [];\n        cellIds.forEach((cellId) => {\n            const index = prevState.cellVMs.findIndex((cell) => cell.cell.id === cellId);\n            if (index === -1) {\n                return;\n            }\n            const orig = prevState.cellVMs[index];\n            // noop if the submitted code is just a cell marker\n            if (orig.cell.data.cell_type === 'code' && concatMultilineStringInput(orig.cell.data.source)) {\n                // When cloning cells, preserve the metadata (hence deep clone).\n                const clonedCell = cloneDeep(orig.cell.data);\n                // Update our input cell to be in progress again and clear outputs\n                clonedCell.outputs = [];\n                newVMs[index] = Helpers.asCellViewModel({\n                    ...orig,\n                    cell: { ...orig.cell, state: CellState.executing, data: clonedCell }\n                });\n                cellIdsToExecute.push(orig.cell.id);\n            }\n        });\n\n        // If any cells to execute, execute them all\n        if (cellIdsToExecute.length > 0) {\n            // Send a message if a code cell\n            postActionToExtension(originalArg, InteractiveWindowMessages.ReExecuteCells, {\n                cellIds: cellIdsToExecute\n            });\n        }\n\n        return {\n            ...prevState,\n            cellVMs: newVMs\n        };\n    }\n\n    export function executeAbove(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        if (index > 0) {\n            // Get all cellIds until `index`.\n            const cellIds = arg.prevState.cellVMs.slice(0, index).map((cellVm) => cellVm.cell.id);\n            return executeRange(arg.prevState, cellIds, arg);\n        }\n        return arg.prevState;\n    }\n\n    export function executeCellAndAdvance(arg: NativeEditorReducerArg<IExecuteAction>): IMainState {\n        queueIncomingActionWithPayload(arg, CommonActionType.EXECUTE_CELL, {\n            cellId: arg.payload.data.cellId,\n            moveOp: arg.payload.data.moveOp\n        });\n        if (arg.payload.data.moveOp === 'add') {\n            const newCellId = uuid();\n            queueIncomingActionWithPayload(arg, CommonActionType.INSERT_BELOW, {\n                cellId: arg.payload.data.cellId,\n                newCellId\n            });\n            queueIncomingActionWithPayload(arg, CommonActionType.FOCUS_CELL, {\n                cellId: newCellId,\n                cursorPos: CursorPos.Current\n            });\n        }\n        return arg.prevState;\n    }\n\n    export function executeCell(arg: NativeEditorReducerArg<IExecuteAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        if (index >= 0 && arg.payload.data.cellId) {\n            // Start executing this cell.\n            const executeResult = executeRange(arg.prevState, [arg.payload.data.cellId], arg);\n\n            // Modify the execute result if moving\n            if (arg.payload.data.moveOp === 'select') {\n                // Select the cell below this one, but don't focus it\n                if (index < arg.prevState.cellVMs.length - 1) {\n                    return Effects.selectCell(\n                        {\n                            ...arg,\n                            prevState: {\n                                ...executeResult\n                            },\n                            payload: {\n                                ...arg.payload,\n                                data: {\n                                    ...arg.payload.data,\n                                    cellId: arg.prevState.cellVMs[index + 1].cell.id,\n                                    cursorPos: CursorPos.Current\n                                }\n                            }\n                        },\n                        // Select the next cell, but do not set focus to it.\n                        false\n                    );\n                }\n                return executeResult;\n            } else {\n                return executeResult;\n            }\n        }\n        return arg.prevState;\n    }\n\n    export function executeCellAndBelow(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        if (index >= 0) {\n            // Get all cellIds starting from `index`.\n            const cellIds = arg.prevState.cellVMs.slice(index).map((cellVm) => cellVm.cell.id);\n            return executeRange(arg.prevState, cellIds, arg);\n        }\n        return arg.prevState;\n    }\n\n    export function executeAllCells(arg: NativeEditorReducerArg): IMainState {\n        if (arg.prevState.cellVMs.length > 0) {\n            const cellIds = arg.prevState.cellVMs.map((cellVm) => cellVm.cell.id);\n            return executeRange(arg.prevState, cellIds, arg);\n        }\n        return arg.prevState;\n    }\n\n    export function executeSelectedCell(arg: NativeEditorReducerArg): IMainState {\n        // This is the same thing as executing the selected cell\n        const selectionInfo = getSelectedAndFocusedInfo(arg.prevState);\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === selectionInfo.selectedCellId);\n        if (selectionInfo.selectedCellId && index >= 0) {\n            return executeCell({\n                ...arg,\n                payload: {\n                    ...arg.payload,\n                    data: {\n                        cellId: selectionInfo.selectedCellId,\n                        moveOp: 'none'\n                    }\n                }\n            });\n        }\n\n        return arg.prevState;\n    }\n\n    export function clearAllOutputs(arg: NativeEditorReducerArg): IMainState {\n        const newList = arg.prevState.cellVMs.map((cellVM) => {\n            return Helpers.asCellViewModel({\n                ...cellVM,\n                cell: { ...cellVM.cell, data: { ...cellVM.cell.data, outputs: [], execution_count: null } }\n            });\n        });\n\n        Transfer.postModelClearOutputs(arg);\n\n        return {\n            ...arg.prevState,\n            cellVMs: newList\n        };\n    }\n\n    export function changeCellType(arg: NativeEditorReducerArg<IChangeCellTypeAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        if (index >= 0) {\n            const cellVMs = [...arg.prevState.cellVMs];\n            const current = arg.prevState.cellVMs[index];\n            const newType = current.cell.data.cell_type === 'code' ? 'markdown' : 'code';\n            const newNotebookCell = createCellFrom(current.cell.data, newType);\n            const newCell: ICellViewModel = {\n                ...current,\n                cell: {\n                    ...current.cell,\n                    data: newNotebookCell\n                }\n            };\n            cellVMs[index] = newCell;\n            Transfer.changeCellType(arg, cellVMs[index].cell);\n\n            return {\n                ...arg.prevState,\n                cellVMs\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function undo(arg: NativeEditorReducerArg): IMainState {\n        if (arg.prevState.undoStack.length > 0) {\n            // Pop one off of our undo stack and update our redo\n            const cells = arg.prevState.undoStack[arg.prevState.undoStack.length - 1];\n            const undoStack = arg.prevState.undoStack.slice(0, arg.prevState.undoStack.length - 1);\n            const redoStack = Helpers.pushStack(arg.prevState.redoStack, arg.prevState.cellVMs);\n            postActionToExtension(arg, InteractiveWindowMessages.Undo);\n            return {\n                ...arg.prevState,\n                cellVMs: cells,\n                undoStack: undoStack,\n                redoStack: redoStack,\n                skipNextScroll: true\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function redo(arg: NativeEditorReducerArg): IMainState {\n        if (arg.prevState.redoStack.length > 0) {\n            // Pop one off of our redo stack and update our undo\n            const cells = arg.prevState.redoStack[arg.prevState.redoStack.length - 1];\n            const redoStack = arg.prevState.redoStack.slice(0, arg.prevState.redoStack.length - 1);\n            const undoStack = Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs);\n            postActionToExtension(arg, InteractiveWindowMessages.Redo);\n            return {\n                ...arg.prevState,\n                cellVMs: cells,\n                undoStack: undoStack,\n                redoStack: redoStack,\n                skipNextScroll: true\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function continueExec(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((cv) => cv.cell.id === arg.payload.data.cellId);\n        if (index >= 0) {\n            postActionToExtension(arg, InteractiveWindowMessages.Continue);\n        }\n        return arg.prevState;\n    }\n\n    export function step(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((cv) => cv.cell.id === arg.payload.data.cellId);\n        if (index >= 0) {\n            postActionToExtension(arg, InteractiveWindowMessages.Step);\n        }\n        return arg.prevState;\n    }\n\n    export function runByLine(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((cv) => cv.cell.id === arg.payload.data.cellId);\n        if (index >= 0) {\n            postActionToExtension(arg, InteractiveWindowMessages.RunByLine, {\n                cell: arg.prevState.cellVMs[index].cell,\n                expectedExecutionCount: arg.prevState.currentExecutionCount + 1\n            });\n            const newVM = {\n                ...arg.prevState.cellVMs[index],\n                runningByLine: DebugState.Run\n            };\n            const newVMs = [...arg.prevState.cellVMs];\n            newVMs[index] = newVM;\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs\n            };\n        }\n        return arg.prevState;\n    }\n\n    export function handleBreakState(\n        arg: NativeEditorReducerArg<{ frames: DebugProtocol.StackFrame[]; cell: ICell }>\n    ): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((cv) => cv.cell.id === arg.payload.data.cell.id);\n        if (index >= 0) {\n            const newVM = {\n                ...arg.prevState.cellVMs[index],\n                runningByLine: DebugState.Break,\n                currentStack: arg.payload.data.frames\n            };\n            const newVMs = [...arg.prevState.cellVMs];\n            newVMs[index] = newVM;\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs\n            };\n        }\n        return arg.prevState;\n    }\n\n    export function handleContinue(arg: NativeEditorReducerArg<ICell>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((cv) => cv.cell.id === arg.payload.data.id);\n        if (index >= 0) {\n            const newVM = {\n                ...arg.prevState.cellVMs[index],\n                runningByLine: DebugState.Run,\n                currentStack: undefined\n            };\n            const newVMs = [...arg.prevState.cellVMs];\n            newVMs[index] = newVM;\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs\n            };\n        }\n        return arg.prevState;\n    }\n\n    export function startDebugging(arg: NativeEditorReducerArg): IMainState {\n        return {\n            ...arg.prevState,\n            debugging: true\n        };\n    }\n\n    export function stopDebugging(arg: NativeEditorReducerArg): IMainState {\n        // Clear out any cells that have frames\n        const index = arg.prevState.cellVMs.findIndex((cvm) => cvm.currentStack);\n        const newVMs = [...arg.prevState.cellVMs];\n        if (index >= 0) {\n            const newVM = {\n                ...newVMs[index],\n                currentStack: undefined\n            };\n            newVMs[index] = newVM;\n        }\n        return {\n            ...arg.prevState,\n            cellVMs: newVMs,\n            debugging: false\n        };\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport { CursorPos, IMainState } from '../../../interactive-common/mainState';\nimport { queueIncomingActionWithPayload } from '../../../interactive-common/redux/helpers';\nimport { Helpers } from '../../../interactive-common/redux/reducers/helpers';\nimport { Transfer } from '../../../interactive-common/redux/reducers/transfer';\nimport { CommonActionType, ICellAction, ICodeAction } from '../../../interactive-common/redux/reducers/types';\nimport { NativeEditorReducerArg } from '../mapping';\n\nexport namespace Movement {\n    export function swapCells(arg: NativeEditorReducerArg<{ firstCellId: string; secondCellId: string }>) {\n        const newVMs = [...arg.prevState.cellVMs];\n        const first = newVMs.findIndex((cvm) => cvm.cell.id === arg.payload.data.firstCellId);\n        const second = newVMs.findIndex((cvm) => cvm.cell.id === arg.payload.data.secondCellId);\n        if (first >= 0 && second >= 0 && first !== second) {\n            const temp = newVMs[first];\n            newVMs[first] = newVMs[second];\n            newVMs[second] = temp;\n            Transfer.postModelSwap(arg, arg.payload.data.firstCellId, arg.payload.data.secondCellId);\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs,\n                undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs)\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function moveCellUp(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((cvm) => cvm.cell.id === arg.payload.data.cellId);\n        if (index > 0 && arg.payload.data.cellId) {\n            return swapCells({\n                ...arg,\n                payload: {\n                    ...arg.payload,\n                    data: {\n                        firstCellId: arg.prevState.cellVMs[index - 1].cell.id,\n                        secondCellId: arg.payload.data.cellId\n                    }\n                }\n            });\n        }\n\n        return arg.prevState;\n    }\n\n    export function moveCellDown(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const newVMs = [...arg.prevState.cellVMs];\n        const index = newVMs.findIndex((cvm) => cvm.cell.id === arg.payload.data.cellId);\n        if (index < newVMs.length - 1 && arg.payload.data.cellId) {\n            return swapCells({\n                ...arg,\n                payload: {\n                    ...arg.payload,\n                    data: {\n                        firstCellId: arg.payload.data.cellId,\n                        secondCellId: arg.prevState.cellVMs[index + 1].cell.id\n                    }\n                }\n            });\n        }\n\n        return arg.prevState;\n    }\n\n    export function arrowUp(arg: NativeEditorReducerArg<ICodeAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        if (index > 0) {\n            queueIncomingActionWithPayload(arg, CommonActionType.SELECT_CELL, {\n                cellId: arg.prevState.cellVMs[index - 1].cell.id,\n                cursorPos: CursorPos.Bottom\n            });\n        }\n\n        return arg.prevState;\n    }\n\n    export function arrowDown(arg: NativeEditorReducerArg<ICodeAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        if (index < arg.prevState.cellVMs.length - 1) {\n            queueIncomingActionWithPayload(arg, CommonActionType.SELECT_CELL, {\n                cellId: arg.prevState.cellVMs[index + 1].cell.id,\n                cursorPos: CursorPos.Top\n            });\n        }\n\n        return arg.prevState;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\n\nimport { noop } from '../../../../client/common/utils/misc';\nimport {\n    IEditorContentChange,\n    ILoadAllCells,\n    NotebookModelChange\n} from '../../../../client/datascience/interactive-common/interactiveWindowTypes';\nimport { ICell, IDataScienceExtraSettings } from '../../../../client/datascience/types';\nimport { splitMultilineString } from '../../../common';\nimport {\n    createCellVM,\n    createEmptyCell,\n    CursorPos,\n    DebugState,\n    extractInputText,\n    getSelectedAndFocusedInfo,\n    ICellViewModel,\n    IMainState\n} from '../../../interactive-common/mainState';\nimport { queueIncomingActionWithPayload } from '../../../interactive-common/redux/helpers';\nimport { Helpers } from '../../../interactive-common/redux/reducers/helpers';\nimport { Transfer } from '../../../interactive-common/redux/reducers/transfer';\nimport { CommonActionType, IAddCellAction, ICellAction } from '../../../interactive-common/redux/reducers/types';\nimport { NativeEditorReducerArg } from '../mapping';\nimport { Effects } from './effects';\nimport { Execution } from './execution';\nimport { Movement } from './movement';\n\nexport namespace Creation {\n    function prepareCellVM(cell: ICell, hasBeenRun: boolean, settings?: IDataScienceExtraSettings): ICellViewModel {\n        const cellVM: ICellViewModel = createCellVM(cell, settings, true, false);\n\n        // Set initial cell visibility and collapse\n        cellVM.editable = true;\n\n        // Always have the cell input text open\n        const newText = extractInputText(cellVM, settings);\n\n        cellVM.inputBlockOpen = true;\n        cell.data.source = splitMultilineString(newText);\n        cellVM.hasBeenRun = hasBeenRun;\n\n        return cellVM;\n    }\n\n    export function addAndFocusCell(arg: NativeEditorReducerArg<IAddCellAction>): IMainState {\n        queueIncomingActionWithPayload(arg, CommonActionType.ADD_NEW_CELL, { newCellId: arg.payload.data.newCellId });\n        queueIncomingActionWithPayload(arg, CommonActionType.FOCUS_CELL, {\n            cellId: arg.payload.data.newCellId,\n            cursorPos: CursorPos.Current\n        });\n        return arg.prevState;\n    }\n\n    export function insertAboveAndFocusCell(arg: NativeEditorReducerArg<IAddCellAction & ICellAction>): IMainState {\n        queueIncomingActionWithPayload(arg, CommonActionType.INSERT_ABOVE, {\n            cellId: arg.payload.data.cellId,\n            newCellId: arg.payload.data.newCellId\n        });\n        queueIncomingActionWithPayload(arg, CommonActionType.FOCUS_CELL, {\n            cellId: arg.payload.data.newCellId,\n            cursorPos: CursorPos.Current\n        });\n        return arg.prevState;\n    }\n\n    export function insertBelowAndFocusCell(arg: NativeEditorReducerArg<IAddCellAction & ICellAction>): IMainState {\n        queueIncomingActionWithPayload(arg, CommonActionType.INSERT_BELOW, {\n            cellId: arg.payload.data.cellId,\n            newCellId: arg.payload.data.newCellId\n        });\n        queueIncomingActionWithPayload(arg, CommonActionType.FOCUS_CELL, {\n            cellId: arg.payload.data.newCellId,\n            cursorPos: CursorPos.Current\n        });\n        return arg.prevState;\n    }\n\n    export function insertAboveFirstAndFocusCell(arg: NativeEditorReducerArg<IAddCellAction>): IMainState {\n        queueIncomingActionWithPayload(arg, CommonActionType.INSERT_ABOVE_FIRST, {\n            newCellId: arg.payload.data.newCellId\n        });\n        queueIncomingActionWithPayload(arg, CommonActionType.FOCUS_CELL, {\n            cellId: arg.payload.data.newCellId,\n            cursorPos: CursorPos.Current\n        });\n        return arg.prevState;\n    }\n\n    function insertAbove(arg: NativeEditorReducerArg<ICellAction & { vm: ICellViewModel }>): IMainState {\n        const newList = [...arg.prevState.cellVMs];\n        const newVM = arg.payload.data.vm;\n\n        // Find the position where we want to insert\n        let position = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        if (position >= 0) {\n            newList.splice(position, 0, newVM);\n        } else {\n            newList.splice(0, 0, newVM);\n            position = 0;\n        }\n\n        const result = {\n            ...arg.prevState,\n            undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs),\n            cellVMs: newList\n        };\n\n        // Send a messsage that we inserted a cell\n        Transfer.postModelInsert(arg, position, newVM.cell, arg.payload.data.cellId);\n\n        return result;\n    }\n\n    export function insertExistingAbove(arg: NativeEditorReducerArg<ICellAction & { cell: ICell }>): IMainState {\n        const newVM = prepareCellVM(arg.payload.data.cell, false, arg.prevState.settings);\n        return insertAbove({\n            ...arg,\n            payload: {\n                ...arg.payload,\n                data: {\n                    cellId: arg.payload.data.cellId,\n                    vm: newVM\n                }\n            }\n        });\n    }\n\n    export function insertNewAbove(arg: NativeEditorReducerArg<ICellAction & IAddCellAction>): IMainState {\n        const newVM = prepareCellVM(createEmptyCell(arg.payload.data.newCellId, null), false, arg.prevState.settings);\n        return insertAbove({\n            ...arg,\n            payload: {\n                ...arg.payload,\n                data: {\n                    cellId: arg.payload.data.cellId,\n                    vm: newVM\n                }\n            }\n        });\n    }\n\n    export function insertBelow(arg: NativeEditorReducerArg<ICellAction & IAddCellAction>): IMainState {\n        const newVM = prepareCellVM(createEmptyCell(arg.payload.data.newCellId, null), false, arg.prevState.settings);\n        const newList = [...arg.prevState.cellVMs];\n\n        // Find the position where we want to insert\n        let position = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        if (position >= 0) {\n            position += 1;\n            newList.splice(position, 0, newVM);\n        } else {\n            newList.push(newVM);\n            position = newList.length;\n        }\n\n        const result = {\n            ...arg.prevState,\n            undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs),\n            cellVMs: newList\n        };\n\n        // Send a messsage that we inserted a cell\n        Transfer.postModelInsert(arg, position, newVM.cell, arg.payload.data.cellId);\n\n        return result;\n    }\n\n    export function insertAboveFirst(arg: NativeEditorReducerArg<IAddCellAction>): IMainState {\n        // Get the first cell id\n        const firstCellId = arg.prevState.cellVMs.length > 0 ? arg.prevState.cellVMs[0].cell.id : undefined;\n\n        // Do what an insertAbove does\n        return insertNewAbove({\n            ...arg,\n            payload: { ...arg.payload, data: { cellId: firstCellId, newCellId: arg.payload.data.newCellId } }\n        });\n    }\n\n    export function addNewCell(arg: NativeEditorReducerArg<IAddCellAction>): IMainState {\n        // Do the same thing that an insertBelow does using the currently selected cell.\n        return insertBelow({\n            ...arg,\n            payload: {\n                ...arg.payload,\n                data: {\n                    cellId: getSelectedAndFocusedInfo(arg.prevState).selectedCellId,\n                    newCellId: arg.payload.data.newCellId\n                }\n            }\n        });\n    }\n\n    export function startCell(arg: NativeEditorReducerArg<ICell>): IMainState {\n        return Helpers.updateOrAdd(arg, (c: ICell, s: IMainState) => prepareCellVM(c, true, s.settings));\n    }\n\n    export function updateCell(arg: NativeEditorReducerArg<ICell>): IMainState {\n        return Helpers.updateOrAdd(arg, (c: ICell, s: IMainState) => prepareCellVM(c, true, s.settings));\n    }\n\n    export function finishCell(arg: NativeEditorReducerArg<ICell>): IMainState {\n        return Helpers.updateOrAdd(arg, (c: ICell, s: IMainState) => prepareCellVM(c, true, s.settings));\n    }\n\n    export function deleteAllCells(arg: NativeEditorReducerArg<IAddCellAction>): IMainState {\n        // Just leave one single blank empty cell\n        const newVM: ICellViewModel = {\n            cell: createEmptyCell(arg.payload.data.newCellId, null),\n            editable: true,\n            inputBlockOpen: true,\n            inputBlockShow: true,\n            inputBlockText: '',\n            inputBlockCollapseNeeded: false,\n            selected: false,\n            focused: false,\n            cursorPos: CursorPos.Current,\n            hasBeenRun: false,\n            scrollCount: 0,\n            runningByLine: DebugState.Design\n        };\n\n        Transfer.postModelRemoveAll(arg, newVM.cell.id);\n\n        return {\n            ...arg.prevState,\n            cellVMs: [newVM],\n            undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs)\n        };\n    }\n\n    export function applyCellEdit(\n        arg: NativeEditorReducerArg<{ id: string; changes: IEditorContentChange[] }>\n    ): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.id);\n        if (index >= 0) {\n            const newVM = { ...arg.prevState.cellVMs[index] };\n            arg.payload.data.changes.forEach((c) => {\n                const source = newVM.inputBlockText;\n                const before = source.slice(0, c.rangeOffset);\n                // tslint:disable-next-line: restrict-plus-operands\n                const after = source.slice(c.rangeOffset + c.rangeLength);\n                newVM.inputBlockText = `${before}${c.text}${after}`;\n            });\n            newVM.codeVersion = newVM.codeVersion ? newVM.codeVersion + 1 : 1;\n            newVM.cell.data.source = splitMultilineString(newVM.inputBlockText);\n            newVM.cursorPos = arg.payload.data.changes[0].position;\n            const newVMs = [...arg.prevState.cellVMs];\n            newVMs[index] = Helpers.asCellViewModel(newVM);\n            // When editing, make sure we focus the edited cell (otherwise undo looks weird because it undoes a non focused cell)\n            return Effects.focusCell({\n                ...arg,\n                prevState: { ...arg.prevState, cellVMs: newVMs },\n                payload: { ...arg.payload, data: { cursorPos: CursorPos.Current, cellId: arg.payload.data.id } }\n            });\n        }\n        return arg.prevState;\n    }\n\n    export function deleteCell(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const cells = arg.prevState.cellVMs;\n        if (cells.length === 1 && cells[0].cell.id === arg.payload.data.cellId) {\n            // Special case, if this is the last cell, don't delete it, just clear it's output and input\n            const newVM: ICellViewModel = {\n                cell: createEmptyCell(arg.payload.data.cellId, null),\n                editable: true,\n                inputBlockOpen: true,\n                inputBlockShow: true,\n                inputBlockText: '',\n                inputBlockCollapseNeeded: false,\n                selected: cells[0].selected,\n                focused: cells[0].focused,\n                cursorPos: CursorPos.Current,\n                hasBeenRun: false,\n                scrollCount: 0,\n                runningByLine: DebugState.Design\n            };\n\n            // Send messages to other side to indicate the new add\n            Transfer.postModelRemove(arg, 0, cells[0].cell);\n            Transfer.postModelInsert(arg, 0, newVM.cell);\n\n            return {\n                ...arg.prevState,\n                undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs),\n                cellVMs: [newVM]\n            };\n        } else if (arg.payload.data.cellId) {\n            // Otherwise just a straight delete\n            const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n            if (index >= 0) {\n                Transfer.postModelRemove(arg, 0, cells[index].cell);\n\n                // Recompute select/focus if this item has either\n                const previousSelection = getSelectedAndFocusedInfo(arg.prevState);\n                const newVMs = [...arg.prevState.cellVMs.filter((c) => c.cell.id !== arg.payload.data.cellId)];\n                const nextOrPrev = index === arg.prevState.cellVMs.length - 1 ? index - 1 : index;\n                if (\n                    previousSelection.selectedCellId === arg.payload.data.cellId ||\n                    previousSelection.focusedCellId === arg.payload.data.cellId\n                ) {\n                    if (nextOrPrev >= 0) {\n                        newVMs[nextOrPrev] = {\n                            ...newVMs[nextOrPrev],\n                            selected: true,\n                            focused: previousSelection.focusedCellId === arg.payload.data.cellId\n                        };\n                    }\n                }\n\n                return {\n                    ...arg.prevState,\n                    cellVMs: newVMs,\n                    undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs),\n                    skipNextScroll: true\n                };\n            }\n        }\n\n        return arg.prevState;\n    }\n\n    export function loadAllCells(arg: NativeEditorReducerArg<ILoadAllCells>): IMainState {\n        const vms = arg.payload.data.cells.map((c) => prepareCellVM(c, false, arg.prevState.settings));\n        return {\n            ...arg.prevState,\n            busy: false,\n            loadTotal: arg.payload.data.cells.length,\n            undoStack: [],\n            cellVMs: vms,\n            loaded: true\n        };\n    }\n\n    export function unmount(arg: NativeEditorReducerArg): IMainState {\n        return {\n            ...arg.prevState,\n            cellVMs: [],\n            undoStack: [],\n            redoStack: []\n        };\n    }\n\n    function handleUndoModel(arg: NativeEditorReducerArg<NotebookModelChange>): IMainState {\n        // Disable the queueAction in the arg so that calling other reducers doesn't cause\n        // messages to be posted back (as were handling a message from the extension here)\n        const disabledQueueArg = { ...arg, queueAction: noop };\n        switch (arg.payload.data.kind) {\n            case 'clear':\n                return loadAllCells({\n                    ...disabledQueueArg,\n                    payload: { ...arg.payload, data: { cells: arg.payload.data.oldCells } }\n                });\n            case 'edit':\n                return applyCellEdit({\n                    ...disabledQueueArg,\n                    payload: { ...arg.payload, data: { id: arg.payload.data.id, changes: arg.payload.data.reverse } }\n                });\n            case 'insert':\n                return deleteCell({\n                    ...disabledQueueArg,\n                    payload: { ...arg.payload, data: { cellId: arg.payload.data.cell.id } }\n                });\n            case 'remove':\n                const cellBelow =\n                    arg.prevState.cellVMs.length > arg.payload.data.index\n                        ? arg.prevState.cellVMs[arg.payload.data.index].cell\n                        : undefined;\n                return insertExistingAbove({\n                    ...disabledQueueArg,\n                    payload: {\n                        ...arg.payload,\n                        data: { cell: arg.payload.data.cell, cellId: cellBelow ? cellBelow.id : undefined }\n                    }\n                });\n            case 'remove_all':\n                return loadAllCells({\n                    ...disabledQueueArg,\n                    payload: { ...arg.payload, data: { cells: arg.payload.data.oldCells } }\n                });\n            case 'swap':\n                return Movement.swapCells({\n                    ...disabledQueueArg,\n                    payload: {\n                        ...arg.payload,\n                        data: {\n                            firstCellId: arg.payload.data.secondCellId,\n                            secondCellId: arg.payload.data.firstCellId\n                        }\n                    }\n                });\n            case 'modify':\n                // Undo for modify should reapply the outputs. Go through each and apply the update\n                let result = arg.prevState;\n                arg.payload.data.oldCells.forEach((c) => {\n                    result = updateCell({\n                        ...disabledQueueArg,\n                        prevState: result,\n                        payload: { ...arg.payload, data: c }\n                    });\n                });\n                return result;\n\n            default:\n                // File, version can be ignored.\n                break;\n        }\n\n        return arg.prevState;\n    }\n\n    function handleRedoModel(arg: NativeEditorReducerArg<NotebookModelChange>): IMainState {\n        // Disable the queueAction in the arg so that calling other reducers doesn't cause\n        // messages to be posted back (as were handling a message from the extension here)\n        const disabledQueueArg = { ...arg, queueAction: noop };\n        switch (arg.payload.data.kind) {\n            case 'clear':\n                // tslint:disable-next-line: no-any\n                return Execution.clearAllOutputs(disabledQueueArg as any);\n            case 'edit':\n                return applyCellEdit({\n                    ...disabledQueueArg,\n                    payload: { ...arg.payload, data: { id: arg.payload.data.id, changes: arg.payload.data.forward } }\n                });\n            case 'insert':\n                return insertExistingAbove({\n                    ...disabledQueueArg,\n                    payload: {\n                        ...arg.payload,\n                        data: { cell: arg.payload.data.cell, cellId: arg.payload.data.codeCellAboveId }\n                    }\n                });\n            case 'remove':\n                return deleteCell({\n                    ...disabledQueueArg,\n                    payload: { ...arg.payload, data: { cellId: arg.payload.data.cell.id } }\n                });\n            case 'remove_all':\n                return deleteAllCells({\n                    ...disabledQueueArg,\n                    payload: { ...arg.payload, data: { newCellId: arg.payload.data.newCellId } }\n                });\n            case 'swap':\n                return Movement.swapCells({\n                    ...disabledQueueArg,\n                    payload: {\n                        ...arg.payload,\n                        data: {\n                            firstCellId: arg.payload.data.secondCellId,\n                            secondCellId: arg.payload.data.firstCellId\n                        }\n                    }\n                });\n            case 'modify':\n                // Redo for modify should reapply the outputs. Go through each and apply the update\n                let result = arg.prevState;\n                arg.payload.data.newCells.forEach((c) => {\n                    result = updateCell({\n                        ...disabledQueueArg,\n                        prevState: result,\n                        payload: { ...arg.payload, data: c }\n                    });\n                });\n                return result;\n            default:\n                // Modify, file, version can all be ignored.\n                break;\n        }\n\n        return arg.prevState;\n    }\n\n    export function handleUpdate(arg: NativeEditorReducerArg<NotebookModelChange>): IMainState {\n        switch (arg.payload.data.source) {\n            case 'undo':\n                return handleUndoModel(arg);\n            case 'redo':\n                return handleRedoModel(arg);\n            default:\n                break;\n        }\n        return arg.prevState;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport { InteractiveWindowMessages } from '../../../../client/datascience/interactive-common/interactiveWindowTypes';\nimport { CssMessages, SharedMessages } from '../../../../client/datascience/messages';\nimport { CommonEffects } from '../../../interactive-common/redux/reducers/commonEffects';\nimport { Kernel } from '../../../interactive-common/redux/reducers/kernel';\nimport { Transfer } from '../../../interactive-common/redux/reducers/transfer';\nimport { CommonActionType } from '../../../interactive-common/redux/reducers/types';\nimport { INativeEditorActionMapping } from '../mapping';\nimport { Creation } from './creation';\nimport { Effects } from './effects';\nimport { Execution } from './execution';\nimport { Movement } from './movement';\n\n// The list of reducers. 1 per message/action.\nexport const reducerMap: Partial<INativeEditorActionMapping> = {\n    // State updates\n    [CommonActionType.INSERT_ABOVE_AND_FOCUS_NEW_CELL]: Creation.insertAboveAndFocusCell,\n    [CommonActionType.INSERT_ABOVE_FIRST_AND_FOCUS_NEW_CELL]: Creation.insertAboveFirstAndFocusCell,\n    [CommonActionType.INSERT_BELOW_AND_FOCUS_NEW_CELL]: Creation.insertBelowAndFocusCell,\n    [CommonActionType.INSERT_ABOVE]: Creation.insertNewAbove,\n    [CommonActionType.INSERT_ABOVE_FIRST]: Creation.insertAboveFirst,\n    [CommonActionType.INSERT_BELOW]: Creation.insertBelow,\n    [CommonActionType.FOCUS_CELL]: Effects.focusCell,\n    [CommonActionType.UNFOCUS_CELL]: Effects.unfocusCell,\n    [CommonActionType.ADD_AND_FOCUS_NEW_CELL]: Creation.addAndFocusCell,\n    [CommonActionType.ADD_NEW_CELL]: Creation.addNewCell,\n    [CommonActionType.EXECUTE_CELL_AND_ADVANCE]: Execution.executeCellAndAdvance,\n    [CommonActionType.EXECUTE_CELL]: Execution.executeCell,\n    [CommonActionType.EXECUTE_ALL_CELLS]: Execution.executeAllCells,\n    [CommonActionType.EXECUTE_ABOVE]: Execution.executeAbove,\n    [CommonActionType.EXECUTE_CELL_AND_BELOW]: Execution.executeCellAndBelow,\n    [CommonActionType.RESTART_KERNEL]: Kernel.restartKernel,\n    [CommonActionType.INTERRUPT_KERNEL]: Kernel.interruptKernel,\n    [InteractiveWindowMessages.ClearAllOutputs]: Execution.clearAllOutputs,\n    [CommonActionType.EXPORT]: Transfer.exportCells,\n    [CommonActionType.SAVE]: Transfer.save,\n    [CommonActionType.SHOW_DATA_VIEWER]: Transfer.showDataViewer,\n    [CommonActionType.SEND_COMMAND]: Transfer.sendCommand,\n    [CommonActionType.SELECT_CELL]: Effects.selectCell,\n    [InteractiveWindowMessages.SelectKernel]: Kernel.selectKernel,\n    [CommonActionType.SELECT_SERVER]: Kernel.selectJupyterURI,\n    [CommonActionType.MOVE_CELL_UP]: Movement.moveCellUp,\n    [CommonActionType.MOVE_CELL_DOWN]: Movement.moveCellDown,\n    [CommonActionType.DELETE_CELL]: Creation.deleteCell,\n    [CommonActionType.TOGGLE_LINE_NUMBERS]: Effects.toggleLineNumbers,\n    [CommonActionType.TOGGLE_OUTPUT]: Effects.toggleOutput,\n    [CommonActionType.CHANGE_CELL_TYPE]: Execution.changeCellType,\n    [InteractiveWindowMessages.Undo]: Execution.undo,\n    [InteractiveWindowMessages.Redo]: Execution.redo,\n    [CommonActionType.ARROW_UP]: Movement.arrowUp,\n    [CommonActionType.ARROW_DOWN]: Movement.arrowDown,\n    [CommonActionType.EDIT_CELL]: Transfer.editCell,\n    [InteractiveWindowMessages.ShowPlot]: Transfer.showPlot,\n    [CommonActionType.LINK_CLICK]: Transfer.linkClick,\n    [CommonActionType.GATHER_CELL]: Transfer.gather,\n    [CommonActionType.GATHER_CELL_TO_SCRIPT]: Transfer.gatherToScript,\n    [CommonActionType.EDITOR_LOADED]: Transfer.started,\n    [CommonActionType.LOADED_ALL_CELLS]: Transfer.loadedAllCells,\n    [CommonActionType.UNMOUNT]: Creation.unmount,\n    [CommonActionType.LOAD_IPYWIDGET_CLASS_SUCCESS]: CommonEffects.handleLoadIPyWidgetClassSuccess,\n    [CommonActionType.LOAD_IPYWIDGET_CLASS_FAILURE]: CommonEffects.handleLoadIPyWidgetClassFailure,\n    [CommonActionType.IPYWIDGET_WIDGET_VERSION_NOT_SUPPORTED]: CommonEffects.notifyAboutUnsupportedWidgetVersions,\n    [CommonActionType.CONTINUE]: Execution.continueExec,\n    [CommonActionType.STEP]: Execution.step,\n    [CommonActionType.RUN_BY_LINE]: Execution.runByLine,\n\n    // Messages from the webview (some are ignored)\n    [InteractiveWindowMessages.StartCell]: Creation.startCell,\n    [InteractiveWindowMessages.FinishCell]: Creation.finishCell,\n    [InteractiveWindowMessages.UpdateCellWithExecutionResults]: Creation.updateCell,\n    [InteractiveWindowMessages.NotebookDirty]: CommonEffects.notebookDirty,\n    [InteractiveWindowMessages.NotebookClean]: CommonEffects.notebookClean,\n    [InteractiveWindowMessages.LoadAllCells]: Creation.loadAllCells,\n    [InteractiveWindowMessages.NotebookRunAllCells]: Execution.executeAllCells,\n    [InteractiveWindowMessages.NotebookRunSelectedCell]: Execution.executeSelectedCell,\n    [InteractiveWindowMessages.NotebookAddCellBelow]: Creation.addAndFocusCell,\n    [InteractiveWindowMessages.DoSave]: Transfer.save,\n    [InteractiveWindowMessages.DeleteAllCells]: Creation.deleteAllCells,\n    [InteractiveWindowMessages.Undo]: Execution.undo,\n    [InteractiveWindowMessages.Redo]: Execution.redo,\n    [InteractiveWindowMessages.StartProgress]: CommonEffects.startProgress,\n    [InteractiveWindowMessages.StopProgress]: CommonEffects.stopProgress,\n    [SharedMessages.UpdateSettings]: Effects.updateSettings,\n    [InteractiveWindowMessages.Activate]: CommonEffects.activate,\n    [InteractiveWindowMessages.RestartKernel]: Kernel.handleRestarted,\n    [CssMessages.GetCssResponse]: CommonEffects.handleCss,\n    [InteractiveWindowMessages.MonacoReady]: CommonEffects.monacoReady,\n    [CssMessages.GetMonacoThemeResponse]: CommonEffects.monacoThemeChange,\n    [InteractiveWindowMessages.UpdateModel]: Creation.handleUpdate,\n    [InteractiveWindowMessages.UpdateKernel]: Kernel.updateStatus,\n    [SharedMessages.LocInit]: CommonEffects.handleLocInit,\n    [InteractiveWindowMessages.UpdateDisplayData]: CommonEffects.handleUpdateDisplayData,\n    [InteractiveWindowMessages.ShowBreak]: Execution.handleBreakState,\n    [InteractiveWindowMessages.ShowContinue]: Execution.handleContinue,\n    [InteractiveWindowMessages.StartDebugging]: Execution.startDebugging,\n    [InteractiveWindowMessages.StopDebugging]: Execution.stopDebugging\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\n\n// This must be on top, do not change. Required by webpack.\nimport '../common/main';\n// This must be on top, do not change. Required by webpack.\n\n// tslint:disable-next-line: ordered-imports\nimport '../common/index.css';\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { WidgetManagerComponent } from '../ipywidgets/container';\nimport { IVsCodeApi, PostOffice } from '../react-common/postOffice';\nimport { detectBaseTheme } from '../react-common/themeDetector';\nimport { getConnectedNativeEditor } from './nativeEditor';\nimport { createStore } from './redux/store';\n\n// This special function talks to vscode from a web panel\nexport declare function acquireVsCodeApi(): IVsCodeApi;\nconst baseTheme = detectBaseTheme();\n// tslint:disable-next-line: no-any\nconst testMode = (window as any).inTestMode;\n// tslint:disable-next-line: no-typeof-undefined\nconst skipDefault = testMode ? false : typeof acquireVsCodeApi !== 'undefined';\n\n// Create the redux store\nconst postOffice = new PostOffice();\nconst store = createStore(skipDefault, baseTheme, testMode, postOffice);\n\n// Wire up a connected react control for our NativeEditor\nconst ConnectedNativeEditor = getConnectedNativeEditor();\n\n// Stick them all together\nReactDOM.render(\n    <Provider store={store}>\n        <ConnectedNativeEditor />\n        <WidgetManagerComponent postOffice={postOffice} widgetContainerId={'rootWidget'} store={store} />\n    </Provider>,\n    document.getElementById('root') as HTMLElement\n);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\n\nimport * as ReduxCommon from '../../interactive-common/redux/store';\nimport { PostOffice } from '../../react-common/postOffice';\nimport { reducerMap } from './reducers';\n\n// This special version uses the reducer map from the INativeEditorMapping\nexport function createStore(skipDefault: boolean, baseTheme: string, testMode: boolean, postOffice: PostOffice) {\n    return ReduxCommon.createStore(skipDefault, baseTheme, testMode, true, reducerMap, postOffice);\n}\n","module.exports = log4js;","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\nexports.i(require(\"-!../../../node_modules/css-loader/index.js!../interactive-common/common.css\"), \"\");\n\n// module\nexports.push([module.id, \"/* Import common styles and then override them below */\\n.toolbar-panel-button {\\n  border-width: 1px;\\n  border-style: solid;\\n  border-color: var(--override-badge-background, var(--vscode-badge-background));\\n  color: var(--override-foreground, var(--vscode-editor-foreground));\\n  text-align: center;\\n  overflow: hidden;\\n  margin-left: 2px;\\n  padding: 2px;\\n  background-color: transparent;\\n  cursor: hand;\\n}\\n.cell-wrapper {\\n  margin: 2px 2px 0px 0px;\\n  position: relative;\\n  min-height: 55px;\\n}\\n.cell-wrapper-focused {\\n  margin: 2px 2px 0px 0px;\\n}\\n.cell-wrapper-selected {\\n  margin: 2px 2px 0px 0px;\\n}\\n.cell-menu-bar-outer {\\n  justify-self: right;\\n}\\n.cell-output-wrapper {\\n  grid-row: 1;\\n  grid-column: 3;\\n}\\n.cell-output {\\n  margin-top: 5px;\\n  background: transparent;\\n  width: 100%;\\n  overflow-x: scroll;\\n}\\n.cell-output-text {\\n  white-space: pre-wrap;\\n  word-break: break-all;\\n  overflow-x: hidden;\\n}\\n.markdown-cell-output-container {\\n  grid-row: 1;\\n  grid-column: 3;\\n}\\n.markdown-cell-output {\\n  width: 100%;\\n  overflow-x: scroll;\\n}\\n.cell-outer {\\n  display: grid;\\n  grid-template-columns: auto auto minmax(0, 1fr);\\n}\\n.cell-outer-editable {\\n  display: grid;\\n  grid-template-columns: auto auto minmax(0, 1fr);\\n  margin-top: 0px;\\n}\\n.cell-state-selector {\\n  border-width: 1px;\\n  border-style: solid;\\n  border-color: var(--override-badge-background, var(--vscode-badge-background));\\n  color: var(--override-foreground, var(--vscode-editor-foreground));\\n  text-align: center;\\n  overflow: hidden;\\n  margin-left: 2px;\\n  padding: 2px;\\n  background-color: transparent;\\n  cursor: hand;\\n}\\n.cell-state-selector-option {\\n  border-width: 1px;\\n  border-style: solid;\\n  border-color: var(--override-badge-background, var(--vscode-badge-background));\\n  color: var(--override-foreground, var(--vscode-editor-foreground));\\n  background-color: var(--override-background, var(--vscode-editor-background));\\n}\\n.code-area {\\n  position: relative;\\n  width: 100%;\\n  padding-right: 8px;\\n  margin-bottom: 0px;\\n  padding-left: 2px;\\n  padding-top: 2px;\\n  background: var(--override-widget-background, var(--vscode-notifications-background));\\n}\\n.markdown-editor-area {\\n  position: relative;\\n  width: 100%;\\n  padding-right: 10px;\\n  margin-bottom: 0px;\\n  padding-left: 2px;\\n  padding-top: 2px;\\n  background: var(--override-widget-background, var(--vscode-notifications-background));\\n}\\n.code-watermark {\\n  top: 5px;\\n  /* Account for extra padding and border in native editor */\\n}\\n.cell-input-wrapper {\\n  grid-column: 3;\\n  grid-row: 1;\\n}\\n.cell-input {\\n  margin: 2px 10px 0px 0px;\\n}\\n.content-div {\\n  grid-column: 3;\\n}\\n.controls-div {\\n  min-width: 34px;\\n  padding-left: 4px;\\n  padding-right: 4px;\\n  display: block;\\n  grid-column: 2;\\n  grid-row: 1;\\n}\\n.navbar-div {\\n  grid-column: 1;\\n  visibility: hidden;\\n  display: grid;\\n  grid-template-rows: var(--button-size) var(--button-size) auto;\\n}\\n.navbar-add-button {\\n  align-self: end;\\n}\\n.execution-count {\\n  justify-self: end;\\n  margin-bottom: 10px;\\n  margin-top: 1px;\\n}\\n.execution-count-busy-outer {\\n  justify-self: end;\\n}\\n.native-editor-celltoolbar-inner {\\n  justify-self: center;\\n  grid-column: 1;\\n}\\n.native-editor-celltoolbar-middle {\\n  display: flex;\\n  grid-column: 3;\\n  grid-row: 2;\\n  justify-items: left;\\n  background: var(--vscode-notifications-background);\\n}\\n.native-editor-celltoolbar-divider {\\n  background-color: var(--vscode-badge-background);\\n  height: 2px;\\n}\\n.code-toolbar {\\n  visibility: visible;\\n}\\n.markdown-toolbar {\\n  visibility: collapse;\\n}\\n.hover-cell-button {\\n  visibility: collapse;\\n}\\n.cell-wrapper:hover .hover-cell-button {\\n  visibility: visible;\\n}\\n.cell-wrapper-selected .hover-cell-button {\\n  visibility: visible;\\n}\\n.cell-wrapper-focused .hover-cell-button {\\n  visibility: visible;\\n}\\n.delete-cell-button {\\n  right: 2px;\\n  position: absolute;\\n  visibility: collapse;\\n}\\n.cell-wrapper:hover .navbar-div {\\n  visibility: visible;\\n}\\n.cell-wrapper-selected .navbar-div {\\n  visibility: visible;\\n}\\n.cell-wrapper-focused .navbar-div {\\n  visibility: visible;\\n}\\n.cell-wrapper:hover .markdown-toolbar {\\n  visibility: visible;\\n}\\n.cell-wrapper-selected .markdown-toolbar {\\n  visibility: visible;\\n}\\n.cell-wrapper-focused .markdown-toolbar {\\n  visibility: visible;\\n}\\n.native-editor-flyout-button {\\n  width: auto;\\n  height: auto;\\n  border-color: transparent;\\n  background-color: transparent;\\n  padding: 0px;\\n  margin-left: 4px;\\n  margin-right: 0px;\\n  margin-top: 0px;\\n  margin-bottom: 0px;\\n  border-width: 0px;\\n}\\n.native-editor-flyout-button:focus {\\n  outline: none;\\n}\\n.native-editor-cellflyout {\\n  position: relative;\\n  left: 20px;\\n  top: -15px;\\n  width: auto;\\n  height: auto;\\n  padding-top: 2px;\\n  padding-right: 2px;\\n  z-index: 100;\\n}\\n.native-editor-cellflyout-selected {\\n  background-color: var(--vscode-peekView-border);\\n}\\n.native-editor-cellflyout-focused {\\n  background-color: var(--vscode-editorInfo-foreground);\\n}\\n.flyout-button-content {\\n  color: var(--override-foreground, var(--vscode-editor-foreground));\\n}\\n.native-button {\\n  background: transparent;\\n  z-index: 10;\\n}\\n#toolbar-panel {\\n  margin-top: 2px;\\n  margin-bottom: 2px;\\n  margin-left: 0px;\\n  margin-right: 0px;\\n}\\n#content-panel-div {\\n  overflow: hidden;\\n}\\n/* Fix image buttons that are supposed to be hidden from showing up */\\n.flyout-children-hidden .image-button {\\n  width: 0px;\\n  height: 0px;\\n  margin-left: 0px;\\n  padding: 0px;\\n}\\n.add-cell-line {\\n  display: flex;\\n  justify-content: left;\\n  margin-top: 5px;\\n  margin-bottom: 0px;\\n  margin-left: 5px;\\n  margin-right: 5px;\\n}\\n.add-cell-line:focus-within {\\n  outline: 1px solid black;\\n}\\n.add-cell-line-top {\\n  margin-top: 2px;\\n  margin-bottom: 0px;\\n}\\n.add-cell-line-top-force-visible {\\n  margin-top: 2px;\\n  margin-bottom: 0px;\\n}\\n.add-cell-line-top .add-cell-line-button {\\n  visibility: hidden;\\n}\\n.add-cell-line-button {\\n  border-width: 0px;\\n  border-style: solid;\\n  text-align: center;\\n  line-height: 16px;\\n  background-color: transparent;\\n  cursor: hand;\\n  height: var(--button-size);\\n  padding: 0px;\\n  display: flex;\\n}\\n.add-cell-line-button:focus {\\n  outline: none;\\n}\\n.add-cell-line-top:hover .add-cell-line-button {\\n  visibility: visible;\\n}\\n.add-cell-line-button .image-button-image {\\n  height: var(--button-size);\\n}\\n.add-cell-line-button .image-button-image svg {\\n  height: var(--button-size);\\n}\\n.add-cell-line-divider {\\n  margin-top: 8px;\\n  margin-left: 2px;\\n  width: calc(100% - 40px);\\n  border-width: 0px;\\n  border-top-color: var(--override-badge-background, var(--vscode-badge-background));\\n  border-top-width: 1px;\\n  border-style: solid;\\n}\\n.add-cell-line-divider:hover {\\n  cursor: pointer;\\n}\\n.cell-wrapper-selected .add-cell-line {\\n  visibility: visible;\\n}\\n.cell-wrapper-focused .add-cell-line {\\n  visibility: visible;\\n}\\n/*\\nCell Row Container layout\\n--------------------------\\ncollapse-bar        controls-div        [cell-input, cell-output, markdown-cell-output-container]\\n(expanded c-bar)    celltoolbar-middle\\n*/\\n.cell-row-container {\\n  display: grid;\\n  grid-template-columns: auto auto minmax(0, 1fr);\\n  grid-template-rows: 1fr auto;\\n}\\n.collapse-bar {\\n  grid-column: 1;\\n  grid-row-start: 1;\\n  grid-row-end: 2;\\n  background-color: transparent;\\n  max-width: 8px;\\n  min-width: 8px;\\n}\\n.cell-wrapper:hover .collapse-bar {\\n  background-color: var(--override-widget-background, var(--vscode-notifications-background));\\n}\\n.collapse-bar-markdown {\\n  margin: 0px 44px 0px 0px;\\n}\\n.collapse-bar-output {\\n  margin: 0px 28px 0px 16px;\\n}\\n.collapse-bar-selected {\\n  background-color: var(--vscode-peekView-border);\\n  grid-row-start: 1;\\n  grid-row-end: 3;\\n}\\n.collapse-bar-focused {\\n  background: repeating-linear-gradient(-45deg, transparent, transparent 3px, var(--vscode-editorGutter-addedBackground) 3px, var(--vscode-editorGutter-addedBackground) 6px);\\n  grid-row-start: 1;\\n  grid-row-end: 3;\\n}\\n.cell-wrapper:hover .collapse-bar-selected {\\n  background-color: var(--vscode-peekView-border);\\n}\\n.cell-wrapper:hover .collapse-bar-focused {\\n  background: repeating-linear-gradient(-45deg, transparent, transparent 3px, var(--vscode-editorGutter-addedBackground) 3px, var(--vscode-editorGutter-addedBackground) 6px);\\n}\\n.add-divider {\\n  visibility: hidden;\\n  margin: 0px;\\n  position: absolute;\\n  bottom: 8px;\\n}\\n.cell-wrapper:hover .add-divider {\\n  visibility: hidden;\\n  z-index: -100;\\n  pointer-events: none;\\n}\\n.cell-wrapper-selected .add-divider {\\n  visibility: hidden;\\n  z-index: -100;\\n  pointer-events: none;\\n}\\n.cell-wrapper-focused .add-divider {\\n  visibility: hidden;\\n  z-index: -100;\\n  pointer-events: none;\\n}\\n.cell-wrapper-selected:hover .add-divider {\\n  visibility: hidden;\\n  z-index: -100;\\n  pointer-events: none;\\n}\\n.cell-wrapper-focused:hover .add-divider {\\n  visibility: hidden;\\n  z-index: -100;\\n  pointer-events: none;\\n}\\n.native-editor-celltoolbar-middle .image-button {\\n  margin-right: 3px;\\n  margin-top: 4px;\\n  margin-bottom: 4px;\\n  margin-left: 3px;\\n}\\n\", \"\"]);\n\n// exports\n"],"sourceRoot":""}
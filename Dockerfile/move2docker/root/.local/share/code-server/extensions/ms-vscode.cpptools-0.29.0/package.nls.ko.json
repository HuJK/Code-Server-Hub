{
	"c_cpp.command.configurationSelect.title": "구성 선택...",
	"c_cpp.command.configurationProviderSelect.title": "구성 공급자 변경...",
	"c_cpp.command.configurationEditJSON.title": "구성 편집(JSON)",
	"c_cpp.command.configurationEditUI.title": "구성 편집(UI)",
	"c_cpp.command.switchHeaderSource.title": "헤더/소스 전환",
	"c_cpp.command.enableErrorSquiggles.title": "오류 표시선 사용",
	"c_cpp.command.disableErrorSquiggles.title": "오류 표시선 사용 안 함",
	"c_cpp.command.toggleIncludeFallback.title": "포함 오류 발생 시 IntelliSense 엔진 대체 설정/해제",
	"c_cpp.command.toggleDimInactiveRegions.title": "비활성 영역 색 지정 설정/해제",
	"c_cpp.command.resetDatabase.title": "IntelliSense 데이터베이스 다시 설정",
	"c_cpp.command.takeSurvey.title": "설문 조사 참여",
	"c_cpp.command.buildAndDebugActiveFile.title": "활성 파일 빌드 및 디버그",
	"c_cpp.command.logDiagnostics.title": "진단 정보 로그",
	"c_cpp.command.referencesViewGroupByType.title": "참조 형식으로 그룹화",
	"c_cpp.command.referencesViewUngroupByType.title": "참조 형식으로 그룹화 해제",
	"c_cpp.command.rescanWorkspace.title": "작업 영역 다시 검사",
	"c_cpp.command.vcpkgClipboardInstallSuggested.title": "vcpkg install 명령을 클립보드에 복사",
	"c_cpp.command.vcpkgOnlineHelpSuggested.title": "vcpkg 도움말 페이지 방문",
	"c_cpp.configuration.clang_format_path.description": "clang-format 실행 파일의 전체 경로입니다. 지정하지 않은 경우 clang-format을 환경 경로에서 사용할 수 있으면 해당 실행 파일이 사용됩니다. 환경 경로에 clang-format이 없는 경우에는 확장과 함께 제공된 clang-format의 복사본이 사용됩니다.",
	"c_cpp.configuration.clang_format_style.description": "코딩 스타일은 현재 Visual Studio, LLVM, Google, Chromium, Mozilla, WebKit을 지원합니다. \"file\"을 사용하여 현재 또는 부모 디렉터리의 .clang-format 파일에서 스타일을 로드합니다. {키: 값, ...}을 사용하여 특정 매개 변수를 설정합니다. 예를 들어 \"Visual Studio\" 스타일은 { BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All }와 비슷합니다.",
	"c_cpp.configuration.clang_format_fallbackStyle.description": "clang-format이 \"file\" 스타일을 사용하여 호출되지만 .clang-format 파일을 찾을 수 없는 경우 대체로 사용되는 미리 정의된 스타일의 이름입니다. 가능한 값은 Visual Studio, LLVM, Google, Chromium, Mozilla, WebKit, 없음이거나 {key: value, ...}를 사용하여 특정 매개 변수를 설정합니다. 예를 들어 \"Visual Studio\" 스타일은 { BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4 }와 비슷합니다.",
	"c_cpp.configuration.clang_format_sortIncludes.description": "설정되는 경우 SortIncludes 매개 변수로 결정된 포함 정렬 동작을 재정의합니다.",
	"c_cpp.configuration.intelliSenseEngine.description": "IntelliSense 공급자를 제어합니다. \"태그 파서\"는 컨텍스트가 인식되지 않는 \"유사\" 결과를 제공합니다. \"Default\"는 컨텍스트가 인식된 결과를 제공합니다. \"Disabled\"는 C/C++ 언어 서비스 기능을 끕니다.",
	"c_cpp.configuration.intelliSenseEngineFallback.description": "IntelliSense 엔진이 #include 오류를 포함하는 변환 단위에 대해 태그 파서로 자동으로 전환되는지 여부를 제어합니다.",
	"c_cpp.configuration.autocomplete.description": "자동 완성 공급자를 제어합니다. \"Default\"는 활성 IntelliSense 엔진을 사용합니다. \"Disabled\"는 Visual Studio Code에서 제공하는 단어 기반 완성을 사용합니다.",
	"c_cpp.configuration.errorSquiggles.description": "IntelliSense 엔진이 검색한 의심스러운 컴파일 오류가 다시 편집기에 보고되는지 여부를 제어합니다. 이 설정은 태그 파서 엔진에서 무시됩니다.",
	"c_cpp.configuration.dimInactiveRegions.description": "비활성 전처리기 블록의 색이 활성 코드와 다르게 지정되는지 여부를 제어합니다. 이 설정은 기본 고대비 테마를 사용하거나 IntelliSense가 사용하지 않도록 설정된 경우에는 영향을 주지 않습니다.",
	"c_cpp.configuration.inactiveRegionOpacity.description": "비활성 전처리기 블록의 불투명도를 제어합니다. 0.1~1.0 사이에서 크기를 조정합니다. 이 설정은 비활성 영역 흐리게 표시가 사용하도록 설정된 경우에만 적용됩니다.",
	"c_cpp.configuration.inactiveRegionForegroundColor.description": "비활성 전처리기 블록의 글꼴 색 지정을 제어합니다. 입력은 16진수 색 코드 또는 유효한 테마 색의 형식입니다. 설정하지 않으면 기본적으로 편집기의 구문 색 구성표로 설정됩니다. 이 설정은 비활성 영역 흐리게 표시가 사용하도록 설정된 경우에만 적용됩니다.",
	"c_cpp.configuration.inactiveRegionBackgroundColor.description": "비활성 전처리기 블록의 배경색 지정을 제어합니다. 입력은 16진수 색 코드 또는 유효한 테마 색의 형식입니다. 설정하지 않으면 기본적으로 투명으로 설정됩니다. 이 설정은 비활성 영역 흐리게 표시가 사용하도록 설정된 경우에만 적용됩니다.",
	"c_cpp.configuration.formatting.description": "\"Default\"를 선택하면 코드 서식을 지정할 수 있습니다. \"Disabled\"를 선택하면 코드 서식을 지정할 수 없습니다.",
	"c_cpp.configuration.loggingLevel.description": "출력 패널에서 로깅의 세부 정보 표시 수준입니다. 가장 낮은 표시 수준에서 가장 높은 표시 수준의 순서는 None < Error < Warning < Information < Debug입니다.",
	"c_cpp.configuration.autoAddFileAssociations.description": "파일이 C/C++ 파일의 탐색 작업에 대한 대상인 경우 files.associations에 자동으로 추가되는지 여부를 제어합니다.",
	"c_cpp.configuration.workspaceParsingPriority.description": "비활성 작업 영역 파일의 구문 분석에서 100%의 CPU 사용률을 피하기 위해 일시 정지 모드를 사용하는지 여부를 제어합니다. highest/high/medium/low 값은 대략 100/75/50/25%의 CPU 사용률에 해당합니다.",
	"c_cpp.configuration.workspaceSymbols.description": "'작업 영역에서 기호로 이동'이 호출될 때 쿼리 결과에 포함할 기호입니다.",
	"c_cpp.configuration.exclusionPolicy.description": "\"browse.path\" 배열의 경로를 트래버스하는 동안 코드 탐색 데이터베이스에 추가할 파일을 결정할 때 \"files.exclude\" 설정을 사용할 시기를 확장에 지시합니다. \"checkFolders\"는 제외 필터가 폴더당 한 번만 평가된다는 것을 의미합니다(개별 파일은 확인되지 않음). \"checkFilesAndFolders\"는 제외된 필터가 발견된 각 파일 및 폴더를 기준으로 평가된다는 것을 의미합니다. \"files.exclude\" 설정에 폴더만 포함된 경우 \"checkFolders\"는 가장 좋은 선택이며 확장이 코드 탐색 데이터베이스를 초기화할 수 있는 속도를 높입니다.",
	"c_cpp.configuration.preferredPathSeparator.description": "#include 자동 완성 결과의 경로 구분 기호로 사용되는 문자입니다.",
	"c_cpp.configuration.simplifyStructuredComments.description": "If true, tooltips of hover and auto-complete will only display certain labels of structured comments. Otherwise, all comments are displayed.",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.string.description": "여러 줄 또는 한 줄 주석 블록을 시작하는 패턴입니다. 기본적으로 여러 줄 주석 블록의 계속 패턴은 '*'로 설정되고, 한 줄 주석 블록의 경우 이 문자열로 설정됩니다.",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.object.begin.description": "여러 줄 또는 한 줄 주석 블록을 시작하는 패턴입니다.",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.object.continue.description": "여러 줄 또는 한 줄 주석 블록 내부에서 <Enter> 키를 누를 때 다음 줄에 삽입할 텍스트입니다.",
	"c_cpp.configuration.commentContinuationPatterns.description": "여러 줄 또는 한 줄 주석 블록 내에서 <Enter> 키를 누를 때 사용할 편집기 동작을 정의합니다.",
	"c_cpp.configuration.configurationWarnings.description": "구성 공급자 확장이 소스 파일의 구성을 제공할 수 없는 경우 팝업 알림을 표시할지 여부를 결정합니다.",
	"c_cpp.configuration.intelliSenseCachePath.description": "IntelliSense에서 사용하는 캐시되고 미리 컴파일된 헤더의 폴더 경로를 정의합니다. 기본 캐시 경로는 Windows의 \"%LocalAppData%/Microsoft/vscode-cpptools\", Linux의 \"$XDG_CACHE_HOME/vscode-cpptools/\"(또는 XDG_CACHE_HOME이 정의되지 않은 경우 \"$HOME/.cache/vscode-cpptools/\"), Mac의 \"$HOME/Library/Caches/vscode-cpptools/\"입니다. 경로를 지정하지 않거나 지정한 경로가 잘못된 경우 기본 경로를 사용합니다.",
	"c_cpp.configuration.intelliSenseCacheSize.description": "캐시된 미리 컴파일된 헤더에 대한 작업 영역당 하드 드라이브 공간의 최대 크기(MB)입니다. 실제 사용량은 이 값을 기준으로 변동될 수 있습니다. 기본 크기는 5120MB입니다. 크기가 0이면 미리 컴파일된 헤더 캐싱이 사용하지 않도록 설정됩니다.",
	"c_cpp.configuration.default.includePath.description": "\"includePath\"가 지정되지 않은 경우 구성에서 사용할 값 또는 \"${default}\"가 \"includePath\"에 있는 경우 삽입할 값입니다.",
	"c_cpp.configuration.default.defines.description": "\"defines\"가 지정되지 않은 경우 구성에서 사용할 값 또는 \"${default}\"가 \"defines\"에 있는 경우 삽입할 값입니다.",
	"c_cpp.configuration.default.macFrameworkPath.description": "\"macFrameworkPath\"가 지정되지 않은 경우 구성에서 사용할 값 또는 \"${default}\"가 \"macFrameworkPath\"에 있는 경우 삽입할 값입니다.",
	"c_cpp.configuration.default.windowsSdkVersion.description": "Windows에서 사용할 Windows SDK 포함 경로의 버전입니다(예: '10.0.17134.0').",
	"c_cpp.configuration.default.compileCommands.description": "\"compileCommands\"가 지정되지 않거나 \"${default}\"로 설정된 경우 구성에서 사용할 값입니다.",
	"c_cpp.configuration.default.forcedInclude.description": "\"forcedInclude\"가 지정되지 않은 경우 구성에서 사용할 값 또는 \"${default}\"가 \"forcedInclude\"에 있는 경우 삽입할 값입니다.",
	"c_cpp.configuration.default.intelliSenseMode.description": "\"intelliSenseMode\"가 지정되지 않거나 \"${default}\"로 설정된 경우 구성에서 사용할 값입니다.",
	"c_cpp.configuration.default.compilerPath.description": "\"compilerPath\"가 지정되지 않거나 \"${default}\"로 설정된 경우 구성에서 사용할 값입니다.",
	"c_cpp.configuration.default.compilerArgs.description": "\"compilerArgs\"가 지정되지 않거나 \"${default}\"로 설정된 경우 구성에서 사용할 값입니다.",
	"c_cpp.configuration.default.cStandard.description": "\"cStandard\"가 지정되지 않거나 \"${default}\"로 설정된 경우 구성에서 사용할 값입니다.",
	"c_cpp.configuration.default.cppStandard.description": "\"cppStandard\"가 지정되지 않거나 \"${default}\"로 설정된 경우 구성에서 사용할 값입니다.",
	"c_cpp.configuration.default.configurationProvider.description": "\"configurationProvider\"가 지정되지 않거나 \"${default}\"로 설정된 경우 구성에서 사용할 값입니다.",
	"c_cpp.configuration.default.browse.path.description": "\"browse.path\"가 지정되지 않은 경우 구성에서 사용할 값 또는 \"${default}\"가 \"browse.path\"에 있는 경우 삽입할 값입니다.",
	"c_cpp.configuration.default.browse.databaseFilename.description": "\"browse.databaseFilename\"이 지정되지 않거나 \"${default}\"로 설정된 경우 구성에서 사용할 값입니다.",
	"c_cpp.configuration.default.browse.limitSymbolsToIncludedHeaders.description": "\"browse.limitSymbolsToIncludedHeaders\"가 지정되지 않거나 \"${default}\"로 설정된 경우 구성에서 사용할 값입니다.",
	"c_cpp.configuration.default.systemIncludePath.description": "시스템 포함 경로에 사용할 값입니다. 설정하는 경우 \"compilerPath\" 및 \"compileCommands\" 설정을 통해 얻은 시스템 포함 경로를 재정의합니다.",
	"c_cpp.configuration.default.enableConfigurationSquiggles.description": "확장이 c_cpp_properties.json에서 검색된 오류를 보고할지 여부를 제어합니다.",
	"c_cpp.configuration.default.customConfigurationVariables.description": "\"customConfigurationVariables\"가 설정되지 않은 경우 구성에서 사용할 값 또는 \"${default}\"가 \"customConfigurationVariables\"에 키로 존재하는 경우 삽입할 값입니다.",
	"c_cpp.configuration.updateChannel.description": "예정된 기능과 버그 수정을 포함하는 확장의 최신 참가자 빌드를 자동으로 다운로드하여 설치하려면 \"참가자\"로 설정합니다.",
	"c_cpp.configuration.experimentalFeatures.description": "\"실험적\" 기능을 사용할 수 있는지 여부를 제어합니다.",
	"c_cpp.configuration.suggestSnippets.description": "True이면 언어 서버에서 코드 조각을 제공합니다.",
	"c_cpp.configuration.enhancedColorization.description": "사용하도록 설정된 경우 IntelliSense를 기반으로 코드 색이 지정됩니다. 이 설정은 기본 고대비 테마를 사용하거나 IntelliSense가 사용하지 않도록 설정된 경우 아무런 영향을 주지 않습니다.",
	"c_cpp.configuration.codeFolding.description": "사용하도록 설정하면 언어 서버에서 코드 접기 범위를 제공합니다.",
	"c_cpp.configuration.vcpkg.enabled.markdownDescription": "[vcpkg 종속성 관리자](https://aka.ms/vcpkg/)에 통합 서비스를 사용하도록 설정합니다.",
	"c_cpp.configuration.renameRequiresIdentifier.description": "true이면 '기호 이름 바꾸기'에 유효한 C/C++ 식별자가 필요합니다.",
	"c_cpp.configuration.debugger.useBacktickCommandSubstitution.description": "true인 경우 디버거 셸 명령 대체가 사용되지 않는 백틱(`)을 사용합니다.",
	"c_cpp.contributes.views.cppReferencesView.title": "C/C++: 기타 참조 결과",
	"c_cpp.debuggers.pipeTransport.description": "있을 경우 VS Code와 MI 지원 디버거 백 엔드 실행 파일(예: gdb) 사이에 표준 입출력을 릴레이하는 파이프로 다른 실행 파일을 사용하여 원격 컴퓨터에 연결되도록 디버거를 지정합니다.",
	"c_cpp.debuggers.pipeTransport.default.pipeProgram": "파이프 프로그램 이름의 정규화된 경로 입력(예: '/usr/bin/ssh')",
	"c_cpp.debuggers.pipeTransport.default.debuggerPath": "대상 컴퓨터에서 디버거의 전체 경로(예: /usr/bin/gdb)입니다.",
	"c_cpp.debuggers.pipeTransport.debuggerPath.description": "대상 컴퓨터에서 디버거의 전체 경로(예: /usr/bin/gdb)입니다.",
	"c_cpp.debuggers.pipeTransport.pipeCwd.description": "파이프 프로그램의 작업 디렉터리에 대한 정규화된 경로입니다.",
	"c_cpp.debuggers.pipeTransport.pipeProgram.description": "실행할 정규화된 파이프 명령입니다.",
	"c_cpp.debuggers.pipeTransport.pipeArgs.description": "연결을 구성하기 위해 파이프 프로그램에 전달되는 명령줄 인수입니다.",
	"c_cpp.debuggers.pipeTransport.pipeEnv.description": "파이프 프로그램에 전달되는 환경 변수입니다.",
	"c_cpp.debuggers.pipeTransport.quoteArgs.description": "pipeProgram의 개별 인수가 문자(예: 공백 또는 탭)를 포함하는 경우 따옴표를 붙여야 하나요? 'false'인 경우 디버거 명령은 더 이상 자동으로 따옴표를 붙이지 않습니다. \n기본값은 'true'입니다.",
	"c_cpp.debuggers.logging.description": "메시지 유형을 디버그 콘솔에 기록할지 여부를 결정하는 선택적 플래그입니다.",
	"c_cpp.debuggers.logging.exceptions.description": "예외 메시지를 디버그 콘솔에 기록할지 여부를 결정하는 선택적 플래그입니다. 기본값은 true입니다.",
	"c_cpp.debuggers.logging.moduleLoad.description": "모듈 로드 이벤트를 디버그 콘솔에 기록할지 여부를 결정하는 선택적 플래그입니다. 기본값은 true입니다.",
	"c_cpp.debuggers.logging.programOutput.description": "프로그램 출력을 디버그 콘솔에 기록할지 여부를 결정하는 선택적 플래그입니다. 기본값은 true입니다.",
	"c_cpp.debuggers.logging.engineLogging.description": "진단 디버그 엔진 메시지를 디버그 콘솔에 기록할지 여부를 결정하는 선택적 플래그입니다. 기본값은 false입니다.",
	"c_cpp.debuggers.logging.trace.description": "진단 어댑터 명령 추적을 디버그 콘솔에 기록할지 여부를 결정하는 선택적 플래그입니다. 기본값은 false입니다.",
	"c_cpp.debuggers.logging.traceResponse.description": "진단 어댑터 명령 및 응답 추적을 디버그 콘솔에 기록할지 여부를 결정하는 선택적 플래그입니다. 기본값은 false입니다.",
	"c_cpp.debuggers.cppvsdbg.logging.threadExit.description": "스레드 종료 메시지를 디버그 콘솔에 기록할지를 결정하는 선택적 플래그입니다. 기본값: `false`.",
	"c_cpp.debuggers.cppvsdbg.logging.processExit.description": "대상 프로세스 종료 메시지를 디버그 콘솔에 기록할지 또는 디버깅을 중지할지를 결정하는 선택적 플래그입니다. 기본값: `true`.",
	"c_cpp.debuggers.text.description": "실행할 디버거 명령입니다.",
	"c_cpp.debuggers.description.description": "명령에 대한 선택적 설명입니다.",
	"c_cpp.debuggers.ignoreFailures.description": "True이면 명령 실패가 무시됩니다. 기본값은 false입니다.",
	"c_cpp.debuggers.program.description": "프로그램 실행 파일의 전체 경로입니다.",
	"c_cpp.debuggers.args.description": "프로그램에 전달된 명령줄 인수입니다.",
	"c_cpp.debuggers.cppdbg.type.description": "엔진 유형입니다. \"cppdbg\"여야 합니다.",
	"c_cpp.debuggers.cppvsdbg.type.description": "엔진 유형입니다. \"cppvsdbg\"여야 합니다.",
	"c_cpp.debuggers.targetArchitecture.description": "디버기의 아키텍처입니다. 이 매개 변수를 설정하지 않는 경우 자동으로 검색됩니다. 허용되는 값은 x86, arm, arm64, mips, x64, amd64, x86_64입니다.",
	"c_cpp.debuggers.cwd.description": "대상의 작업 디렉터리입니다.",
	"c_cpp.debuggers.setupCommands.description": "기본 디버거를 설정하기 위해 실행할 하나 이상의 GDB/LLDB 명령입니다. 예: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].",
	"c_cpp.debuggers.customLaunchSetupCommands.description": "이 항목이 제공되는 경우 대상을 시작하는 데 사용되는 기본 명령은 다른 명령으로 바뀌게 됩니다. 예를 들어 대상 프로세스에 연결하려면 \"-target-attach\"를 사용할 수 있습니다. 빈 명령 목록은 시작 명령을 바꾸지 않으며, 이는 디버거의 시작 옵션이 명령줄 옵션으로 제공되는 경우 유용할 수 있습니다. 예: \"customLaunchSetupCommands\": [ { \"text\": \"target-run\", \"description\": \"run target\", \"ignoreFailures\": false }].",
	"c_cpp.debuggers.launchCompleteCommand.description": "대상 프로세스가 실행되도록 디버거가 완전히 설정된 후 실행할 명령입니다. 허용되는 값은 \"exec-run\", \"exec-continue\", \"None\"입니다. 기본값은 \"exec-run\"입니다.",
	"c_cpp.debuggers.cppdbg.visualizerFile.description": "이 프로세스를 디버그할 때 사용할 .natvis 파일입니다. 이 옵션은 GDB 자동 서식 지정과 호환되지 않습니다. 이 설정을 사용하는 경우 \"showDisplayString\"을 참조하세요.",
	"c_cpp.debuggers.cppvsdbg.visualizerFile.description": "이 프로세스를 디버그할 때 사용할 .natvis 파일입니다.",
	"c_cpp.debuggers.showDisplayString.description": "visualizerFile을 지정하면 showDisplayString은 표시 문자열을 사용하도록 설정합니다. 이 옵션을 켜면 디버그하는 동안 성능이 저하될 수 있습니다.",
	"c_cpp.debuggers.environment.description": "프로그램의 환경에 추가할 환경 변수입니다. 예: [ { \"name\": \"squid\", \"value\": \"clam\" } ].",
	"c_cpp.debuggers.envFile.description": "환경 변수 정의를 포함하는 파일의 절대 경로입니다. 이 파일에는 줄마다 등호로 구분된 키 값 쌍이 있습니다(예: 키=값).",
	"c_cpp.debuggers.additionalSOLibSearchPath.description": ".so 파일 검색에 사용할 디렉터리의 세미콜론으로 구분된 목록입니다(예: \"c:\\dir1;c:\\dir2\").",
	"c_cpp.debuggers.MIMode.description": "MIDebugEngine이 연결할 콘솔 디버거를 나타냅니다. 허용되는 값은 \"gdb\" \"lldb\"입니다.",
	"c_cpp.debuggers.miDebuggerPath.description": "MI 디버거(예: gdb)의 경로입니다. 지정되지 않은 디버거 확장은 먼저 경로에서 디버거를 검색합니다.",
	"c_cpp.debuggers.miDebuggerArgs.description": "MI 디버거(예: gdb)의 추가 인수입니다.",
	"c_cpp.debuggers.miDebuggerServerAddress.description": "연결할 MI 디버거 서버의 네트워크 주소입니다(예: localhost:1234).",
	"c_cpp.debuggers.stopAtEntry.description": "선택적 매개 변수입니다. True이면 디버거가 대상의 진입점에서 중지됩니다. processId가 전달되는 경우 영향을 주지 않습니다.",
	"c_cpp.debuggers.debugServerPath.description": "시작할 디버그 서버의 선택적 전체 경로입니다. 기본값은 null입니다.",
	"c_cpp.debuggers.debugServerArgs.description": "선택적 디버그 서버 인수입니다. 기본값은 null입니다.",
	"c_cpp.debuggers.serverStarted.description": "디버그 서버 출력에서 찾을 서버에서 시작한 패턴(선택 사항)입니다. 기본값은 null입니다.",
	"c_cpp.debuggers.filterStdout.description": "서버에서 시작한 패턴을 stdout 스트림에서 검색하고, stdout를 디버그 출력에 기록합니다. 기본값은 true입니다.",
	"c_cpp.debuggers.filterStderr.description": "서버에서 시작한 패턴을 stderr 스트림에서 검색하고, stderr을 디버그 출력에 기록합니다. 기본값은 false입니다.",
	"c_cpp.debuggers.serverLaunchTimeout.description": "debugServer가 시작될 때까지 디버거가 대기할 선택적 시간(밀리초)입니다. 기본값은 10000입니다.",
	"c_cpp.debuggers.coreDumpPath.description": "지정된 프로그램에 대한 코어 덤프 파일의 선택적 전체 경로입니다. 기본값은 null입니다.",
	"c_cpp.debuggers.cppdbg.externalConsole.description": "True이면 콘솔이 디버기에 대해 시작됩니다. False이면 Linux 및 Windows에서 통합 콘솔에 표시됩니다.",
	"c_cpp.debuggers.cppvsdbg.externalConsole.description": "True이면 콘솔이 디버기에 대해 시작됩니다. False이면 콘솔이 시작되지 않습니다.",
	"c_cpp.debuggers.avoidWindowsConsoleRedirection.description": "True이면 통합 터미널 지원에 필요한 디버기 콘솔 리디렉션을 사용하지 않도록 설정합니다.",
	"c_cpp.debuggers.sourceFileMap.description": "디버그 엔진에 전달되는 선택적 소스 파일 매핑입니다(예: '{\"/original/source/path\": \"/original/source/path\"}').",
	"c_cpp.debuggers.processId.anyOf.description": "디버거를 연결할 선택적 프로세스 ID입니다. \"${command:pickProcess}\"를 사용하여 연결할 로컬 실행 프로세스 목록을 가져옵니다. 일부 플랫폼에서는 프로세스에 연결하기 위해 관리자 권한이 필요합니다.",
	"c_cpp.debuggers.symbolSearchPath.description": "기호(pdb) 파일 검색에 사용할 디렉터리의 세미콜론으로 구분된 목록입니다(예: \"c:\\dir1;c:\\dir2\").",
	"c_cpp.debuggers.dumpPath.description": "지정된 프로그램에 대한 코어 덤프 파일의 선택적 전체 경로입니다(예: \"c:\\temp\\app.dmp\"). 기본값은 null입니다.",
	"c_cpp.debuggers.enableDebugHeap.description": "False이면 디버그 힙이 사용하지 않도록 설정된 상태로 프로세스가 시작됩니다. 이렇게 하면 환경 변수 '_NO_DEBUG_HEAP'이 '1'로 설정됩니다.",
	"c_cpp.debuggers.symbolLoadInfo.description": "기호 로드를 명시적으로 제어합니다.",
	"c_cpp.debuggers.symbolLoadInfo.loadAll.description": "true이면 모든 라이브러리의 기호가 로드됩니다. true가 아니면 solib 기호가 로드되지 않습니다. 기본값은 true입니다.",
	"c_cpp.debuggers.symbolLoadInfo.exceptionList.description": "세미콜론 ';'으로 구분된 파일 이름(와일드카드 허용) 목록이며, LoadAll의 동작을 수정합니다. LoadAll이 true이면 목록에 있는 이름과 일치하는 라이브러리의 기호를 로드하지 않습니다. true가 아니면 일치하는 라이브러리의 기호만 로드합니다. 예: \"foo.so;bar.so\"",
	"c_cpp.debuggers.requireExactSource.description": "현재 소스 코드가 PDB와 일치하도록 하는 선택적 플래그입니다."
}
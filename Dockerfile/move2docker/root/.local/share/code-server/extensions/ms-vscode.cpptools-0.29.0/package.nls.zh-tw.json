{
	"c_cpp.command.configurationSelect.title": "選取組態...",
	"c_cpp.command.configurationProviderSelect.title": "變更組態提供者...",
	"c_cpp.command.configurationEditJSON.title": "編輯組態 (JSON)",
	"c_cpp.command.configurationEditUI.title": "編輯組態 (UI)",
	"c_cpp.command.switchHeaderSource.title": "切換標頭/來源",
	"c_cpp.command.enableErrorSquiggles.title": "啟用錯誤波浪線",
	"c_cpp.command.disableErrorSquiggles.title": "停用錯誤波浪線",
	"c_cpp.command.toggleIncludeFallback.title": "切換包含錯誤上的 IntelliSense 引擎後援",
	"c_cpp.command.toggleDimInactiveRegions.title": "切換非使用中的區域著色",
	"c_cpp.command.resetDatabase.title": "重設 IntelliSense 資料庫",
	"c_cpp.command.takeSurvey.title": "填寫問卷",
	"c_cpp.command.buildAndDebugActiveFile.title": "組建及偵錯使用中的檔案",
	"c_cpp.command.logDiagnostics.title": "記錄診斷",
	"c_cpp.command.referencesViewGroupByType.title": "依參考型別分組",
	"c_cpp.command.referencesViewUngroupByType.title": "依參考型別取消分組",
	"c_cpp.command.rescanWorkspace.title": "重新掃描工作區",
	"c_cpp.command.vcpkgClipboardInstallSuggested.title": "將 vcpkg 安裝命令複製到剪貼簿",
	"c_cpp.command.vcpkgOnlineHelpSuggested.title": "瀏覽 vcpkg 說明頁面",
	"c_cpp.configuration.clang_format_path.description": "此為 clang-format 可執行檔的完整路徑。如果未指定，且在環境路徑中可用 clang-format，即會使用該格式。如果在環境路徑中找不到，則會使用延伸模組所配備的 clang-format 複本。",
	"c_cpp.configuration.clang_format_style.description": "編碼樣式，目前支援: Visual Studio、LLVM、Google、Chromium、Mozilla、WebKit。使用「檔案」可從目前目錄或父目錄的 .clang-format 檔案載入樣式。使用 {鍵: 值, ...} 可設定特定參數。例如，\"Visual Studio\" 樣式類似於: { BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All }",
	"c_cpp.configuration.clang_format_fallbackStyle.description": "當已使用樣式 \"file\" 叫用 clang-format，但找不到 .clang-format 檔案時，用作後援的預先定義樣式名稱。可能的值包括 Visual Studio、LLVM、Google、Chromium、Mozilla、WebKit、none 或使用 {鍵: 值, ...} 來設定特定參數。例如，\"Visual Studio\" 樣式類似於: { BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4 }",
	"c_cpp.configuration.clang_format_sortIncludes.description": "若設定，會覆寫 SortIncludes 參數所決定的包含排序行為。",
	"c_cpp.configuration.intelliSenseEngine.description": "控制 IntelliSense 提供者。「標籤剖析器」會提供非內容感知的「模糊」結果。「預設」會提供內容感知的結果。「停用」會關閉 C/C++ 語言服務功能。",
	"c_cpp.configuration.intelliSenseEngineFallback.description": "控制 IntelliSense 引擎是否會自動切換到包含 #include 錯誤之編譯單位的標籤剖析器。",
	"c_cpp.configuration.autocomplete.description": "控制自動完成提供者。\"Default\" 會使用現有的 IntelliSense 引擎。\"Disabled\" 會使用 Visual Studio Code 所提供的文字式完成。",
	"c_cpp.configuration.errorSquiggles.description": "控制 IntelliSense 引擎偵測到的可疑編譯錯誤是否會回報回編輯器。標籤剖析器引擎會忽略此設定。",
	"c_cpp.configuration.dimInactiveRegions.description": "控制非作用中前置處理器區塊的色彩是否與作用中程式碼不同。如果 IntelliSense 停用或使用預設高對比佈景主題，則此設定沒有效果。",
	"c_cpp.configuration.inactiveRegionOpacity.description": "控制非作用中前置處理器區塊的不透明度。在 0.1 與 1.0 之間縮放。只有在啟用非作用中區域變暗時，才會套用此設定。",
	"c_cpp.configuration.inactiveRegionForegroundColor.description": "控制非作用中前置處理器區塊的前景色彩。輸入的格式為十六進位色彩代碼或有效的佈景主題色彩。若未設定，會預設為編輯器的語法著色配置。只有在啟用非作用中區域變暗時，才會套用此設定。",
	"c_cpp.configuration.inactiveRegionBackgroundColor.description": "控制非作用中前置處理器區塊的背景色彩。輸入的格式為十六進位色彩代碼或有效的佈景主題色彩。若未設定，會預設為透明。只有在啟用非作用中區域變暗時，才會套用此設定。",
	"c_cpp.configuration.formatting.description": "\"Default\" 會啟用程式碼格式設定。\"Disabled\" 會停用程式碼格式設定。",
	"c_cpp.configuration.loggingLevel.description": "輸出面板中記錄的詳細程度。從最不詳細到最詳細的層級順序為: None < Error < Warning < Information < Debug.",
	"c_cpp.configuration.autoAddFileAssociations.description": "控制是否會在檔案為 C/C++ 檔案的瀏覽作業目標時，自動將檔案新增至 files.associations。",
	"c_cpp.configuration.workspaceParsingPriority.description": "控制非作用中工作區檔案的剖析是否會使用睡眠來避免使用 100% 的 CPU。值 highest/high/medium/low 會約略對應至 100/75/50/25% CPU 使用率。",
	"c_cpp.configuration.workspaceSymbols.description": "叫用 'Go to Symbol in Workspace' 時，要包含在查詢結果中的符號",
	"c_cpp.configuration.exclusionPolicy.description": "指示延伸模組在周遊穿過 \"browse.path\" 陣列，為決定應新增至程式碼瀏覽資料庫的檔案而使用 \"files.exclude\" 設定的時機。\"checkFolders\" 代表每個資料夾 (不會檢查個別檔案) 只會評估一次排除篩選。\"checkFilesAndFolders\" 表示將對遇到的所有檔案和資料夾評估排除篩選。如果您的 \"files.exclude\" 設定只包含資料夾，則 \"checkFolders\" 為最佳選擇，且會增加延伸模組可將程式碼瀏覽資料庫初始化的速度。",
	"c_cpp.configuration.preferredPathSeparator.description": "用作 #include 自動完成結果路徑分隔符號的字元。",
	"c_cpp.configuration.simplifyStructuredComments.description": "If true, tooltips of hover and auto-complete will only display certain labels of structured comments. Otherwise, all comments are displayed.",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.string.description": "開始多行或單行註解區塊的模式。對於多行註解區塊，接續模式預設為 ' * '，或此字串表示單行註解區塊。",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.object.begin.description": "開始多行或單行註解區塊的模式。",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.object.continue.description": "在多行或單行註解區塊中按下 ENTER 時，將在下一行插入的文字。",
	"c_cpp.configuration.commentContinuationPatterns.description": "定義在多行或單行註解區塊按下 ENTER 的編輯器行為。",
	"c_cpp.configuration.configurationWarnings.description": "決定當組態提供者延伸模組無法提供來源檔案的組態時，是否會顯示快顯通知。",
	"c_cpp.configuration.intelliSenseCachePath.description": "定義 IntelliSense 使用之快取先行編譯標頭檔的資料夾路徑。預設快取路徑在 Windows 上為 \"%LocalAppData%/Microsoft/vscode-cpptools\"，在 Linux 上為 \"$XDG_CACHE_HOME/vscode-cpptools/\" (若未定義 XDG_CACHE_HOME，則為 \"$HOME/.cache/vscode-cpptools/\")，在 Mac 上則為 \"$HOME/Library/Caches/vscode-cpptools/\"。如果未指定路徑或指定的路徑無效，就會使用預設路徑。",
	"c_cpp.configuration.intelliSenseCacheSize.description": "快取先行編譯標頭檔的每個工作區硬碟空間大小上限 (mb); 實際使用量可能會在此值周圍波動。預設大小為 5120 MB。當大小為 0 時，會停用先行編譯的標頭快取。",
	"c_cpp.configuration.default.includePath.description": "當 \"includePath\" 未指定時，要在設定中使用的值，或 \"includePath\" 中有 \"${default}\" 時要插入的值。",
	"c_cpp.configuration.default.defines.description": "當 \"defines\" 未指定時，要在設定中使用的值，或 \"defines\" 中有 \"${default}\" 時要插入的值。",
	"c_cpp.configuration.default.macFrameworkPath.description": "當 \"macFrameworkPath\" 未指定時，要在設定中使用的值，或 \"macFrameworkPath\" 中有 \"${default}\" 時要插入的值。",
	"c_cpp.configuration.default.windowsSdkVersion.description": "要在 Windows 上使用的 Windows SDK 包含路徑版本，例如 '10.0.17134.0'。",
	"c_cpp.configuration.default.compileCommands.description": "當 \"compileCommands\" 未指定或設定為 \"${default}\" 時，要在組態中使用的值。",
	"c_cpp.configuration.default.forcedInclude.description": "當 \"forcedInclude\" 未指定時，要在設定中使用的值，或 \"forcedInclude\" 中有 \"${default}\" 時要插入的值。",
	"c_cpp.configuration.default.intelliSenseMode.description": "當 \"intelliSenseMode\" 未指定或設定為 \"${default}\" 時，要在組態中使用的值。",
	"c_cpp.configuration.default.compilerPath.description": "當 \"compilerPath\" 未指定或設定為 \"${default}\" 時，要在組態中使用的值。",
	"c_cpp.configuration.default.compilerArgs.description": "當 \"compilerArgs\" 未指定或設定為 \"${default}\" 時，要在組態中使用的值。",
	"c_cpp.configuration.default.cStandard.description": "當 \"cStandard\" 未指定或設定為 \"${default}\" 時，要在組態中使用的值。",
	"c_cpp.configuration.default.cppStandard.description": "當 \"cppStandard\" 未指定或設定為 \"${default}\" 時，要在組態中使用的值。",
	"c_cpp.configuration.default.configurationProvider.description": "當 \"configurationProvider\" 未指定或設定為 \"${default}\" 時，要在組態中使用的值。",
	"c_cpp.configuration.default.browse.path.description": "當 \"browse.path\" 未指定時，要在設定中使用的值，或 \"browse.path\" 中有 \"${default}\" 時要插入的值。",
	"c_cpp.configuration.default.browse.databaseFilename.description": "當 \"browse.databaseFilename\" 未指定或設定為 \"${default}\" 時，要在組態中使用的值。",
	"c_cpp.configuration.default.browse.limitSymbolsToIncludedHeaders.description": "當 \"browse.limitSymbolsToIncludedHeaders\" 未指定或設定為 \"${default}\" 時，要在組態中使用的值。",
	"c_cpp.configuration.default.systemIncludePath.description": "要用於系統包含路徑的值。若設定，會覆寫透過 \"compilerPath\" 和 \"compileCommands\" 設定所取得的系統包含路徑。",
	"c_cpp.configuration.default.enableConfigurationSquiggles.description": "控制延伸模組是否會回報 c_cpp_properties.json 中偵測到的錯誤。",
	"c_cpp.configuration.default.customConfigurationVariables.description": "當未設定 \"customConfigurationVariables\" 時要在組態中使用的值，或當 \"${default}\" 在 \"customConfigurationVariables\" 中顯示為索引鍵時要插入的值。",
	"c_cpp.configuration.updateChannel.description": "設定為「測試人員」以自動下載並安裝最新的延伸模組測試人員組建 (包括即將推出的功能和更新)。",
	"c_cpp.configuration.experimentalFeatures.description": "控制「實驗性」功能是否可用。",
	"c_cpp.configuration.suggestSnippets.description": "若為 true，則由語言伺服器提供程式碼片段。",
	"c_cpp.configuration.enhancedColorization.description": "若已啟用，將會根據 IntelliSense 將程式碼著色。如果已停用 IntelliSense 或使用預設高對比主題，此設定就沒有效果。",
	"c_cpp.configuration.codeFolding.description": "若啟用，則由語言伺服器提供程式碼摺疊功能範圍。",
	"c_cpp.configuration.vcpkg.enabled.markdownDescription": "啟用 [vcpkg 相依性管理員](https://aka.ms/vcpkg/)的整合服務。",
	"c_cpp.configuration.renameRequiresIdentifier.description": "若為 true，則「重新命名符號」需要有效的 C/C++ 識別碼。",
	"c_cpp.configuration.debugger.useBacktickCommandSubstitution.description": "若為 true，偵錯工具殼層命令替代將會使用已淘汰的反引號 (`)",
	"c_cpp.contributes.views.cppReferencesView.title": "C/C++: 其他參考結果",
	"c_cpp.debuggers.pipeTransport.description": "出現時，會指示偵錯工具使用另一個可執行檔來連線至遠端電腦，該管道會在 VS Code 與 MI 啟用偵錯工具後端可執行檔之間傳送標準輸入/輸出 (例如 gdb)。",
	"c_cpp.debuggers.pipeTransport.default.pipeProgram": "輸入管道程式名稱的完整路徑，例如 '/usr/bin/ssh'",
	"c_cpp.debuggers.pipeTransport.default.debuggerPath": "目標機器的偵錯工具完整路徑，例如 /use/bin/gdb。",
	"c_cpp.debuggers.pipeTransport.debuggerPath.description": "目標機器的偵錯工具完整路徑，例如 /use/bin/gdb。",
	"c_cpp.debuggers.pipeTransport.pipeCwd.description": "管道程式工作目錄的完整路徑。",
	"c_cpp.debuggers.pipeTransport.pipeProgram.description": "要執行的完整管道命令。",
	"c_cpp.debuggers.pipeTransport.pipeArgs.description": "傳遞至管道程式以設定連線的命令列引數。",
	"c_cpp.debuggers.pipeTransport.pipeEnv.description": "傳遞至管道程式的環境變數。",
	"c_cpp.debuggers.pipeTransport.quoteArgs.description": "若 pipeProgram 的個別引數包含字元 (例如空格或定位字元)，是否應該加上引號? 若設定為 'false'，不會再自動為偵錯工具命令加上引號。\n預設為 'true'。",
	"c_cpp.debuggers.logging.description": "選擇性旗標，用以判斷應記錄到偵錯主控台的訊息類型。",
	"c_cpp.debuggers.logging.exceptions.description": "選擇性旗標，用以判斷是否應將例外狀況訊息記錄到偵錯主控台。預設為 true。",
	"c_cpp.debuggers.logging.moduleLoad.description": "選擇性旗標，用以判斷是否應將模組載入事件記錄到偵錯主控台。預設為 true。",
	"c_cpp.debuggers.logging.programOutput.description": "選擇性旗標，用以判斷是否應將程式輸出記錄到偵錯主控台。預設為 true。",
	"c_cpp.debuggers.logging.engineLogging.description": "選擇性旗標，用以判斷是否應將診斷偵錯引擎訊息記錄到偵錯主控台。預設為 false。",
	"c_cpp.debuggers.logging.trace.description": "選擇性旗標，用以判斷是否應將診斷介面卡命令追蹤記錄到偵錯主控台。預設為 false。",
	"c_cpp.debuggers.logging.traceResponse.description": "選擇性旗標，用以判斷是否應將診斷介面卡命令和回應追蹤記錄到偵錯主控台。預設為 false。",
	"c_cpp.debuggers.cppvsdbg.logging.threadExit.description": "選用旗標，可決定是否要將執行緒結束訊息記錄到偵錯主控台。預設: `false`。",
	"c_cpp.debuggers.cppvsdbg.logging.processExit.description": "選用旗標，可決定要將目標流程結束訊息記錄到偵錯主控台，或停止偵錯。預設: `true`。",
	"c_cpp.debuggers.text.description": "要執行的偵錯工具命令。",
	"c_cpp.debuggers.description.description": "命令的選擇性描述。",
	"c_cpp.debuggers.ignoreFailures.description": "若為 true，則應略過來自命令的失敗。預設值為 false。",
	"c_cpp.debuggers.program.description": "程式可執行檔的完整路徑。",
	"c_cpp.debuggers.args.description": "傳遞至程式的命令列引數。",
	"c_cpp.debuggers.cppdbg.type.description": "引擎的類型。必須是 \"cppdbg\"。",
	"c_cpp.debuggers.cppvsdbg.type.description": "引擎的類型。必須是 \"cppvsdbg\"。",
	"c_cpp.debuggers.targetArchitecture.description": "偵錯項目的架構。除非設定此參數，否則將會受到自動偵測。允許的值為 x86、arm、arm64、mips、x64、amd64 及 x86_64。",
	"c_cpp.debuggers.cwd.description": "目標的工作目錄",
	"c_cpp.debuggers.setupCommands.description": "為了安裝基礎偵錯工具而要執行的一或多個 GDB/LLDB 命令。範例: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }]。",
	"c_cpp.debuggers.customLaunchSetupCommands.description": "如有提供，這會以其他命令取代用於啟動目標的預設命令。舉例來說，這可以是 \"-target-attach\" 以附加到目標處理序。空的命令清單會將啟動命令取代為沒有任何項目，這在將啟動選項作為命令列選項提供給偵錯工具時相當實用。範例: \"customLaunchSetupCommands\": [ { \"text\": \"target-run\", \"description\": \"run target\", \"ignoreFailures\": false }]。",
	"c_cpp.debuggers.launchCompleteCommand.description": "為了讓目標處理序執行，而要在偵錯工具完全設定後執行的命令。允許的值為 \"exec-run\"、\"exec-continue\" 及 \"None\"。預設值為 \"exec-run\"。",
	"c_cpp.debuggers.cppdbg.visualizerFile.description": "偵錯此處理序時要使用的 .natvis 檔案。此選項與 GDB 美化顯示不相容。若使用此設定，也請參閱 \"showDisplayString\"。",
	"c_cpp.debuggers.cppvsdbg.visualizerFile.description": "偵錯此處理序時要使用的 .natvis 檔案。",
	"c_cpp.debuggers.showDisplayString.description": "指定 visualizerFile 時，showDisplayString 會啟用顯示字串。開啟此選項可能會導致偵錯期間的效能變慢。",
	"c_cpp.debuggers.environment.description": "要新增至程式環境的環境變數。範例: [ { \"name\": \"squid\", \"value\": \"clam\" } ]。",
	"c_cpp.debuggers.envFile.description": "包含環境變數定義之檔案的絕對路徑。此檔案具有以等號分隔每行的索引鍵值組。例如「鍵=值」",
	"c_cpp.debuggers.additionalSOLibSearchPath.description": "要用於搜尋 .so 檔案的目錄清單 (以分號分隔)。範例: \"c:\\dir1;c:\\dir2\"。",
	"c_cpp.debuggers.MIMode.description": "表示 MIDebugEngine 將連線的主控台偵錯工具。允許的值為 \"gdb\" \"lldb\"。",
	"c_cpp.debuggers.miDebuggerPath.description": "MI 偵錯工具 (例如 gdb) 的路徑。若未指定，會先搜尋偵錯工具的路徑。",
	"c_cpp.debuggers.miDebuggerArgs.description": "MI 偵錯工具 (例如 gdb) 的其他引數。",
	"c_cpp.debuggers.miDebuggerServerAddress.description": "MI 偵錯工具伺服器要連線至的網路位址 (範例: localhost:1234)。",
	"c_cpp.debuggers.stopAtEntry.description": "選擇性參數。若為 true，則偵錯工具應該在目標的進入點停止。如果已傳遞 processId。就沒有效果。",
	"c_cpp.debuggers.debugServerPath.description": "要啟動的偵錯伺服器選擇性完整路徑。預設為 null。",
	"c_cpp.debuggers.debugServerArgs.description": "選擇性偵錯伺服器引數。預設為 null。",
	"c_cpp.debuggers.serverStarted.description": "要在偵錯伺服器輸出中尋找的選擇性伺服器啟動模式。預設為 null。",
	"c_cpp.debuggers.filterStdout.description": "搜尋 stdout 資料流以取得伺服器啟動的模式，並將 stdout 記錄到偵錯輸出。預設為 true。",
	"c_cpp.debuggers.filterStderr.description": "搜尋 stderr 資料流以取得伺服器啟動的模式，並將 stderr 記錄到偵錯輸出。預設為 false。",
	"c_cpp.debuggers.serverLaunchTimeout.description": "偵錯工具等待 debugServer 啟動的選擇性時間，以毫秒為單位。預設為 10000。",
	"c_cpp.debuggers.coreDumpPath.description": "指定程式的核心傾印檔案選擇性完整路徑。預設為 null。",
	"c_cpp.debuggers.cppdbg.externalConsole.description": "若為 true，將會啟動偵錯項目的主控台。若為 false，則在 Linux 和 Windows 上會出現在整合式主控台內。",
	"c_cpp.debuggers.cppvsdbg.externalConsole.description": "若為 true，將會啟動偵錯項目的主控台。若為 false，則不會啟動任何主控台。",
	"c_cpp.debuggers.avoidWindowsConsoleRedirection.description": "若為 true，則停用整合式終端機支援需要的偵錯項目主控台重新導向。",
	"c_cpp.debuggers.sourceFileMap.description": "傳遞給偵錯引擎的選擇性來源檔案對應。範例: '{ \"/original/source/path\":\"/current/source/path\" }'",
	"c_cpp.debuggers.processId.anyOf.description": "要附加偵錯工具的選擇性處理序識別碼。使用 \"${command:pickProcess}\" 可取得要附加的本機執行中處理序清單。請注意，某些平台需要系統管理員權限才能附加至處理序。",
	"c_cpp.debuggers.symbolSearchPath.description": "要用於搜尋符號 (即 pdb) 檔案的目錄清單 (以分號分隔)。範例: \"c:\\dir1;c:\\dir2\"。",
	"c_cpp.debuggers.dumpPath.description": "指定程式之傾印檔案的選擇性完整路徑。範例: \"c:\\temp\\app.dmp\"。預設為 null。",
	"c_cpp.debuggers.enableDebugHeap.description": "若為 false，將會啟動已停用偵錯堆積的處理序。這會將環境變數 '_NO_DEBUG_HEAP' 設為 '1'。",
	"c_cpp.debuggers.symbolLoadInfo.description": "符號載入的明確控制。",
	"c_cpp.debuggers.symbolLoadInfo.loadAll.description": "若為 true，將會載入所有程式庫的符號，否則不會載入任何 solib 符號。預設值為 true。",
	"c_cpp.debuggers.symbolLoadInfo.exceptionList.description": "以分號 ';' 分隔的檔名清單 (允許使用萬用字元)。修改 LoadAll 的行為。如果 LoadAll 為 true，則不會載入與清單中任何名稱相符的程式庫符號。否則只會載入相符的程式庫符號。範例: \"foo.so;bar.so\"",
	"c_cpp.debuggers.requireExactSource.description": "要求目前原始程式碼與 pdb 相符的選用旗標。"
}
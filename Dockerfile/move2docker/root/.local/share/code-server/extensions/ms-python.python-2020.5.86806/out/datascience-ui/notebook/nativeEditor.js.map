{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/datascience-ui/native-editor/nativeEditor.less?cef7","webpack:///./src/datascience-ui/react-common/constants.ts","webpack:///./src/datascience-ui/native-editor/addCellLine.tsx","webpack:///./src/datascience-ui/native-editor/redux/actions.ts","webpack:///./src/datascience-ui/native-editor/nativeCell.tsx","webpack:///./src/datascience-ui/native-editor/toolbar.tsx","webpack:///./src/datascience-ui/native-editor/nativeEditor.tsx","webpack:///./src/datascience-ui/native-editor/redux/reducers/effects.ts","webpack:///./src/datascience-ui/native-editor/redux/reducers/execution.ts","webpack:///./src/datascience-ui/native-editor/redux/reducers/movement.ts","webpack:///./src/datascience-ui/native-editor/redux/reducers/creation.ts","webpack:///./src/datascience-ui/native-editor/redux/reducers/index.ts","webpack:///./src/datascience-ui/native-editor/index.tsx","webpack:///./src/datascience-ui/native-editor/redux/store.ts","webpack:///external \"log4js\"","webpack:///./src/datascience-ui/native-editor/nativeEditor.less"],"names":["i","chunkIds","length","deferredModules","j","deferredModule","module","chunkId","type","target","script","enumerable","get","getter","value","key","bind","Object","prototype","hasOwnProperty","call","object","property","console","error","err","jsonpArray","webpackJsonpCallback","content","options","transform","undefined","locals","exports","getOSType","window","navigator","platform","startsWith","OSX","Windows","userAgent","indexOf","Linux","Unknown","props","render","className","this","tooltip","plus","includePlus","baseTheme","class","image","InsertBelow","role","title","onClick","click","createIncomingActionWithPayload","data","payload","messageDirection","createIncomingAction","CssConstants","actionCreators","addCell","ADD_AND_FOCUS_NEW_CELL","newCellId","insertAboveFirst","INSERT_ABOVE_FIRST_AND_FOCUS_NEW_CELL","insertAbove","cellId","INSERT_ABOVE_AND_FOCUS_NEW_CELL","insertBelow","INSERT_BELOW_AND_FOCUS_NEW_CELL","executeCell","moveOp","EXECUTE_CELL_AND_ADVANCE","focusCell","cursorPos","Current","FOCUS_CELL","unfocusCell","code","UNFOCUS_CELL","selectCell","SELECT_CELL","executeAllCells","EXECUTE_ALL_CELLS","executeAbove","EXECUTE_ABOVE","executeCellAndBelow","EXECUTE_CELL_AND_BELOW","toggleVariableExplorer","TOGGLE_VARIABLE_EXPLORER","restartKernel","RESTART_KERNEL","interruptKernel","INTERRUPT_KERNEL","clearAllOutputs","ClearAllOutputs","export","EXPORT","save","SAVE","showDataViewer","variable","columnSize","SHOW_DATA_VIEWER","sendCommand","command","SEND_COMMAND","moveCellUp","MOVE_CELL_UP","moveCellDown","MOVE_CELL_DOWN","changeCellType","CHANGE_CELL_TYPE","toggleLineNumbers","TOGGLE_LINE_NUMBERS","toggleOutput","TOGGLE_OUTPUT","deleteCell","DELETE_CELL","undo","Undo","redo","Redo","arrowUp","ARROW_UP","arrowDown","ARROW_DOWN","editCell","e","EDIT_CELL","version","versionId","modelId","model","id","forward","reverse","getValue","linkClick","href","LINK_CLICK","showPlot","imageHtml","ShowPlot","gatherCell","GATHER_CELL","gatherCellToScript","GATHER_CELL_TO_SCRIPT","editorLoaded","EDITOR_LOADED","codeCreated","CODE_CREATED","loadedAllCells","LOADED_ALL_CELLS","editorUnmounted","UNMOUNT","selectKernel","SelectKernel","selectServer","SELECT_SERVER","openSettings","setting","OPEN_SETTINGS","getVariableData","newExecutionCount","startIndex","pageSize","GET_VARIABLE_DATA","executionCount","sortColumn","sortAscending","widgetFailed","ex","IPYWIDGET_RENDER_FAILURE","CellOutputWrapper","CellOutputWrapperClass","ImageButtonClass","prop","inputRef","wrapperRef","getCell","cellVM","cell","isCodeCell","cell_type","isMarkdownCell","isSelected","selected","isFocused","focused","isError","state","onMouseClick","ev","nativeEvent","elem","allowClickPropagation","stopPropagation","lastKeyPressed","onMouseDoubleClick","shouldRenderCodeEditor","inputBlockShow","editable","shouldRenderMarkdownEditor","isShowingMarkdownEditor","EditCellId","hasOutput","finished","executing","getCodeCell","keyDownInput","isFocusedWhenNotSuggesting","editorInfo","isSuggesting","isFirstLine","shiftKey","arrowUpFromCell","isLastLine","arrowDownFromCell","ctrlKey","metaKey","escapeCell","preventDefault","ChangeToCode","ChangeToMarkdown","ToggleLineNumbers","ToggleOutput","shiftEnterCell","ctrlEnterCell","altKey","altEnterCell","enterCell","DeleteCell","setTimeout","InsertAbove","useCustomEditorApi","current","focus","Unfocus","getCurrentCode","ArrowUp","ArrowDown","runAndMove","RunAndMove","runAndAdd","RunAndAdd","submitCell","Run","addNewCell","AddToEnd","addNewCellBelow","renderNavbar","addButtonRender","lastCell","MoveCellUp","disabled","firstCell","Up","MoveCellDown","Down","renderAddDivider","checkOutput","shouldRenderOutput","renderMiddleToolbar","gatherDisabled","execution_count","hasBeenRun","enableGather","switchTooltip","otherCellType","otherCellTypeCommand","otherCellImage","SwitchToMarkdown","SwitchToCode","toolbarClassName","hidden","busy","onMouseDown","event","GatherCode","Delete","renderControls","init","toString","isBusy","count","visible","renderInput","shouldRenderInput","editorOptions","history","codeTheme","onCodeChange","onCodeCreated","testMode","showWatermark","ref","monacoTheme","openLink","editorMeasureClassName","onCodeFocused","unfocused","onCodeUnfocused","keyDown","showLineNumbers","font","disableUndoStack","codeVersion","focusPending","_code","_file","renderOutput","themeMatplotlibPlots","toolbar","expandImage","maxTextSize","enableScroll","onOuterKeyDown","focusInOutput","renderCollapseBar","input","classes","Array","isArray","outputs","uri","messages","renderNormalCell","componentDidUpdate","prevProps","giveFocus","shouldComponentUpdate","nextProps","getUnknownMimeTypeFormatString","contains","document","activeElement","scrollIntoView","behavior","block","inline","cellOuterClass","cellWrapperClass","tabIndex","onKeyDown","onDoubleClick","closest","hideOutput","getContents","source","focusedElement","selectedInfo","selectionFocusedInfo","variableExplorerTooltip","variablesVisible","canRunAbove","selectedCellIndex","canRunBelow","cellCount","selectedCellId","canRestartAndInterruptKernel","kernel","jupyterServerStatus","NotStarted","RunAll","RunAbove","RunBelow","Restart","Interrupt","ClearAllOutput","ToggleVariableExplorer","VariableExplorer","Save","dirty","SaveAs","ExportToPython","SelectServer","ToolbarComponent","main","cellVMs","variables","variableState","ConnectedNativeCell","renderCount","waitingForLoadRender","getContentProps","submittedText","skipNextScroll","renderCell","scrollToBottom","scrollDiv","scrollBeyondLastLine","settings","extraSettings","editor","getVariableProps","debugging","showDataExplorer","skipDefault","closeVariableExplorer","pageIn","pageInVariableData","fontSize","size","currentExecutionCount","supportsDebugging","variableOptions","enableDuringDebugger","mainKeyDown","focusedCellId","index","firstLine","lastLine","maxOutputSize","enableScrollingForCellOutputs","allowUndo","undoStack","_div","componentDidMount","addEventListener","forceUpdate","componentWillUnmount","removeEventListener","loaded","requestAnimationFrame","dynamicFont","fontFamily","family","progressBar","addCellLine","style","rootCss","buildSettingsCss","renderToolbarPanel","renderVariablePanel","renderContentPanel","variableProps","monacoReady","contentProps","Effects","arg","prevState","findIndex","c","selectionInfo","newVMs","newCell","asCellViewModel","deselectCell","removeFocusIndex","focusedCellIndex","addFocusIndex","shouldFocusCell","addIndex","someOtherCellWasFocusedAndSelected","updateSettings","newSettings","JSON","parse","newEditorOptions","newFontFamily","newFontSize","theme","vscodeThemeName","knownDark","computeKnownDark","GetCssRequest","isDark","GetMonacoThemeRequest","lineDecorationsWidth","cloneDeep","Execution","executeRange","cellIds","originalArg","cellIdsToExecute","forEach","orig","clonedCell","push","ReExecuteCells","executeResult","slice","map","cellVm","executeCellAndAdvance","EXECUTE_CELL","INSERT_BELOW","executeSelectedCell","newList","postModelClearOutputs","newType","newNotebookCell","cells","redoStack","pushStack","Movement","swapCells","first","cvm","firstCellId","second","secondCellId","temp","postModelSwap","Bottom","Top","Creation","prepareCellVM","newText","inputBlockOpen","newVM","position","splice","result","postModelInsert","updateCell","updateOrAdd","s","deleteAllCells","inputBlockText","inputBlockCollapseNeeded","scrollCount","postModelRemoveAll","applyCellEdit","changes","before","rangeOffset","after","rangeLength","text","postModelRemove","previousSelection","filter","nextOrPrev","loadAllCells","vms","loadTotal","addAndFocusCell","ADD_NEW_CELL","insertAboveAndFocusCell","INSERT_ABOVE","insertBelowAndFocusCell","insertAboveFirstAndFocusCell","INSERT_ABOVE_FIRST","startCell","finishCell","unmount","handleUpdate","disabledQueueArg","queueAction","kind","oldCells","cellBelow","handleUndoModel","codeCellAboveId","newCells","handleRedoModel","reducerMap","exportCells","selectJupyterURI","gather","gatherToScript","started","LOAD_IPYWIDGET_CLASS_SUCCESS","handleLoadIPyWidgetClassSuccess","LOAD_IPYWIDGET_CLASS_FAILURE","handleLoadIPyWidgetClassFailure","IPYWIDGET_WIDGET_VERSION_NOT_SUPPORTED","notifyAboutUnsupportedWidgetVersions","StartCell","FinishCell","UpdateCellWithExecutionResults","NotebookDirty","notebookDirty","NotebookClean","notebookClean","LoadAllCells","NotebookRunAllCells","NotebookRunSelectedCell","NotebookAddCellBelow","DoSave","DeleteAllCells","StartProgress","startProgress","StopProgress","stopProgress","UpdateSettings","Activate","activate","RestartKernel","handleRestarted","GetCssResponse","handleCss","MonacoReady","GetMonacoThemeResponse","monacoThemeChange","UpdateModel","UpdateKernel","updateStatus","LocInit","handleLocInit","UpdateDisplayData","handleUpdateDisplayData","postOffice","inTestMode","acquireVsCodeApi","ConnectedNativeEditor","store","widgetContainerId","getElementById","log4js"],"mappings":"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","file":"nativeEditor.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"nativeEditor\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"\" + ({\"vendors~dataresource~geojson~modeldebug~nteract_transforms~nteract_transforms_vsdom\":\"vendors~dataresource~geojson~modeldebug~nteract_transforms~nteract_transforms_vsdom\",\"modeldebug\":\"modeldebug\",\"nteract_transforms_vsdom\":\"nteract_transforms_vsdom\",\"vendors~dataresource~vega\":\"vendors~dataresource~vega\",\"vendors~dataresource\":\"vendors~dataresource\",\"vendors~geojson\":\"vendors~geojson\",\"vendors~nteract_transforms\":\"vendors~nteract_transforms\",\"vendors~vega\":\"vendors~vega\",\"vega\":\"vega\",\"vendors~plotly\":\"vendors~plotly\"}[chunkId]||chunkId) + \".bundle.js\"\n \t}\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\t(function (module) {\n \t\t  if (module.exports\n \t\t    && !module.exports.__esModule\n \t\t    && module.exports.default === undefined\n \t\t  ) {\n \t\t    if (module.exports.headers\n \t\t      && module.exports.headers.common\n \t\t      && module.exports.headers.common.Accept\n \t\t      && module.exports.adapter\n \t\t      && module.exports.transformRequest\n \t\t      && module.exports.transformResponse\n \t\t    ) {\n \t\t      return;\n \t\t    }\n \t\t    module.exports.default = module.exports;\n \t\t  }\n \t\t})(module);\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n\n \t\t\t\t// create error before stack unwound to get useful stacktrace later\n \t\t\t\tvar error = new Error();\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n \t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tdocument.head.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"monaco\",\"commons\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","\nvar content = require(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./nativeEditor.less\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./nativeEditor.less\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./nativeEditor.less\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import { OSType } from '../../client/common/utils/platform';\n\n// Javascript keyCodes\nexport const KeyCodes = {\n    LeftArrow: 37,\n    UpArrow: 38,\n    RightArrow: 39,\n    DownArrow: 40,\n    PageUp: 33,\n    PageDown: 34,\n    End: 35,\n    Home: 36\n};\n\nexport function getOSType() {\n    if (window.navigator.platform.startsWith('Mac')) {\n        return OSType.OSX;\n    } else if (window.navigator.platform.startsWith('Win')) {\n        return OSType.Windows;\n    } else if (window.navigator.userAgent.indexOf('Linux') > 0) {\n        return OSType.Linux;\n    } else {\n        return OSType.Unknown;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n'use strict';\nimport * as React from 'react';\nimport { Image, ImageName } from '../react-common/image';\nimport { getLocString } from '../react-common/locReactSide';\n\ninterface IAddCellLineProps {\n    baseTheme: string;\n    includePlus: boolean;\n    className: string;\n    click(): void;\n}\n\nexport class AddCellLine extends React.Component<IAddCellLineProps> {\n    constructor(props: IAddCellLineProps) {\n        super(props);\n    }\n\n    public render() {\n        const className = `add-cell-line ${this.props.className}`;\n        const tooltip = getLocString('DataScience.insertBelow', 'Insert cell below');\n        const plus = this.props.includePlus ? (\n            <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.InsertBelow} />\n        ) : null;\n        return (\n            <div className={className}>\n                <button\n                    role=\"button\"\n                    aria-pressed=\"false\"\n                    title={tooltip}\n                    aria-label={tooltip}\n                    className=\"add-cell-line-button\"\n                    onClick={this.props.click}\n                >\n                    {plus}\n                    <span className=\"add-cell-line-divider\" />\n                </button>\n            </div>\n        );\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport * as uuid from 'uuid/v4';\nimport { NativeKeyboardCommandTelemetry, NativeMouseCommandTelemetry } from '../../../client/datascience/constants';\nimport {\n    IInteractiveWindowMapping,\n    InteractiveWindowMessages\n} from '../../../client/datascience/interactive-common/interactiveWindowTypes';\nimport { IJupyterVariable, IJupyterVariablesRequest } from '../../../client/datascience/types';\nimport { CursorPos } from '../../interactive-common/mainState';\nimport {\n    CommonAction,\n    CommonActionType,\n    CommonActionTypeMapping,\n    ICellAction,\n    ICellAndCursorAction,\n    ICodeAction,\n    ICodeCreatedAction,\n    IEditCellAction,\n    ILinkClickAction,\n    IOpenSettingsAction,\n    ISendCommandAction,\n    IShowDataViewerAction\n} from '../../interactive-common/redux/reducers/types';\nimport { IMonacoModelContentChangeEvent } from '../../react-common/monacoHelpers';\n\n// This function isn't made common and not exported, to ensure it isn't used elsewhere.\nfunction createIncomingActionWithPayload<\n    M extends IInteractiveWindowMapping & CommonActionTypeMapping,\n    K extends keyof M\n>(type: K, data: M[K]): CommonAction<M[K]> {\n    // tslint:disable-next-line: no-any\n    return { type, payload: { data, messageDirection: 'incoming' } as any } as any;\n}\n// This function isn't made common and not exported, to ensure it isn't used elsewhere.\nfunction createIncomingAction(type: CommonActionType | InteractiveWindowMessages): CommonAction {\n    return { type, payload: { messageDirection: 'incoming', data: undefined } };\n}\n\n// See https://react-redux.js.org/using-react-redux/connect-mapdispatch#defining-mapdispatchtoprops-as-an-object\nexport const actionCreators = {\n    addCell: () => createIncomingActionWithPayload(CommonActionType.ADD_AND_FOCUS_NEW_CELL, { newCellId: uuid() }),\n    insertAboveFirst: () =>\n        createIncomingActionWithPayload(CommonActionType.INSERT_ABOVE_FIRST_AND_FOCUS_NEW_CELL, { newCellId: uuid() }),\n    insertAbove: (cellId: string | undefined) =>\n        createIncomingActionWithPayload(CommonActionType.INSERT_ABOVE_AND_FOCUS_NEW_CELL, {\n            cellId,\n            newCellId: uuid()\n        }),\n    insertBelow: (cellId: string | undefined) =>\n        createIncomingActionWithPayload(CommonActionType.INSERT_BELOW_AND_FOCUS_NEW_CELL, {\n            cellId,\n            newCellId: uuid()\n        }),\n    executeCell: (cellId: string, moveOp: 'add' | 'select' | 'none') =>\n        createIncomingActionWithPayload(CommonActionType.EXECUTE_CELL_AND_ADVANCE, { cellId, moveOp }),\n    focusCell: (cellId: string, cursorPos: CursorPos = CursorPos.Current): CommonAction<ICellAndCursorAction> =>\n        createIncomingActionWithPayload(CommonActionType.FOCUS_CELL, { cellId, cursorPos }),\n    unfocusCell: (cellId: string, code: string) =>\n        createIncomingActionWithPayload(CommonActionType.UNFOCUS_CELL, { cellId, code }),\n    selectCell: (cellId: string, cursorPos: CursorPos = CursorPos.Current): CommonAction<ICellAndCursorAction> =>\n        createIncomingActionWithPayload(CommonActionType.SELECT_CELL, { cellId, cursorPos }),\n    executeAllCells: (): CommonAction => createIncomingAction(CommonActionType.EXECUTE_ALL_CELLS),\n    executeAbove: (cellId: string): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.EXECUTE_ABOVE, { cellId }),\n    executeCellAndBelow: (cellId: string): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.EXECUTE_CELL_AND_BELOW, { cellId }),\n    toggleVariableExplorer: (): CommonAction => createIncomingAction(CommonActionType.TOGGLE_VARIABLE_EXPLORER),\n    restartKernel: (): CommonAction => createIncomingAction(CommonActionType.RESTART_KERNEL),\n    interruptKernel: (): CommonAction => createIncomingAction(CommonActionType.INTERRUPT_KERNEL),\n    clearAllOutputs: (): CommonAction => createIncomingAction(InteractiveWindowMessages.ClearAllOutputs),\n    export: (): CommonAction => createIncomingAction(CommonActionType.EXPORT),\n    save: (): CommonAction => createIncomingAction(CommonActionType.SAVE),\n    showDataViewer: (variable: IJupyterVariable, columnSize: number): CommonAction<IShowDataViewerAction> =>\n        createIncomingActionWithPayload(CommonActionType.SHOW_DATA_VIEWER, { variable, columnSize }),\n    sendCommand: (\n        command: NativeKeyboardCommandTelemetry | NativeMouseCommandTelemetry\n    ): CommonAction<ISendCommandAction> => createIncomingActionWithPayload(CommonActionType.SEND_COMMAND, { command }),\n    moveCellUp: (cellId: string): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.MOVE_CELL_UP, { cellId }),\n    moveCellDown: (cellId: string): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.MOVE_CELL_DOWN, { cellId }),\n    changeCellType: (cellId: string) => createIncomingActionWithPayload(CommonActionType.CHANGE_CELL_TYPE, { cellId }),\n    toggleLineNumbers: (cellId: string): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.TOGGLE_LINE_NUMBERS, { cellId }),\n    toggleOutput: (cellId: string): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.TOGGLE_OUTPUT, { cellId }),\n    deleteCell: (cellId: string): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.DELETE_CELL, { cellId }),\n    undo: (): CommonAction => createIncomingAction(InteractiveWindowMessages.Undo),\n    redo: (): CommonAction => createIncomingAction(InteractiveWindowMessages.Redo),\n    arrowUp: (cellId: string, code: string): CommonAction<ICodeAction> =>\n        createIncomingActionWithPayload(CommonActionType.ARROW_UP, { cellId, code }),\n    arrowDown: (cellId: string, code: string): CommonAction<ICodeAction> =>\n        createIncomingActionWithPayload(CommonActionType.ARROW_DOWN, { cellId, code }),\n    editCell: (cellId: string, e: IMonacoModelContentChangeEvent): CommonAction<IEditCellAction> =>\n        createIncomingActionWithPayload(CommonActionType.EDIT_CELL, {\n            cellId,\n            version: e.versionId,\n            modelId: e.model.id,\n            forward: e.forward,\n            reverse: e.reverse,\n            id: cellId,\n            code: e.model.getValue()\n        }),\n    linkClick: (href: string): CommonAction<ILinkClickAction> =>\n        createIncomingActionWithPayload(CommonActionType.LINK_CLICK, { href }),\n    showPlot: (imageHtml: string) => createIncomingActionWithPayload(InteractiveWindowMessages.ShowPlot, imageHtml),\n    gatherCell: (cellId: string | undefined): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.GATHER_CELL, { cellId }),\n    gatherCellToScript: (cellId: string | undefined): CommonAction<ICellAction> =>\n        createIncomingActionWithPayload(CommonActionType.GATHER_CELL_TO_SCRIPT, { cellId }),\n    editorLoaded: (): CommonAction => createIncomingAction(CommonActionType.EDITOR_LOADED),\n    codeCreated: (cellId: string | undefined, modelId: string): CommonAction<ICodeCreatedAction> =>\n        createIncomingActionWithPayload(CommonActionType.CODE_CREATED, { cellId, modelId }),\n    loadedAllCells: (): CommonAction => createIncomingAction(CommonActionType.LOADED_ALL_CELLS),\n    editorUnmounted: (): CommonAction => createIncomingAction(CommonActionType.UNMOUNT),\n    selectKernel: (): CommonAction => createIncomingAction(InteractiveWindowMessages.SelectKernel),\n    selectServer: (): CommonAction => createIncomingAction(CommonActionType.SELECT_SERVER),\n    openSettings: (setting?: string): CommonAction<IOpenSettingsAction> =>\n        createIncomingActionWithPayload(CommonActionType.OPEN_SETTINGS, { setting }),\n    getVariableData: (\n        newExecutionCount: number,\n        startIndex: number = 0,\n        pageSize: number = 100\n    ): CommonAction<IJupyterVariablesRequest> =>\n        createIncomingActionWithPayload(CommonActionType.GET_VARIABLE_DATA, {\n            executionCount: newExecutionCount,\n            sortColumn: 'name',\n            sortAscending: true,\n            startIndex,\n            pageSize\n        }),\n    widgetFailed: (ex: Error): CommonAction<Error> =>\n        createIncomingActionWithPayload(CommonActionType.IPYWIDGET_RENDER_FAILURE, ex)\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport '../../client/common/extensions';\n\nimport { nbformat } from '@jupyterlab/coreutils';\nimport * as fastDeepEqual from 'fast-deep-equal';\nimport * as monacoEditor from 'monaco-editor/esm/vs/editor/editor.api';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\n\nimport { OSType } from '../../client/common/utils/platform';\nimport {\n    Identifiers,\n    NativeKeyboardCommandTelemetry,\n    NativeMouseCommandTelemetry\n} from '../../client/datascience/constants';\nimport { CellState } from '../../client/datascience/types';\nimport { concatMultilineStringInput } from '../common';\nimport { CellInput } from '../interactive-common/cellInput';\nimport { CellOutput } from '../interactive-common/cellOutput';\nimport { ExecutionCount } from '../interactive-common/executionCount';\nimport { InformationMessages } from '../interactive-common/informationMessages';\nimport { CursorPos, ICellViewModel, IFont } from '../interactive-common/mainState';\nimport { getOSType } from '../react-common/constants';\nimport { IKeyboardEvent } from '../react-common/event';\nimport { Image, ImageName } from '../react-common/image';\nimport { ImageButton } from '../react-common/imageButton';\nimport { getLocString } from '../react-common/locReactSide';\nimport { IMonacoModelContentChangeEvent } from '../react-common/monacoHelpers';\nimport { AddCellLine } from './addCellLine';\nimport { actionCreators } from './redux/actions';\n\nnamespace CssConstants {\n    export const CellOutputWrapper = 'cell-output-wrapper';\n    export const CellOutputWrapperClass = `.${CellOutputWrapper}`;\n    export const ImageButtonClass = '.image-button';\n}\n\ninterface INativeCellBaseProps {\n    role?: string;\n    cellVM: ICellViewModel;\n    baseTheme: string;\n    codeTheme: string;\n    testMode?: boolean;\n    maxTextSize?: number;\n    enableScroll?: boolean;\n    monacoTheme: string | undefined;\n    lastCell: boolean;\n    firstCell: boolean;\n    font: IFont;\n    allowUndo: boolean;\n    enableGather: boolean | undefined;\n    editorOptions: monacoEditor.editor.IEditorOptions;\n    themeMatplotlibPlots: boolean | undefined;\n    focusPending: number;\n    busy: boolean;\n    useCustomEditorApi: boolean;\n}\n\ntype INativeCellProps = INativeCellBaseProps & typeof actionCreators;\n\n// tslint:disable: react-this-binding-issue\nexport class NativeCell extends React.Component<INativeCellProps> {\n    private inputRef: React.RefObject<CellInput> = React.createRef<CellInput>();\n    private wrapperRef: React.RefObject<HTMLDivElement> = React.createRef<HTMLDivElement>();\n    private lastKeyPressed: string | undefined;\n\n    constructor(prop: INativeCellProps) {\n        super(prop);\n    }\n\n    public render() {\n        if (this.props.cellVM.cell.data.cell_type === 'messages') {\n            return <InformationMessages messages={this.props.cellVM.cell.data.messages} />;\n        } else {\n            return this.renderNormalCell();\n        }\n    }\n\n    public componentDidUpdate(prevProps: INativeCellProps) {\n        if (this.props.cellVM.selected && !prevProps.cellVM.selected && !this.props.cellVM.focused) {\n            this.giveFocus();\n        }\n\n        // Anytime we update, reset the key. This object will be reused for different cell ids\n        this.lastKeyPressed = undefined;\n    }\n\n    public shouldComponentUpdate(nextProps: INativeCellProps): boolean {\n        return !fastDeepEqual(this.props, nextProps);\n    }\n\n    // Public for testing\n    public getUnknownMimeTypeFormatString() {\n        return getLocString('DataScience.unknownMimeTypeFormat', 'Unknown Mime Type');\n    }\n\n    private giveFocus() {\n        if (this.wrapperRef && this.wrapperRef.current) {\n            // Give focus to the cell if not already owning focus\n            if (!this.wrapperRef.current.contains(document.activeElement)) {\n                this.wrapperRef.current.focus();\n            }\n\n            // Scroll into view (since we have focus). However this function\n            // is not supported on enzyme\n            // tslint:disable-next-line: no-any\n            if ((this.wrapperRef.current as any).scrollIntoView) {\n                this.wrapperRef.current.scrollIntoView({ behavior: 'auto', block: 'nearest', inline: 'nearest' });\n            }\n        }\n    }\n\n    private getCell = () => {\n        return this.props.cellVM.cell;\n    };\n\n    private isCodeCell = () => {\n        return this.props.cellVM.cell.data.cell_type === 'code';\n    };\n\n    private isMarkdownCell = () => {\n        return this.props.cellVM.cell.data.cell_type === 'markdown';\n    };\n\n    private isSelected = () => {\n        return this.props.cellVM.selected;\n    };\n\n    private isFocused = () => {\n        return this.props.cellVM.focused;\n    };\n\n    private isError = () => {\n        return this.props.cellVM.cell.state === CellState.error;\n    };\n\n    private renderNormalCell() {\n        const cellOuterClass = this.props.cellVM.editable ? 'cell-outer-editable' : 'cell-outer';\n        let cellWrapperClass = this.props.cellVM.editable ? 'cell-wrapper' : 'cell-wrapper cell-wrapper-noneditable';\n        if (this.isSelected() && !this.isFocused()) {\n            cellWrapperClass += ' cell-wrapper-selected';\n        }\n        if (this.isFocused()) {\n            cellWrapperClass += ' cell-wrapper-focused';\n        }\n\n        // Content changes based on if a markdown cell or not.\n        const content =\n            this.isMarkdownCell() && !this.isShowingMarkdownEditor() ? (\n                <div className=\"cell-result-container\">\n                    <div className=\"cell-row-container\">\n                        {this.renderCollapseBar(false)}\n                        {this.renderOutput()}\n                    </div>\n                    {this.renderAddDivider(false)}\n                </div>\n            ) : (\n                <div className=\"cell-result-container\">\n                    <div className=\"cell-row-container\">\n                        {this.renderCollapseBar(true)}\n                        {this.renderControls()}\n                        {this.renderInput()}\n                    </div>\n                    {this.renderAddDivider(true)}\n                    <div className=\"cell-row-container\">\n                        {this.renderCollapseBar(false)}\n                        {this.renderOutput()}\n                    </div>\n                </div>\n            );\n\n        return (\n            <div\n                className={cellWrapperClass}\n                role={this.props.role}\n                ref={this.wrapperRef}\n                tabIndex={0}\n                onKeyDown={this.onOuterKeyDown}\n                onClick={this.onMouseClick}\n                onDoubleClick={this.onMouseDoubleClick}\n            >\n                <div className={cellOuterClass}>\n                    {this.renderNavbar()}\n                    <div className=\"content-div\">{content}</div>\n                </div>\n            </div>\n        );\n    }\n\n    private allowClickPropagation(elem: HTMLElement): boolean {\n        if (this.isMarkdownCell()) {\n            return true;\n        }\n        if (!elem.closest(CssConstants.ImageButtonClass) && !elem.closest(CssConstants.CellOutputWrapperClass)) {\n            return true;\n        }\n        return false;\n    }\n\n    private onMouseClick = (ev: React.MouseEvent<HTMLDivElement>) => {\n        if (ev.nativeEvent.target) {\n            const elem = ev.nativeEvent.target as HTMLElement;\n            if (this.allowClickPropagation(elem)) {\n                // Not a click on an button in a toolbar or in output, select the cell.\n                ev.stopPropagation();\n                this.lastKeyPressed = undefined;\n                this.props.selectCell(this.cellId);\n            }\n        }\n    };\n\n    private onMouseDoubleClick = (ev: React.MouseEvent<HTMLDivElement>) => {\n        const elem = ev.nativeEvent.target as HTMLElement;\n        if (this.allowClickPropagation(elem)) {\n            // When we receive double click, propagate upwards. Might change our state\n            ev.stopPropagation();\n            this.props.focusCell(this.cellId, CursorPos.Current);\n        }\n    };\n\n    private shouldRenderCodeEditor = (): boolean => {\n        return this.isCodeCell() && (this.props.cellVM.inputBlockShow || this.props.cellVM.editable);\n    };\n\n    private shouldRenderMarkdownEditor = (): boolean => {\n        return (\n            this.isMarkdownCell() &&\n            (this.isShowingMarkdownEditor() || this.props.cellVM.cell.id === Identifiers.EditCellId)\n        );\n    };\n\n    private isShowingMarkdownEditor = (): boolean => {\n        return this.isMarkdownCell() && this.props.cellVM.focused;\n    };\n\n    private shouldRenderInput(): boolean {\n        return this.shouldRenderCodeEditor() || this.shouldRenderMarkdownEditor();\n    }\n\n    private hasOutput = () => {\n        return (\n            this.getCell().state === CellState.finished ||\n            this.getCell().state === CellState.error ||\n            this.getCell().state === CellState.executing\n        );\n    };\n\n    private getCodeCell = () => {\n        return this.props.cellVM.cell.data as nbformat.ICodeCell;\n    };\n\n    private shouldRenderOutput(): boolean {\n        if (this.isCodeCell()) {\n            const cell = this.getCodeCell();\n            return (\n                this.hasOutput() &&\n                cell.outputs &&\n                !this.props.cellVM.hideOutput &&\n                Array.isArray(cell.outputs) &&\n                cell.outputs.length !== 0\n            );\n        } else if (this.isMarkdownCell()) {\n            return !this.isShowingMarkdownEditor();\n        }\n        return false;\n    }\n\n    // tslint:disable-next-line: cyclomatic-complexity max-func-body-length\n    private keyDownInput = (cellId: string, e: IKeyboardEvent) => {\n        const isFocusedWhenNotSuggesting = this.isFocused() && e.editorInfo && !e.editorInfo.isSuggesting;\n        switch (e.code) {\n            case 'ArrowUp':\n            case 'k':\n                if ((isFocusedWhenNotSuggesting && e.editorInfo!.isFirstLine && !e.shiftKey) || !this.isFocused()) {\n                    this.arrowUpFromCell(e);\n                }\n                break;\n            case 'ArrowDown':\n            case 'j':\n                if ((isFocusedWhenNotSuggesting && e.editorInfo!.isLastLine && !e.shiftKey) || !this.isFocused()) {\n                    this.arrowDownFromCell(e);\n                }\n                break;\n            case 's':\n                if ((e.ctrlKey && getOSType() !== OSType.OSX) || (e.metaKey && getOSType() === OSType.OSX)) {\n                    // This is save, save our cells\n                    this.props.save();\n                }\n                break;\n\n            case 'Escape':\n                if (isFocusedWhenNotSuggesting) {\n                    this.escapeCell(e);\n                }\n                break;\n            case 'y':\n                if (!this.isFocused() && this.isSelected() && this.isMarkdownCell()) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                    this.props.changeCellType(cellId);\n                    this.props.sendCommand(NativeKeyboardCommandTelemetry.ChangeToCode);\n                }\n                break;\n            case 'm':\n                if (!this.isFocused() && this.isSelected() && this.isCodeCell()) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                    this.props.changeCellType(cellId);\n                    this.props.sendCommand(NativeKeyboardCommandTelemetry.ChangeToMarkdown);\n                }\n                break;\n            case 'l':\n                if (!this.isFocused() && this.isSelected()) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                    this.props.toggleLineNumbers(cellId);\n                    this.props.sendCommand(NativeKeyboardCommandTelemetry.ToggleLineNumbers);\n                }\n                break;\n            case 'o':\n                if (!this.isFocused() && this.isSelected()) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                    this.props.toggleOutput(cellId);\n                    this.props.sendCommand(NativeKeyboardCommandTelemetry.ToggleOutput);\n                }\n                break;\n            case 'NumpadEnter':\n            case 'Enter':\n                if (e.shiftKey) {\n                    this.shiftEnterCell(e);\n                } else if (e.ctrlKey) {\n                    this.ctrlEnterCell(e);\n                } else if (e.altKey) {\n                    this.altEnterCell(e);\n                } else {\n                    this.enterCell(e);\n                }\n                break;\n            case 'd':\n                if (this.lastKeyPressed === 'd' && !this.isFocused() && this.isSelected()) {\n                    e.stopPropagation();\n                    this.lastKeyPressed = undefined; // Reset it so we don't keep deleting\n                    this.props.deleteCell(cellId);\n                    this.props.sendCommand(NativeKeyboardCommandTelemetry.DeleteCell);\n                }\n                break;\n            case 'a':\n                if (!this.isFocused()) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                    setTimeout(() => this.props.insertAbove(cellId), 1);\n                    this.props.sendCommand(NativeKeyboardCommandTelemetry.InsertAbove);\n                }\n                break;\n            case 'b':\n                if (!this.isFocused()) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                    setTimeout(() => this.props.insertBelow(cellId), 1);\n                    this.props.sendCommand(NativeKeyboardCommandTelemetry.InsertBelow);\n                }\n                break;\n            case 'z':\n            case 'Z':\n                if (!this.isFocused() && !this.props.useCustomEditorApi) {\n                    if (e.shiftKey && !e.ctrlKey && !e.altKey) {\n                        e.stopPropagation();\n                        this.props.redo();\n                        this.props.sendCommand(NativeKeyboardCommandTelemetry.Redo);\n                    } else if (!e.shiftKey && !e.altKey && !e.ctrlKey) {\n                        e.stopPropagation();\n                        this.props.undo();\n                        this.props.sendCommand(NativeKeyboardCommandTelemetry.Undo);\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n\n        this.lastKeyPressed = e.code;\n    };\n\n    private get cellId(): string {\n        return this.props.cellVM.cell.id;\n    }\n\n    private escapeCell = (e: IKeyboardEvent) => {\n        // Unfocus the current cell by giving focus to the cell itself\n        if (this.wrapperRef && this.wrapperRef.current && this.isFocused()) {\n            e.stopPropagation();\n            this.wrapperRef.current.focus();\n            this.props.sendCommand(NativeKeyboardCommandTelemetry.Unfocus);\n        }\n    };\n\n    private arrowUpFromCell = (e: IKeyboardEvent) => {\n        e.stopPropagation();\n        e.preventDefault();\n        this.props.arrowUp(this.cellId, this.getCurrentCode());\n        this.props.sendCommand(NativeKeyboardCommandTelemetry.ArrowUp);\n    };\n\n    private arrowDownFromCell = (e: IKeyboardEvent) => {\n        e.stopPropagation();\n        e.preventDefault();\n        this.props.arrowDown(this.cellId, this.getCurrentCode());\n        this.props.sendCommand(NativeKeyboardCommandTelemetry.ArrowDown);\n    };\n\n    private enterCell = (e: IKeyboardEvent) => {\n        // If focused, then ignore this call. It should go to the focused cell instead.\n        if (!this.isFocused() && !e.editorInfo && this.wrapperRef && this.wrapperRef && this.isSelected()) {\n            e.stopPropagation();\n            e.preventDefault();\n            this.props.focusCell(this.cellId, CursorPos.Current);\n        }\n    };\n\n    private shiftEnterCell = (e: IKeyboardEvent) => {\n        // Prevent shift enter from add an enter\n        e.stopPropagation();\n        e.preventDefault();\n\n        // Submit and move to the next.\n        this.runAndMove();\n\n        this.props.sendCommand(NativeKeyboardCommandTelemetry.RunAndMove);\n    };\n\n    private altEnterCell = (e: IKeyboardEvent) => {\n        // Prevent shift enter from add an enter\n        e.stopPropagation();\n        e.preventDefault();\n\n        // Submit this cell\n        this.runAndAdd();\n\n        this.props.sendCommand(NativeKeyboardCommandTelemetry.RunAndAdd);\n    };\n\n    private runAndMove() {\n        // Submit this cell\n        this.submitCell(this.props.lastCell ? 'add' : 'select');\n    }\n\n    private runAndAdd() {\n        // Submit this cell\n        this.submitCell('add');\n    }\n\n    private ctrlEnterCell = (e: IKeyboardEvent) => {\n        // Prevent shift enter from add an enter\n        e.stopPropagation();\n        e.preventDefault();\n\n        // Escape the current cell if it is markdown to make it render\n        if (this.isMarkdownCell()) {\n            this.escapeCell(e);\n        }\n\n        // Submit this cell\n        this.submitCell('none');\n        this.props.sendCommand(NativeKeyboardCommandTelemetry.Run);\n    };\n\n    private submitCell = (moveOp: 'add' | 'select' | 'none') => {\n        this.props.executeCell(this.cellId, moveOp);\n    };\n\n    private addNewCell = () => {\n        setTimeout(() => this.props.insertBelow(this.cellId), 1);\n        this.props.sendCommand(NativeMouseCommandTelemetry.AddToEnd);\n    };\n    private addNewCellBelow = () => {\n        setTimeout(() => this.props.insertBelow(this.cellId), 1);\n        this.props.sendCommand(NativeMouseCommandTelemetry.InsertBelow);\n    };\n\n    private renderNavbar = () => {\n        const moveUp = () => {\n            this.props.moveCellUp(this.cellId);\n            this.props.sendCommand(NativeMouseCommandTelemetry.MoveCellUp);\n        };\n        const moveDown = () => {\n            this.props.moveCellDown(this.cellId);\n            this.props.sendCommand(NativeMouseCommandTelemetry.MoveCellDown);\n        };\n        const addButtonRender = !this.props.lastCell ? (\n            <div className=\"navbar-add-button\">\n                <ImageButton\n                    baseTheme={this.props.baseTheme}\n                    onClick={this.addNewCellBelow}\n                    tooltip={getLocString('DataScience.insertBelow', 'Insert cell below')}\n                >\n                    <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.InsertBelow} />\n                </ImageButton>\n            </div>\n        ) : null;\n\n        return (\n            <div className=\"navbar-div\">\n                <div>\n                    <ImageButton\n                        baseTheme={this.props.baseTheme}\n                        onClick={moveUp}\n                        disabled={this.props.firstCell}\n                        tooltip={getLocString('DataScience.moveCellUp', 'Move cell up')}\n                    >\n                        <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Up} />\n                    </ImageButton>\n                </div>\n                <div>\n                    <ImageButton\n                        baseTheme={this.props.baseTheme}\n                        onClick={moveDown}\n                        disabled={this.props.lastCell}\n                        tooltip={getLocString('DataScience.moveCellDown', 'Move cell down')}\n                    >\n                        <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Down} />\n                    </ImageButton>\n                </div>\n                {addButtonRender}\n            </div>\n        );\n    };\n\n    private renderAddDivider = (checkOutput: boolean) => {\n        // Skip on the last cell\n        if (!this.props.lastCell) {\n            // Divider should only show if no output\n            if (!checkOutput || !this.shouldRenderOutput()) {\n                return (\n                    <AddCellLine\n                        className=\"add-divider\"\n                        baseTheme={this.props.baseTheme}\n                        includePlus={false}\n                        click={this.addNewCell}\n                    />\n                );\n            }\n        }\n\n        return null;\n    };\n\n    private getCurrentCode(): string {\n        // Input may not be open at this time. If not, then use current cell contents.\n        const contents = this.inputRef.current ? this.inputRef.current.getContents() : undefined;\n        return contents || concatMultilineStringInput(this.props.cellVM.cell.data.source);\n    }\n\n    private renderMiddleToolbar = () => {\n        const cellId = this.props.cellVM.cell.id;\n        const runCell = () => {\n            this.runAndMove();\n            this.props.sendCommand(NativeMouseCommandTelemetry.Run);\n        };\n        const gatherCell = () => {\n            this.props.gatherCell(cellId);\n        };\n        const deleteCell = () => {\n            this.props.deleteCell(cellId);\n            this.props.sendCommand(NativeMouseCommandTelemetry.DeleteCell);\n        };\n        const gatherDisabled =\n            this.props.cellVM.cell.data.execution_count === null ||\n            this.props.cellVM.hasBeenRun === null ||\n            this.props.cellVM.hasBeenRun === false ||\n            this.isError() ||\n            this.isMarkdownCell() ||\n            this.props.enableGather === false;\n        const switchTooltip =\n            this.props.cellVM.cell.data.cell_type === 'code'\n                ? getLocString('DataScience.switchToMarkdown', 'Change to markdown')\n                : getLocString('DataScience.switchToCode', 'Change to code');\n        const otherCellType = this.props.cellVM.cell.data.cell_type === 'code' ? 'markdown' : 'code';\n        const otherCellTypeCommand =\n            otherCellType === 'markdown'\n                ? NativeMouseCommandTelemetry.ChangeToMarkdown\n                : NativeMouseCommandTelemetry.ChangeToCode;\n        const otherCellImage = otherCellType === 'markdown' ? ImageName.SwitchToMarkdown : ImageName.SwitchToCode;\n        const switchCellType = (event: React.MouseEvent<HTMLButtonElement>) => {\n            // Prevent this mouse click from stealing focus so that we\n            // can give focus to the cell input.\n            event.stopPropagation();\n            event.preventDefault();\n            this.props.changeCellType(cellId);\n            this.props.sendCommand(otherCellTypeCommand);\n        };\n        const toolbarClassName = this.props.cellVM.cell.data.cell_type === 'code' ? '' : 'markdown-toolbar';\n\n        return (\n            <div className={toolbarClassName}>\n                <div className=\"native-editor-celltoolbar-middle\">\n                    <ImageButton\n                        baseTheme={this.props.baseTheme}\n                        onClick={runCell}\n                        tooltip={getLocString('DataScience.runCell', 'Run cell')}\n                        hidden={this.isMarkdownCell()}\n                        disabled={this.props.busy}\n                    >\n                        <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Run} />\n                    </ImageButton>\n                    <ImageButton baseTheme={this.props.baseTheme} onMouseDown={switchCellType} tooltip={switchTooltip}>\n                        <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={otherCellImage} />\n                    </ImageButton>\n                    <ImageButton\n                        baseTheme={this.props.baseTheme}\n                        onClick={gatherCell}\n                        tooltip={getLocString(\n                            'DataScience.gatherCell',\n                            'Gather the code required to generate this cell into a new notebook'\n                        )}\n                        hidden={gatherDisabled}\n                    >\n                        <Image\n                            baseTheme={this.props.baseTheme}\n                            class=\"image-button-image\"\n                            image={ImageName.GatherCode}\n                        />\n                    </ImageButton>\n                    <ImageButton\n                        baseTheme={this.props.baseTheme}\n                        onClick={deleteCell}\n                        tooltip={getLocString('DataScience.deleteCell', 'Delete cell')}\n                        className=\"delete-cell-button hover-cell-button\"\n                    >\n                        <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Delete} />\n                    </ImageButton>\n                </div>\n                <div className=\"native-editor-celltoolbar-divider\" />\n            </div>\n        );\n    };\n\n    private renderControls = () => {\n        const busy =\n            this.props.cellVM.cell.state === CellState.init || this.props.cellVM.cell.state === CellState.executing;\n        const executionCount =\n            this.props.cellVM &&\n            this.props.cellVM.cell &&\n            this.props.cellVM.cell.data &&\n            this.props.cellVM.cell.data.execution_count\n                ? this.props.cellVM.cell.data.execution_count.toString()\n                : '-';\n\n        return (\n            <div className=\"controls-div\">\n                <ExecutionCount isBusy={busy} count={executionCount} visible={this.isCodeCell()} />\n            </div>\n        );\n    };\n\n    private renderInput = () => {\n        if (this.shouldRenderInput()) {\n            return (\n                <div className=\"cell-input-wrapper\">\n                    {this.renderMiddleToolbar()}\n                    <CellInput\n                        cellVM={this.props.cellVM}\n                        editorOptions={this.props.editorOptions}\n                        history={undefined}\n                        codeTheme={this.props.codeTheme}\n                        onCodeChange={this.onCodeChange}\n                        onCodeCreated={this.onCodeCreated}\n                        testMode={this.props.testMode ? true : false}\n                        showWatermark={false}\n                        ref={this.inputRef}\n                        monacoTheme={this.props.monacoTheme}\n                        openLink={this.openLink}\n                        editorMeasureClassName={undefined}\n                        focused={this.onCodeFocused}\n                        unfocused={this.onCodeUnfocused}\n                        keyDown={this.keyDownInput}\n                        showLineNumbers={this.props.cellVM.showLineNumbers}\n                        font={this.props.font}\n                        disableUndoStack={this.props.useCustomEditorApi}\n                        codeVersion={this.props.cellVM.codeVersion ? this.props.cellVM.codeVersion : 1}\n                        focusPending={this.props.focusPending}\n                    />\n                </div>\n            );\n        }\n        return null;\n    };\n\n    private onCodeFocused = () => {\n        this.props.focusCell(this.cellId, CursorPos.Current);\n    };\n\n    private onCodeUnfocused = () => {\n        // Make sure to save the code from the editor into the cell\n        this.props.unfocusCell(this.cellId, this.getCurrentCode());\n    };\n\n    private onCodeChange = (e: IMonacoModelContentChangeEvent) => {\n        this.props.editCell(this.getCell().id, e);\n    };\n\n    private onCodeCreated = (_code: string, _file: string, cellId: string, modelId: string) => {\n        this.props.codeCreated(cellId, modelId);\n    };\n\n    private renderOutput = (): JSX.Element | null => {\n        const themeMatplotlibPlots = this.props.themeMatplotlibPlots ? true : false;\n        const toolbar = this.props.cellVM.cell.data.cell_type === 'markdown' ? this.renderMiddleToolbar() : null;\n        if (this.shouldRenderOutput()) {\n            return (\n                <div className={CssConstants.CellOutputWrapper}>\n                    {toolbar}\n                    <CellOutput\n                        cellVM={this.props.cellVM}\n                        baseTheme={this.props.baseTheme}\n                        expandImage={this.props.showPlot}\n                        maxTextSize={this.props.maxTextSize}\n                        enableScroll={this.props.enableScroll}\n                        themeMatplotlibPlots={themeMatplotlibPlots}\n                        widgetFailed={this.props.widgetFailed}\n                    />\n                </div>\n            );\n        }\n        return null;\n    };\n\n    private onOuterKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n        // Handle keydown events for the entire cell when we don't have focus\n        if (event.key !== 'Tab' && !this.isFocused() && !this.focusInOutput()) {\n            this.keyDownInput(this.props.cellVM.cell.id, {\n                code: event.key,\n                shiftKey: event.shiftKey,\n                ctrlKey: event.ctrlKey,\n                metaKey: event.metaKey,\n                altKey: event.altKey,\n                target: event.target as HTMLDivElement,\n                stopPropagation: () => event.stopPropagation(),\n                preventDefault: () => event.preventDefault()\n            });\n        }\n    };\n\n    private focusInOutput(): boolean {\n        const focusedElement = document.activeElement as HTMLElement;\n        if (focusedElement) {\n            return focusedElement.closest(CssConstants.CellOutputWrapperClass) !== null;\n        }\n        return false;\n    }\n\n    private renderCollapseBar = (input: boolean) => {\n        let classes = 'collapse-bar';\n\n        if (this.isSelected() && !this.isFocused()) {\n            classes += ' collapse-bar-selected';\n        }\n        if (this.isFocused()) {\n            classes += ' collapse-bar-focused';\n        }\n\n        if (input) {\n            return <div className={classes}></div>;\n        }\n\n        if (this.props.cellVM.cell.data.cell_type === 'markdown') {\n            classes += ' collapse-bar-markdown';\n        } else if (\n            Array.isArray(this.props.cellVM.cell.data.outputs) &&\n            this.props.cellVM.cell.data.outputs.length !== 0\n        ) {\n            classes += ' collapse-bar-output';\n        } else {\n            return null;\n        }\n\n        return <div className={classes}></div>;\n    };\n\n    private openLink = (uri: monacoEditor.Uri) => {\n        this.props.linkClick(uri.toString());\n    };\n}\n\n// Main export, return a redux connected editor\nexport function getConnectedNativeCell() {\n    return connect(null, actionCreators)(NativeCell);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { NativeMouseCommandTelemetry } from '../../client/datascience/constants';\nimport { KernelSelection } from '../interactive-common/kernelSelection';\nimport {\n    getSelectedAndFocusedInfo,\n    IFont,\n    IServerState,\n    SelectionAndFocusedInfo,\n    ServerStatus\n} from '../interactive-common/mainState';\nimport { IStore } from '../interactive-common/redux/store';\nimport { Image, ImageName } from '../react-common/image';\nimport { ImageButton } from '../react-common/imageButton';\nimport { getLocString } from '../react-common/locReactSide';\nimport './nativeEditor.less';\nimport { actionCreators } from './redux/actions';\n\ntype INativeEditorDataProps = {\n    busy: boolean;\n    dirty: boolean;\n    baseTheme: string;\n    cellCount: number;\n    font: IFont;\n    kernel: IServerState;\n    selectionFocusedInfo: SelectionAndFocusedInfo;\n    variablesVisible: boolean;\n};\nexport type INativeEditorToolbarProps = INativeEditorDataProps & {\n    sendCommand: typeof actionCreators.sendCommand;\n    clearAllOutputs: typeof actionCreators.clearAllOutputs;\n    export: typeof actionCreators.export;\n    addCell: typeof actionCreators.addCell;\n    save: typeof actionCreators.save;\n    executeAllCells: typeof actionCreators.executeAllCells;\n    toggleVariableExplorer: typeof actionCreators.toggleVariableExplorer;\n    executeAbove: typeof actionCreators.executeAbove;\n    executeCellAndBelow: typeof actionCreators.executeCellAndBelow;\n    restartKernel: typeof actionCreators.restartKernel;\n    interruptKernel: typeof actionCreators.interruptKernel;\n    selectKernel: typeof actionCreators.selectKernel;\n    selectServer: typeof actionCreators.selectServer;\n};\n\nfunction mapStateToProps(state: IStore): INativeEditorDataProps {\n    return {\n        ...state.main,\n        cellCount: state.main.cellVMs.length,\n        selectionFocusedInfo: getSelectedAndFocusedInfo(state.main),\n        variablesVisible: state.variables.visible\n    };\n}\n\nexport class Toolbar extends React.PureComponent<INativeEditorToolbarProps> {\n    constructor(props: INativeEditorToolbarProps) {\n        super(props);\n    }\n\n    // tslint:disable: react-this-binding-issue\n    // tslint:disable-next-line: max-func-body-length\n    public render() {\n        const selectedInfo = this.props.selectionFocusedInfo;\n\n        const addCell = () => {\n            setTimeout(() => this.props.addCell(), 1);\n            this.props.sendCommand(NativeMouseCommandTelemetry.AddToEnd);\n        };\n        const runAll = () => {\n            // Run all cells currently available.\n            this.props.executeAllCells();\n            this.props.sendCommand(NativeMouseCommandTelemetry.RunAll);\n        };\n        const save = () => {\n            this.props.save();\n            this.props.sendCommand(NativeMouseCommandTelemetry.Save);\n        };\n        const toggleVariableExplorer = () => {\n            this.props.toggleVariableExplorer();\n            this.props.sendCommand(NativeMouseCommandTelemetry.ToggleVariableExplorer);\n        };\n        const variableExplorerTooltip = this.props.variablesVisible\n            ? getLocString('DataScience.collapseVariableExplorerTooltip', 'Hide variables active in jupyter kernel')\n            : getLocString('DataScience.expandVariableExplorerTooltip', 'Show variables active in jupyter kernel');\n        const runAbove = () => {\n            if (selectedInfo.selectedCellId) {\n                this.props.executeAbove(selectedInfo.selectedCellId);\n                this.props.sendCommand(NativeMouseCommandTelemetry.RunAbove);\n            }\n        };\n        const runBelow = () => {\n            if (selectedInfo.selectedCellId && typeof selectedInfo.selectedCellIndex === 'number') {\n                // tslint:disable-next-line: no-suspicious-comment\n                // TODO: Is the source going to be up to date during run below?\n                this.props.executeCellAndBelow(selectedInfo.selectedCellId);\n                this.props.sendCommand(NativeMouseCommandTelemetry.RunBelow);\n            }\n        };\n        const selectKernel = () => {\n            this.props.selectKernel();\n            this.props.sendCommand(NativeMouseCommandTelemetry.SelectKernel);\n        };\n        const selectServer = () => {\n            this.props.selectServer();\n            this.props.sendCommand(NativeMouseCommandTelemetry.SelectServer);\n        };\n        const canRunAbove = (selectedInfo.selectedCellIndex ?? -1) > 0;\n        const canRunBelow =\n            (selectedInfo.selectedCellIndex ?? -1) < this.props.cellCount - 1 &&\n            (selectedInfo.selectedCellId || '').length > 0;\n\n        const canRestartAndInterruptKernel = this.props.kernel.jupyterServerStatus !== ServerStatus.NotStarted;\n\n        return (\n            <div id=\"toolbar-panel\">\n                <div className=\"toolbar-menu-bar\">\n                    <div className=\"toolbar-menu-bar-child\">\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={runAll}\n                            disabled={this.props.busy}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.runAll', 'Run All Cells')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.RunAll}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={runAbove}\n                            disabled={!canRunAbove || this.props.busy}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.runAbove', 'Run cells above')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.RunAbove}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={runBelow}\n                            disabled={!canRunBelow || this.props.busy}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.runBelow', 'Run cell and below')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.RunBelow}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.restartKernel}\n                            disabled={this.props.busy || !canRestartAndInterruptKernel}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.restartServer', 'Restart IPython kernel')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.Restart}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.interruptKernel}\n                            disabled={this.props.busy || !canRestartAndInterruptKernel}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.interruptKernel', 'Interrupt IPython kernel')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.Interrupt}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={addCell}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.addNewCell', 'Insert cell')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.InsertBelow}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.clearAllOutputs}\n                            disabled={!this.props.cellCount}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.clearAllOutput', 'Clear All Output')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.ClearAllOutput}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={toggleVariableExplorer}\n                            className=\"native-button\"\n                            tooltip={variableExplorerTooltip}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.VariableExplorer}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={save}\n                            disabled={!this.props.dirty}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.save', 'Save File')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.SaveAs}\n                            />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.export}\n                            disabled={!this.props.cellCount || this.props.busy}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.exportAsPythonFileTooltip', 'Save As Python File')}\n                        >\n                            <Image\n                                baseTheme={this.props.baseTheme}\n                                class=\"image-button-image\"\n                                image={ImageName.ExportToPython}\n                            />\n                        </ImageButton>\n                    </div>\n                    <KernelSelection\n                        baseTheme={this.props.baseTheme}\n                        font={this.props.font}\n                        kernel={this.props.kernel}\n                        selectServer={selectServer}\n                        selectKernel={selectKernel}\n                    />\n                </div>\n                <div className=\"toolbar-divider\" />\n            </div>\n        );\n    }\n}\n\nexport const ToolbarComponent = connect(mapStateToProps, actionCreators)(Toolbar);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { OSType } from '../../client/common/utils/platform';\nimport { NativeKeyboardCommandTelemetry, NativeMouseCommandTelemetry } from '../../client/datascience/constants';\nimport { buildSettingsCss } from '../interactive-common/buildSettingsCss';\nimport { ContentPanel, IContentPanelProps } from '../interactive-common/contentPanel';\nimport { handleLinkClick } from '../interactive-common/handlers';\nimport { getSelectedAndFocusedInfo, ICellViewModel, IMainState } from '../interactive-common/mainState';\nimport { IMainWithVariables, IStore } from '../interactive-common/redux/store';\nimport { IVariablePanelProps, VariablePanel } from '../interactive-common/variablePanel';\nimport { getOSType } from '../react-common/constants';\nimport { ErrorBoundary } from '../react-common/errorBoundary';\nimport { getLocString } from '../react-common/locReactSide';\nimport { Progress } from '../react-common/progress';\nimport { AddCellLine } from './addCellLine';\nimport { getConnectedNativeCell } from './nativeCell';\nimport './nativeEditor.less';\nimport { actionCreators } from './redux/actions';\nimport { ToolbarComponent } from './toolbar';\n\ntype INativeEditorProps = IMainWithVariables & typeof actionCreators;\n\nfunction mapStateToProps(state: IStore): IMainWithVariables {\n    return { ...state.main, variableState: state.variables };\n}\n\nconst ConnectedNativeCell = getConnectedNativeCell();\n\nexport class NativeEditor extends React.Component<INativeEditorProps> {\n    private renderCount: number = 0;\n    private waitingForLoadRender = true;\n\n    constructor(props: INativeEditorProps) {\n        super(props);\n        this.insertAboveFirst = this.insertAboveFirst.bind(this);\n    }\n\n    public componentDidMount() {\n        this.props.editorLoaded();\n        window.addEventListener('keydown', this.mainKeyDown);\n        window.addEventListener('resize', () => this.forceUpdate(), true);\n        document.addEventListener('click', this.linkClick, true);\n    }\n\n    public componentWillUnmount() {\n        window.removeEventListener('keydown', this.mainKeyDown);\n        window.removeEventListener('resize', () => this.forceUpdate());\n        document.removeEventListener('click', this.linkClick);\n        this.props.editorUnmounted();\n    }\n\n    public componentDidUpdate(prevProps: IMainState) {\n        if (this.props.loaded && !prevProps.loaded && this.waitingForLoadRender) {\n            this.waitingForLoadRender = false;\n            // After this render is complete (see this SO)\n            // https://stackoverflow.com/questions/26556436/react-after-render-code,\n            // indicate we are done loading. We want to wait for the render\n            // so we get accurate timing on first launch.\n            setTimeout(() => {\n                window.requestAnimationFrame(() => {\n                    this.props.loadedAllCells();\n                });\n            });\n        }\n    }\n\n    public render() {\n        const dynamicFont: React.CSSProperties = {\n            fontSize: this.props.font.size,\n            fontFamily: this.props.font.family\n        };\n\n        // If in test mode, update our count. Use this to determine how many renders a normal update takes.\n        if (this.props.testMode) {\n            this.renderCount = this.renderCount + 1;\n        }\n\n        // Update the state controller with our new state\n        const progressBar = (this.props.busy || !this.props.loaded) && !this.props.testMode ? <Progress /> : undefined;\n        const addCellLine =\n            this.props.cellVMs.length === 0 ? null : (\n                <AddCellLine\n                    includePlus={true}\n                    className=\"add-cell-line-top\"\n                    click={this.insertAboveFirst}\n                    baseTheme={this.props.baseTheme}\n                />\n            );\n\n        return (\n            <div id=\"main-panel\" role=\"Main\" style={dynamicFont}>\n                <div className=\"styleSetter\">\n                    <style>{`${this.props.rootCss ? this.props.rootCss : ''}\n${buildSettingsCss(this.props.settings)}`}</style>\n                </div>\n                <header id=\"main-panel-toolbar\">\n                    {this.renderToolbarPanel()}\n                    {progressBar}\n                </header>\n                <section\n                    id=\"main-panel-variable\"\n                    aria-label={getLocString('DataScience.collapseVariableExplorerLabel', 'Variables')}\n                >\n                    {this.renderVariablePanel(this.props.baseTheme)}\n                </section>\n                <main id=\"main-panel-content\">\n                    {addCellLine}\n                    {this.renderContentPanel(this.props.baseTheme)}\n                </main>\n            </div>\n        );\n    }\n\n    private insertAboveFirst() {\n        setTimeout(() => this.props.insertAboveFirst(), 1);\n    }\n    private renderToolbarPanel() {\n        return <ToolbarComponent></ToolbarComponent>;\n    }\n\n    private renderVariablePanel(baseTheme: string) {\n        if (this.props.variableState.visible) {\n            const variableProps = this.getVariableProps(baseTheme);\n            return <VariablePanel {...variableProps} />;\n        }\n\n        return null;\n    }\n\n    private renderContentPanel(baseTheme: string) {\n        // Skip if the tokenizer isn't finished yet. It needs\n        // to finish loading so our code editors work.\n        if (!this.props.monacoReady && !this.props.testMode) {\n            return null;\n        }\n\n        // Otherwise render our cells.\n        const contentProps = this.getContentProps(baseTheme);\n        return <ContentPanel {...contentProps} />;\n    }\n\n    private getContentProps = (baseTheme: string): IContentPanelProps => {\n        return {\n            baseTheme: baseTheme,\n            cellVMs: this.props.cellVMs,\n            testMode: this.props.testMode,\n            codeTheme: this.props.codeTheme,\n            submittedText: this.props.submittedText,\n            skipNextScroll: this.props.skipNextScroll ? true : false,\n            editable: true,\n            renderCell: this.renderCell,\n            scrollToBottom: this.scrollDiv,\n            scrollBeyondLastLine: this.props.settings\n                ? this.props.settings.extraSettings.editor.scrollBeyondLastLine\n                : false\n        };\n    };\n    private getVariableProps = (baseTheme: string): IVariablePanelProps => {\n        return {\n            variables: this.props.variableState.variables,\n            debugging: this.props.debugging,\n            busy: this.props.busy,\n            showDataExplorer: this.props.showDataViewer,\n            skipDefault: this.props.skipDefault,\n            testMode: this.props.testMode,\n            closeVariableExplorer: this.props.toggleVariableExplorer,\n            baseTheme: baseTheme,\n            pageIn: this.pageInVariableData,\n            fontSize: this.props.font.size,\n            executionCount: this.props.currentExecutionCount,\n            supportsDebugging:\n                this.props.settings && this.props.settings.variableOptions\n                    ? this.props.settings.variableOptions.enableDuringDebugger\n                    : false\n        };\n    };\n\n    private pageInVariableData = (startIndex: number, pageSize: number) => {\n        this.props.getVariableData(this.props.currentExecutionCount, startIndex, pageSize);\n    };\n\n    private mainKeyDown = (event: KeyboardEvent) => {\n        // Handler for key down presses in the main panel\n        switch (event.key) {\n            // tslint:disable-next-line: no-suspicious-comment\n            // TODO: How to have this work for when the keyboard shortcuts are changed?\n            case 's': {\n                if ((event.ctrlKey && getOSType() !== OSType.OSX) || (event.metaKey && getOSType() === OSType.OSX)) {\n                    // This is save, save our cells\n                    this.props.save();\n                    this.props.sendCommand(NativeKeyboardCommandTelemetry.Save);\n                }\n                break;\n            }\n            case 'z':\n            case 'Z':\n                if (\n                    !getSelectedAndFocusedInfo(this.props).focusedCellId &&\n                    !this.props.settings?.extraSettings.useCustomEditorApi\n                ) {\n                    if (event.shiftKey && !event.ctrlKey && !event.altKey) {\n                        event.stopPropagation();\n                        this.props.redo();\n                        this.props.sendCommand(NativeKeyboardCommandTelemetry.Redo);\n                    } else if (!event.shiftKey && !event.altKey && !event.ctrlKey) {\n                        event.stopPropagation();\n                        this.props.undo();\n                        this.props.sendCommand(NativeKeyboardCommandTelemetry.Undo);\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n    };\n\n    // private copyToClipboard = (cellId: string) => {\n    //     const cell = this.props.findCell(cellId);\n    //     if (cell) {\n    //         // Need to do this in this process so it copies to the user's clipboard and not\n    //         // the remote clipboard where the extension is running\n    //         const textArea = document.createElement('textarea');\n    //         textArea.value = concatMultilineString(cell.cell.data.source);\n    //         document.body.appendChild(textArea);\n    //         textArea.select();\n    //         document.execCommand('Copy');\n    //         textArea.remove();\n    //     }\n    // }\n\n    // private pasteFromClipboard = (cellId: string) => {\n    //     const editedCells = this.props.cellVMs;\n    //     const index = editedCells.findIndex(x => x.cell.id === cellId) + 1;\n\n    //     if (index > -1) {\n    //         const textArea = document.createElement('textarea');\n    //         document.body.appendChild(textArea);\n    //         textArea.select();\n    //         document.execCommand('Paste');\n    //         editedCells[index].cell.data.source = textArea.value.split(/\\r?\\n/);\n    //         textArea.remove();\n    //     }\n\n    //     this.setState({\n    //         cellVMs: editedCells\n    //     });\n    // }\n\n    private renderCell = (cellVM: ICellViewModel, index: number): JSX.Element | null => {\n        // Don't render until we have settings\n        if (!this.props.settings || !this.props.editorOptions) {\n            return null;\n        }\n        const addNewCell = () => {\n            setTimeout(() => this.props.insertBelow(cellVM.cell.id), 1);\n            this.props.sendCommand(NativeMouseCommandTelemetry.AddToEnd);\n        };\n        const firstLine = index === 0;\n        const lastLine =\n            index === this.props.cellVMs.length - 1 ? (\n                <AddCellLine\n                    includePlus={true}\n                    baseTheme={this.props.baseTheme}\n                    className=\"add-cell-line-cell\"\n                    click={addNewCell}\n                />\n            ) : null;\n\n        const maxOutputSize = this.props.settings.maxOutputSize;\n        const outputSizeLimit = 10000;\n        const maxTextSize =\n            maxOutputSize && maxOutputSize < outputSizeLimit && maxOutputSize > 0 ? maxOutputSize : undefined;\n\n        return (\n            <div key={cellVM.cell.id} id={cellVM.cell.id}>\n                <ErrorBoundary>\n                    <ConnectedNativeCell\n                        role=\"listitem\"\n                        maxTextSize={maxTextSize}\n                        enableScroll={this.props.settings.enableScrollingForCellOutputs}\n                        testMode={this.props.testMode}\n                        cellVM={cellVM}\n                        baseTheme={this.props.baseTheme}\n                        codeTheme={this.props.codeTheme}\n                        monacoTheme={this.props.monacoTheme}\n                        lastCell={lastLine !== null}\n                        firstCell={firstLine}\n                        font={this.props.font}\n                        allowUndo={this.props.undoStack.length > 0}\n                        editorOptions={this.props.editorOptions}\n                        enableGather={this.props.settings.enableGather}\n                        themeMatplotlibPlots={this.props.settings.themeMatplotlibPlots}\n                        // Focus pending does not apply to native editor.\n                        focusPending={0}\n                        busy={this.props.busy}\n                        useCustomEditorApi={this.props.settings?.extraSettings.useCustomEditorApi}\n                    />\n                </ErrorBoundary>\n                {lastLine}\n            </div>\n        );\n    };\n\n    private scrollDiv = (_div: HTMLDivElement) => {\n        // Doing nothing for now. This should be implemented once redux refactor is done.\n    };\n\n    private linkClick = (ev: MouseEvent) => {\n        handleLinkClick(ev, this.props.linkClick);\n    };\n}\n\n// Main export, return a redux connected editor\nexport function getConnectedNativeEditor() {\n    return connect(mapStateToProps, actionCreators)(NativeEditor);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport { CssMessages } from '../../../../client/datascience/messages';\nimport { IDataScienceExtraSettings } from '../../../../client/datascience/types';\nimport { getSelectedAndFocusedInfo, IMainState } from '../../../interactive-common/mainState';\nimport { postActionToExtension } from '../../../interactive-common/redux/helpers';\nimport { Helpers } from '../../../interactive-common/redux/reducers/helpers';\nimport { ICellAction, ICellAndCursorAction } from '../../../interactive-common/redux/reducers/types';\nimport { computeEditorOptions } from '../../../react-common/settingsReactSide';\nimport { NativeEditorReducerArg } from '../mapping';\n\nexport namespace Effects {\n    export function focusCell(arg: NativeEditorReducerArg<ICellAndCursorAction>): IMainState {\n        // Do nothing if already the focused cell.\n        let selectionInfo = getSelectedAndFocusedInfo(arg.prevState);\n        if (selectionInfo.focusedCellId !== arg.payload.data.cellId) {\n            let prevState = arg.prevState;\n\n            // Ensure we unfocus & unselect all cells.\n            while (selectionInfo.focusedCellId || selectionInfo.selectedCellId) {\n                selectionInfo = getSelectedAndFocusedInfo(prevState);\n                // First find the old focused cell and unfocus it\n                let removeFocusIndex = selectionInfo.focusedCellIndex;\n                if (typeof removeFocusIndex !== 'number') {\n                    removeFocusIndex = selectionInfo.selectedCellIndex;\n                }\n\n                if (typeof removeFocusIndex === 'number') {\n                    prevState = unfocusCell({\n                        ...arg,\n                        prevState,\n                        payload: {\n                            ...arg.payload,\n                            data: { cellId: prevState.cellVMs[removeFocusIndex].cell.id }\n                        }\n                    });\n                    prevState = deselectCell({\n                        ...arg,\n                        prevState,\n                        payload: { ...arg.payload, data: { cellId: prevState.cellVMs[removeFocusIndex].cell.id } }\n                    });\n                }\n            }\n\n            const newVMs = [...prevState.cellVMs];\n\n            // Add focus on new cell\n            const addFocusIndex = newVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n            if (addFocusIndex >= 0) {\n                newVMs[addFocusIndex] = {\n                    ...newVMs[addFocusIndex],\n                    focused: true,\n                    selected: true,\n                    cursorPos: arg.payload.data.cursorPos\n                };\n            }\n\n            return {\n                ...prevState,\n                cellVMs: newVMs\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function unfocusCell(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        // Unfocus the cell\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        const selectionInfo = getSelectedAndFocusedInfo(arg.prevState);\n        if (index >= 0 && selectionInfo.focusedCellId === arg.payload.data.cellId) {\n            const newVMs = [...arg.prevState.cellVMs];\n            const current = arg.prevState.cellVMs[index];\n            const newCell = {\n                ...current,\n                focused: false\n            };\n\n            // tslint:disable-next-line: no-any\n            newVMs[index] = Helpers.asCellViewModel(newCell); // This is because IMessageCell doesn't fit in here\n\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs\n            };\n        } else if (index >= 0) {\n            // Dont change focus state if not the focused cell. Just update the code.\n            const newVMs = [...arg.prevState.cellVMs];\n            const current = arg.prevState.cellVMs[index];\n            const newCell = {\n                ...current\n            };\n\n            // tslint:disable-next-line: no-any\n            newVMs[index] = newCell as any; // This is because IMessageCell doesn't fit in here\n\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function deselectCell(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        const selectionInfo = getSelectedAndFocusedInfo(arg.prevState);\n        if (index >= 0 && selectionInfo.selectedCellId === arg.payload.data.cellId) {\n            const newVMs = [...arg.prevState.cellVMs];\n            const target = arg.prevState.cellVMs[index];\n            const newCell = {\n                ...target,\n                selected: false\n            };\n\n            // tslint:disable-next-line: no-any\n            newVMs[index] = newCell as any; // This is because IMessageCell doesn't fit in here\n\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    /**\n     * Select a cell.\n     *\n     * @param {boolean} [shouldFocusCell] If provided, then will control the focus behavior of the cell. (defaults to focus state of previously selected cell).\n     */\n    export function selectCell(\n        arg: NativeEditorReducerArg<ICellAndCursorAction>,\n        shouldFocusCell?: boolean\n    ): IMainState {\n        // Skip doing anything if already selected.\n        const selectionInfo = getSelectedAndFocusedInfo(arg.prevState);\n        if (arg.payload.data.cellId !== selectionInfo.selectedCellId) {\n            let prevState = arg.prevState;\n            const addIndex = prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n            const someOtherCellWasFocusedAndSelected =\n                selectionInfo.focusedCellId === selectionInfo.selectedCellId && !!selectionInfo.focusedCellId;\n            // First find the old focused cell and unfocus it\n            let removeFocusIndex = arg.prevState.cellVMs.findIndex((c) => c.cell.id === selectionInfo.focusedCellId);\n            if (removeFocusIndex < 0) {\n                removeFocusIndex = arg.prevState.cellVMs.findIndex((c) => c.cell.id === selectionInfo.selectedCellId);\n            }\n\n            if (removeFocusIndex >= 0) {\n                prevState = unfocusCell({\n                    ...arg,\n                    prevState,\n                    payload: {\n                        ...arg.payload,\n                        data: { cellId: prevState.cellVMs[removeFocusIndex].cell.id }\n                    }\n                });\n                prevState = deselectCell({\n                    ...arg,\n                    prevState,\n                    payload: { ...arg.payload, data: { cellId: prevState.cellVMs[removeFocusIndex].cell.id } }\n                });\n            }\n\n            const newVMs = [...prevState.cellVMs];\n            if (addIndex >= 0 && arg.payload.data.cellId !== selectionInfo.selectedCellId) {\n                newVMs[addIndex] = {\n                    ...newVMs[addIndex],\n                    focused:\n                        typeof shouldFocusCell === 'boolean' ? shouldFocusCell : someOtherCellWasFocusedAndSelected,\n                    selected: true,\n                    cursorPos: arg.payload.data.cursorPos\n                };\n            }\n\n            return {\n                ...prevState,\n                cellVMs: newVMs\n            };\n        }\n        return arg.prevState;\n    }\n\n    export function toggleLineNumbers(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        if (index >= 0) {\n            const newVMs = [...arg.prevState.cellVMs];\n            newVMs[index] = { ...newVMs[index], showLineNumbers: !newVMs[index].showLineNumbers };\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs\n            };\n        }\n        return arg.prevState;\n    }\n\n    export function toggleOutput(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        if (index >= 0) {\n            const newVMs = [...arg.prevState.cellVMs];\n            newVMs[index] = { ...newVMs[index], hideOutput: !newVMs[index].hideOutput };\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs\n            };\n        }\n        return arg.prevState;\n    }\n\n    export function updateSettings(arg: NativeEditorReducerArg<string>): IMainState {\n        // String arg should be the IDataScienceExtraSettings\n        const newSettingsJSON = JSON.parse(arg.payload.data);\n        const newSettings = <IDataScienceExtraSettings>newSettingsJSON;\n        const newEditorOptions = computeEditorOptions(newSettings);\n        const newFontFamily = newSettings.extraSettings\n            ? newSettings.extraSettings.editor.fontFamily\n            : arg.prevState.font.family;\n        const newFontSize = newSettings.extraSettings\n            ? newSettings.extraSettings.editor.fontSize\n            : arg.prevState.font.size;\n\n        // Ask for new theme data if necessary\n        if (\n            newSettings &&\n            newSettings.extraSettings &&\n            newSettings.extraSettings.theme !== arg.prevState.vscodeThemeName\n        ) {\n            const knownDark = Helpers.computeKnownDark(newSettings);\n            // User changed the current theme. Rerender\n            postActionToExtension(arg, CssMessages.GetCssRequest, { isDark: knownDark });\n            postActionToExtension(arg, CssMessages.GetMonacoThemeRequest, { isDark: knownDark });\n        }\n\n        return {\n            ...arg.prevState,\n            settings: newSettings,\n            editorOptions: { ...newEditorOptions, lineDecorationsWidth: 5 },\n            font: {\n                size: newFontSize,\n                family: newFontFamily\n            }\n        };\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\n// tslint:disable-next-line: no-require-imports no-var-requires\nconst cloneDeep = require('lodash/cloneDeep');\nimport * as uuid from 'uuid/v4';\nimport { InteractiveWindowMessages } from '../../../../client/datascience/interactive-common/interactiveWindowTypes';\nimport { CellState } from '../../../../client/datascience/types';\nimport { concatMultilineStringInput } from '../../../common';\nimport { createCellFrom } from '../../../common/cellFactory';\nimport {\n    CursorPos,\n    getSelectedAndFocusedInfo,\n    ICellViewModel,\n    IMainState\n} from '../../../interactive-common/mainState';\nimport { postActionToExtension, queueIncomingActionWithPayload } from '../../../interactive-common/redux/helpers';\nimport { Helpers } from '../../../interactive-common/redux/reducers/helpers';\nimport { Transfer } from '../../../interactive-common/redux/reducers/transfer';\nimport {\n    CommonActionType,\n    ICellAction,\n    IChangeCellTypeAction,\n    IExecuteAction\n} from '../../../interactive-common/redux/reducers/types';\nimport { NativeEditorReducerArg } from '../mapping';\nimport { Effects } from './effects';\n\nexport namespace Execution {\n    function executeRange(\n        prevState: IMainState,\n        cellIds: string[],\n        // tslint:disable-next-line: no-any\n        originalArg: NativeEditorReducerArg<any>\n    ): IMainState {\n        const newVMs = [...prevState.cellVMs];\n        const cellIdsToExecute: string[] = [];\n        cellIds.forEach((cellId) => {\n            const index = prevState.cellVMs.findIndex((cell) => cell.cell.id === cellId);\n            if (index === -1) {\n                return;\n            }\n            const orig = prevState.cellVMs[index];\n            // noop if the submitted code is just a cell marker\n            if (orig.cell.data.cell_type === 'code' && concatMultilineStringInput(orig.cell.data.source)) {\n                // When cloning cells, preserve the metadata (hence deep clone).\n                const clonedCell = cloneDeep(orig.cell.data);\n                // Update our input cell to be in progress again and clear outputs\n                clonedCell.outputs = [];\n                newVMs[index] = Helpers.asCellViewModel({\n                    ...orig,\n                    cell: { ...orig.cell, state: CellState.executing, data: clonedCell }\n                });\n                cellIdsToExecute.push(orig.cell.id);\n            }\n        });\n\n        // If any cells to execute, execute them all\n        if (cellIdsToExecute.length > 0) {\n            // Send a message if a code cell\n            postActionToExtension(originalArg, InteractiveWindowMessages.ReExecuteCells, {\n                cellIds: cellIdsToExecute\n            });\n        }\n\n        return {\n            ...prevState,\n            cellVMs: newVMs\n        };\n    }\n\n    export function executeAbove(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        if (index > 0) {\n            // Get all cellIds until `index`.\n            const cellIds = arg.prevState.cellVMs.slice(0, index).map((cellVm) => cellVm.cell.id);\n            return executeRange(arg.prevState, cellIds, arg);\n        }\n        return arg.prevState;\n    }\n\n    export function executeCellAndAdvance(arg: NativeEditorReducerArg<IExecuteAction>): IMainState {\n        queueIncomingActionWithPayload(arg, CommonActionType.EXECUTE_CELL, {\n            cellId: arg.payload.data.cellId,\n            moveOp: arg.payload.data.moveOp\n        });\n        if (arg.payload.data.moveOp === 'add') {\n            const newCellId = uuid();\n            queueIncomingActionWithPayload(arg, CommonActionType.INSERT_BELOW, {\n                cellId: arg.payload.data.cellId,\n                newCellId\n            });\n            queueIncomingActionWithPayload(arg, CommonActionType.FOCUS_CELL, {\n                cellId: newCellId,\n                cursorPos: CursorPos.Current\n            });\n        }\n        return arg.prevState;\n    }\n\n    export function executeCell(arg: NativeEditorReducerArg<IExecuteAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        if (index >= 0 && arg.payload.data.cellId) {\n            // Start executing this cell.\n            const executeResult = executeRange(arg.prevState, [arg.payload.data.cellId], arg);\n\n            // Modify the execute result if moving\n            if (arg.payload.data.moveOp === 'select') {\n                // Select the cell below this one, but don't focus it\n                if (index < arg.prevState.cellVMs.length - 1) {\n                    return Effects.selectCell(\n                        {\n                            ...arg,\n                            prevState: {\n                                ...executeResult\n                            },\n                            payload: {\n                                ...arg.payload,\n                                data: {\n                                    ...arg.payload.data,\n                                    cellId: arg.prevState.cellVMs[index + 1].cell.id,\n                                    cursorPos: CursorPos.Current\n                                }\n                            }\n                        },\n                        // Select the next cell, but do not set focus to it.\n                        false\n                    );\n                }\n                return executeResult;\n            } else {\n                return executeResult;\n            }\n        }\n        return arg.prevState;\n    }\n\n    export function executeCellAndBelow(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        if (index >= 0) {\n            // Get all cellIds starting from `index`.\n            const cellIds = arg.prevState.cellVMs.slice(index).map((cellVm) => cellVm.cell.id);\n            return executeRange(arg.prevState, cellIds, arg);\n        }\n        return arg.prevState;\n    }\n\n    export function executeAllCells(arg: NativeEditorReducerArg): IMainState {\n        if (arg.prevState.cellVMs.length > 0) {\n            const cellIds = arg.prevState.cellVMs.map((cellVm) => cellVm.cell.id);\n            return executeRange(arg.prevState, cellIds, arg);\n        }\n        return arg.prevState;\n    }\n\n    export function executeSelectedCell(arg: NativeEditorReducerArg): IMainState {\n        // This is the same thing as executing the selected cell\n        const selectionInfo = getSelectedAndFocusedInfo(arg.prevState);\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === selectionInfo.selectedCellId);\n        if (selectionInfo.selectedCellId && index >= 0) {\n            return executeCell({\n                ...arg,\n                payload: {\n                    ...arg.payload,\n                    data: {\n                        cellId: selectionInfo.selectedCellId,\n                        moveOp: 'none'\n                    }\n                }\n            });\n        }\n\n        return arg.prevState;\n    }\n\n    export function clearAllOutputs(arg: NativeEditorReducerArg): IMainState {\n        const newList = arg.prevState.cellVMs.map((cellVM) => {\n            return Helpers.asCellViewModel({\n                ...cellVM,\n                cell: { ...cellVM.cell, data: { ...cellVM.cell.data, outputs: [], execution_count: null } }\n            });\n        });\n\n        Transfer.postModelClearOutputs(arg);\n\n        return {\n            ...arg.prevState,\n            cellVMs: newList\n        };\n    }\n\n    export function changeCellType(arg: NativeEditorReducerArg<IChangeCellTypeAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        if (index >= 0) {\n            const cellVMs = [...arg.prevState.cellVMs];\n            const current = arg.prevState.cellVMs[index];\n            const newType = current.cell.data.cell_type === 'code' ? 'markdown' : 'code';\n            const newNotebookCell = createCellFrom(current.cell.data, newType);\n            const newCell: ICellViewModel = {\n                ...current,\n                cell: {\n                    ...current.cell,\n                    data: newNotebookCell\n                }\n            };\n            cellVMs[index] = newCell;\n            Transfer.changeCellType(arg, cellVMs[index].cell);\n\n            return {\n                ...arg.prevState,\n                cellVMs\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function undo(arg: NativeEditorReducerArg): IMainState {\n        if (arg.prevState.undoStack.length > 0) {\n            // Pop one off of our undo stack and update our redo\n            const cells = arg.prevState.undoStack[arg.prevState.undoStack.length - 1];\n            const undoStack = arg.prevState.undoStack.slice(0, arg.prevState.undoStack.length - 1);\n            const redoStack = Helpers.pushStack(arg.prevState.redoStack, arg.prevState.cellVMs);\n            postActionToExtension(arg, InteractiveWindowMessages.Undo);\n            return {\n                ...arg.prevState,\n                cellVMs: cells,\n                undoStack: undoStack,\n                redoStack: redoStack,\n                skipNextScroll: true\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function redo(arg: NativeEditorReducerArg): IMainState {\n        if (arg.prevState.redoStack.length > 0) {\n            // Pop one off of our redo stack and update our undo\n            const cells = arg.prevState.redoStack[arg.prevState.redoStack.length - 1];\n            const redoStack = arg.prevState.redoStack.slice(0, arg.prevState.redoStack.length - 1);\n            const undoStack = Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs);\n            postActionToExtension(arg, InteractiveWindowMessages.Redo);\n            return {\n                ...arg.prevState,\n                cellVMs: cells,\n                undoStack: undoStack,\n                redoStack: redoStack,\n                skipNextScroll: true\n            };\n        }\n\n        return arg.prevState;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport { CursorPos, IMainState } from '../../../interactive-common/mainState';\nimport { queueIncomingActionWithPayload } from '../../../interactive-common/redux/helpers';\nimport { Helpers } from '../../../interactive-common/redux/reducers/helpers';\nimport { Transfer } from '../../../interactive-common/redux/reducers/transfer';\nimport { CommonActionType, ICellAction, ICodeAction } from '../../../interactive-common/redux/reducers/types';\nimport { NativeEditorReducerArg } from '../mapping';\n\nexport namespace Movement {\n    export function swapCells(arg: NativeEditorReducerArg<{ firstCellId: string; secondCellId: string }>) {\n        const newVMs = [...arg.prevState.cellVMs];\n        const first = newVMs.findIndex((cvm) => cvm.cell.id === arg.payload.data.firstCellId);\n        const second = newVMs.findIndex((cvm) => cvm.cell.id === arg.payload.data.secondCellId);\n        if (first >= 0 && second >= 0 && first !== second) {\n            const temp = newVMs[first];\n            newVMs[first] = newVMs[second];\n            newVMs[second] = temp;\n            Transfer.postModelSwap(arg, arg.payload.data.firstCellId, arg.payload.data.secondCellId);\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs,\n                undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs)\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function moveCellUp(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((cvm) => cvm.cell.id === arg.payload.data.cellId);\n        if (index > 0 && arg.payload.data.cellId) {\n            return swapCells({\n                ...arg,\n                payload: {\n                    ...arg.payload,\n                    data: {\n                        firstCellId: arg.prevState.cellVMs[index - 1].cell.id,\n                        secondCellId: arg.payload.data.cellId\n                    }\n                }\n            });\n        }\n\n        return arg.prevState;\n    }\n\n    export function moveCellDown(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const newVMs = [...arg.prevState.cellVMs];\n        const index = newVMs.findIndex((cvm) => cvm.cell.id === arg.payload.data.cellId);\n        if (index < newVMs.length - 1 && arg.payload.data.cellId) {\n            return swapCells({\n                ...arg,\n                payload: {\n                    ...arg.payload,\n                    data: {\n                        firstCellId: arg.payload.data.cellId,\n                        secondCellId: arg.prevState.cellVMs[index + 1].cell.id\n                    }\n                }\n            });\n        }\n\n        return arg.prevState;\n    }\n\n    export function arrowUp(arg: NativeEditorReducerArg<ICodeAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        if (index > 0) {\n            queueIncomingActionWithPayload(arg, CommonActionType.SELECT_CELL, {\n                cellId: arg.prevState.cellVMs[index - 1].cell.id,\n                cursorPos: CursorPos.Bottom\n            });\n        }\n\n        return arg.prevState;\n    }\n\n    export function arrowDown(arg: NativeEditorReducerArg<ICodeAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        if (index < arg.prevState.cellVMs.length - 1) {\n            queueIncomingActionWithPayload(arg, CommonActionType.SELECT_CELL, {\n                cellId: arg.prevState.cellVMs[index + 1].cell.id,\n                cursorPos: CursorPos.Top\n            });\n        }\n\n        return arg.prevState;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\n\nimport { noop } from '../../../../client/common/utils/misc';\nimport {\n    IEditorContentChange,\n    ILoadAllCells,\n    NotebookModelChange\n} from '../../../../client/datascience/interactive-common/interactiveWindowTypes';\nimport { ICell, IDataScienceExtraSettings } from '../../../../client/datascience/types';\nimport { splitMultilineString } from '../../../common';\nimport {\n    createCellVM,\n    createEmptyCell,\n    CursorPos,\n    extractInputText,\n    getSelectedAndFocusedInfo,\n    ICellViewModel,\n    IMainState\n} from '../../../interactive-common/mainState';\nimport { queueIncomingActionWithPayload } from '../../../interactive-common/redux/helpers';\nimport { Helpers } from '../../../interactive-common/redux/reducers/helpers';\nimport { Transfer } from '../../../interactive-common/redux/reducers/transfer';\nimport { CommonActionType, IAddCellAction, ICellAction } from '../../../interactive-common/redux/reducers/types';\nimport { NativeEditorReducerArg } from '../mapping';\nimport { Effects } from './effects';\nimport { Execution } from './execution';\nimport { Movement } from './movement';\n\nexport namespace Creation {\n    function prepareCellVM(cell: ICell, hasBeenRun: boolean, settings?: IDataScienceExtraSettings): ICellViewModel {\n        const cellVM: ICellViewModel = createCellVM(cell, settings, true, false);\n\n        // Set initial cell visibility and collapse\n        cellVM.editable = true;\n\n        // Always have the cell input text open\n        const newText = extractInputText(cellVM, settings);\n\n        cellVM.inputBlockOpen = true;\n        cell.data.source = splitMultilineString(newText);\n        cellVM.hasBeenRun = hasBeenRun;\n\n        return cellVM;\n    }\n\n    export function addAndFocusCell(arg: NativeEditorReducerArg<IAddCellAction>): IMainState {\n        queueIncomingActionWithPayload(arg, CommonActionType.ADD_NEW_CELL, { newCellId: arg.payload.data.newCellId });\n        queueIncomingActionWithPayload(arg, CommonActionType.FOCUS_CELL, {\n            cellId: arg.payload.data.newCellId,\n            cursorPos: CursorPos.Current\n        });\n        return arg.prevState;\n    }\n\n    export function insertAboveAndFocusCell(arg: NativeEditorReducerArg<IAddCellAction & ICellAction>): IMainState {\n        queueIncomingActionWithPayload(arg, CommonActionType.INSERT_ABOVE, {\n            cellId: arg.payload.data.cellId,\n            newCellId: arg.payload.data.newCellId\n        });\n        queueIncomingActionWithPayload(arg, CommonActionType.FOCUS_CELL, {\n            cellId: arg.payload.data.newCellId,\n            cursorPos: CursorPos.Current\n        });\n        return arg.prevState;\n    }\n\n    export function insertBelowAndFocusCell(arg: NativeEditorReducerArg<IAddCellAction & ICellAction>): IMainState {\n        queueIncomingActionWithPayload(arg, CommonActionType.INSERT_BELOW, {\n            cellId: arg.payload.data.cellId,\n            newCellId: arg.payload.data.newCellId\n        });\n        queueIncomingActionWithPayload(arg, CommonActionType.FOCUS_CELL, {\n            cellId: arg.payload.data.newCellId,\n            cursorPos: CursorPos.Current\n        });\n        return arg.prevState;\n    }\n\n    export function insertAboveFirstAndFocusCell(arg: NativeEditorReducerArg<IAddCellAction>): IMainState {\n        queueIncomingActionWithPayload(arg, CommonActionType.INSERT_ABOVE_FIRST, {\n            newCellId: arg.payload.data.newCellId\n        });\n        queueIncomingActionWithPayload(arg, CommonActionType.FOCUS_CELL, {\n            cellId: arg.payload.data.newCellId,\n            cursorPos: CursorPos.Current\n        });\n        return arg.prevState;\n    }\n\n    export function insertAbove(arg: NativeEditorReducerArg<ICellAction & IAddCellAction>): IMainState {\n        const newVM = prepareCellVM(createEmptyCell(arg.payload.data.newCellId, null), false, arg.prevState.settings);\n        const newList = [...arg.prevState.cellVMs];\n\n        // Find the position where we want to insert\n        let position = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        if (position >= 0) {\n            newList.splice(position, 0, newVM);\n        } else {\n            newList.splice(0, 0, newVM);\n            position = 0;\n        }\n\n        const result = {\n            ...arg.prevState,\n            undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs),\n            cellVMs: newList\n        };\n\n        // Send a messsage that we inserted a cell\n        Transfer.postModelInsert(arg, position, newVM.cell, arg.payload.data.cellId);\n\n        return result;\n    }\n\n    export function insertBelow(arg: NativeEditorReducerArg<ICellAction & IAddCellAction>): IMainState {\n        const newVM = prepareCellVM(createEmptyCell(arg.payload.data.newCellId, null), false, arg.prevState.settings);\n        const newList = [...arg.prevState.cellVMs];\n\n        // Find the position where we want to insert\n        let position = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n        if (position >= 0) {\n            position += 1;\n            newList.splice(position, 0, newVM);\n        } else {\n            newList.push(newVM);\n            position = newList.length;\n        }\n\n        const result = {\n            ...arg.prevState,\n            undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs),\n            cellVMs: newList\n        };\n\n        // Send a messsage that we inserted a cell\n        Transfer.postModelInsert(arg, position, newVM.cell, arg.payload.data.cellId);\n\n        return result;\n    }\n\n    export function insertAboveFirst(arg: NativeEditorReducerArg<IAddCellAction>): IMainState {\n        // Get the first cell id\n        const firstCellId = arg.prevState.cellVMs.length > 0 ? arg.prevState.cellVMs[0].cell.id : undefined;\n\n        // Do what an insertAbove does\n        return insertAbove({\n            ...arg,\n            payload: { ...arg.payload, data: { cellId: firstCellId, newCellId: arg.payload.data.newCellId } }\n        });\n    }\n\n    export function addNewCell(arg: NativeEditorReducerArg<IAddCellAction>): IMainState {\n        // Do the same thing that an insertBelow does using the currently selected cell.\n        return insertBelow({\n            ...arg,\n            payload: {\n                ...arg.payload,\n                data: {\n                    cellId: getSelectedAndFocusedInfo(arg.prevState).selectedCellId,\n                    newCellId: arg.payload.data.newCellId\n                }\n            }\n        });\n    }\n\n    export function startCell(arg: NativeEditorReducerArg<ICell>): IMainState {\n        return Helpers.updateOrAdd(arg, (c: ICell, s: IMainState) => prepareCellVM(c, true, s.settings));\n    }\n\n    export function updateCell(arg: NativeEditorReducerArg<ICell>): IMainState {\n        return Helpers.updateOrAdd(arg, (c: ICell, s: IMainState) => prepareCellVM(c, true, s.settings));\n    }\n\n    export function finishCell(arg: NativeEditorReducerArg<ICell>): IMainState {\n        return Helpers.updateOrAdd(arg, (c: ICell, s: IMainState) => prepareCellVM(c, true, s.settings));\n    }\n\n    export function deleteAllCells(arg: NativeEditorReducerArg<IAddCellAction>): IMainState {\n        // Just leave one single blank empty cell\n        const newVM: ICellViewModel = {\n            cell: createEmptyCell(arg.payload.data.newCellId, null),\n            editable: true,\n            inputBlockOpen: true,\n            inputBlockShow: true,\n            inputBlockText: '',\n            inputBlockCollapseNeeded: false,\n            selected: false,\n            focused: false,\n            cursorPos: CursorPos.Current,\n            hasBeenRun: false,\n            scrollCount: 0\n        };\n\n        Transfer.postModelRemoveAll(arg, newVM.cell.id);\n\n        return {\n            ...arg.prevState,\n            cellVMs: [newVM],\n            undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs)\n        };\n    }\n\n    export function applyCellEdit(\n        arg: NativeEditorReducerArg<{ id: string; changes: IEditorContentChange[] }>\n    ): IMainState {\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.id);\n        if (index >= 0) {\n            const newVM = { ...arg.prevState.cellVMs[index] };\n            arg.payload.data.changes.forEach((c) => {\n                const source = newVM.inputBlockText;\n                const before = source.slice(0, c.rangeOffset);\n                // tslint:disable-next-line: restrict-plus-operands\n                const after = source.slice(c.rangeOffset + c.rangeLength);\n                newVM.inputBlockText = `${before}${c.text}${after}`;\n            });\n            newVM.codeVersion = newVM.codeVersion ? newVM.codeVersion + 1 : 1;\n            newVM.cell.data.source = splitMultilineString(newVM.inputBlockText);\n            newVM.cursorPos = arg.payload.data.changes[0].position;\n            const newVMs = [...arg.prevState.cellVMs];\n            newVMs[index] = Helpers.asCellViewModel(newVM);\n            // When editing, make sure we focus the edited cell (otherwise undo looks weird because it undoes a non focused cell)\n            return Effects.focusCell({\n                ...arg,\n                prevState: { ...arg.prevState, cellVMs: newVMs },\n                payload: { ...arg.payload, data: { cursorPos: CursorPos.Current, cellId: arg.payload.data.id } }\n            });\n        }\n        return arg.prevState;\n    }\n\n    export function deleteCell(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const cells = arg.prevState.cellVMs;\n        if (cells.length === 1 && cells[0].cell.id === arg.payload.data.cellId) {\n            // Special case, if this is the last cell, don't delete it, just clear it's output and input\n            const newVM: ICellViewModel = {\n                cell: createEmptyCell(arg.payload.data.cellId, null),\n                editable: true,\n                inputBlockOpen: true,\n                inputBlockShow: true,\n                inputBlockText: '',\n                inputBlockCollapseNeeded: false,\n                selected: cells[0].selected,\n                focused: cells[0].focused,\n                cursorPos: CursorPos.Current,\n                hasBeenRun: false,\n                scrollCount: 0\n            };\n\n            // Send messages to other side to indicate the new add\n            Transfer.postModelRemove(arg, 0, cells[0].cell);\n            Transfer.postModelInsert(arg, 0, newVM.cell);\n\n            return {\n                ...arg.prevState,\n                undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs),\n                cellVMs: [newVM]\n            };\n        } else if (arg.payload.data.cellId) {\n            // Otherwise just a straight delete\n            const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\n            if (index >= 0) {\n                Transfer.postModelRemove(arg, 0, cells[index].cell);\n\n                // Recompute select/focus if this item has either\n                const previousSelection = getSelectedAndFocusedInfo(arg.prevState);\n                const newVMs = [...arg.prevState.cellVMs.filter((c) => c.cell.id !== arg.payload.data.cellId)];\n                const nextOrPrev = index === arg.prevState.cellVMs.length - 1 ? index - 1 : index;\n                if (\n                    previousSelection.selectedCellId === arg.payload.data.cellId ||\n                    previousSelection.focusedCellId === arg.payload.data.cellId\n                ) {\n                    if (nextOrPrev >= 0) {\n                        newVMs[nextOrPrev] = {\n                            ...newVMs[nextOrPrev],\n                            selected: true,\n                            focused: previousSelection.focusedCellId === arg.payload.data.cellId\n                        };\n                    }\n                }\n\n                return {\n                    ...arg.prevState,\n                    cellVMs: newVMs,\n                    undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs),\n                    skipNextScroll: true\n                };\n            }\n        }\n\n        return arg.prevState;\n    }\n\n    export function loadAllCells(arg: NativeEditorReducerArg<ILoadAllCells>): IMainState {\n        const vms = arg.payload.data.cells.map((c) => prepareCellVM(c, false, arg.prevState.settings));\n        return {\n            ...arg.prevState,\n            busy: false,\n            loadTotal: arg.payload.data.cells.length,\n            undoStack: [],\n            cellVMs: vms,\n            loaded: true\n        };\n    }\n\n    export function unmount(arg: NativeEditorReducerArg): IMainState {\n        return {\n            ...arg.prevState,\n            cellVMs: [],\n            undoStack: [],\n            redoStack: []\n        };\n    }\n\n    function handleUndoModel(arg: NativeEditorReducerArg<NotebookModelChange>): IMainState {\n        // Disable the queueAction in the arg so that calling other reducers doesn't cause\n        // messages to be posted back (as were handling a message from the extension here)\n        const disabledQueueArg = { ...arg, queueAction: noop };\n        switch (arg.payload.data.kind) {\n            case 'clear':\n                return loadAllCells({\n                    ...disabledQueueArg,\n                    payload: { ...arg.payload, data: { cells: arg.payload.data.oldCells } }\n                });\n            case 'edit':\n                return applyCellEdit({\n                    ...disabledQueueArg,\n                    payload: { ...arg.payload, data: { id: arg.payload.data.id, changes: arg.payload.data.reverse } }\n                });\n            case 'insert':\n                return deleteCell({\n                    ...disabledQueueArg,\n                    payload: { ...arg.payload, data: { cellId: arg.payload.data.cell.id } }\n                });\n            case 'remove':\n                const cellBelow =\n                    arg.prevState.cellVMs.length > arg.payload.data.index\n                        ? arg.prevState.cellVMs[arg.payload.data.index].cell\n                        : undefined;\n                return insertAbove({\n                    ...disabledQueueArg,\n                    payload: {\n                        ...arg.payload,\n                        data: { newCellId: arg.payload.data.cell.id, cellId: cellBelow ? cellBelow.id : undefined }\n                    }\n                });\n            case 'remove_all':\n                return loadAllCells({\n                    ...disabledQueueArg,\n                    payload: { ...arg.payload, data: { cells: arg.payload.data.oldCells } }\n                });\n            case 'swap':\n                return Movement.swapCells({\n                    ...disabledQueueArg,\n                    payload: {\n                        ...arg.payload,\n                        data: {\n                            firstCellId: arg.payload.data.secondCellId,\n                            secondCellId: arg.payload.data.firstCellId\n                        }\n                    }\n                });\n            case 'modify':\n                // Undo for modify should reapply the outputs. Go through each and apply the update\n                let result = arg.prevState;\n                arg.payload.data.oldCells.forEach((c) => {\n                    result = updateCell({\n                        ...disabledQueueArg,\n                        prevState: result,\n                        payload: { ...arg.payload, data: c }\n                    });\n                });\n                return result;\n\n            default:\n                // File, version can be ignored.\n                break;\n        }\n\n        return arg.prevState;\n    }\n\n    function handleRedoModel(arg: NativeEditorReducerArg<NotebookModelChange>): IMainState {\n        // Disable the queueAction in the arg so that calling other reducers doesn't cause\n        // messages to be posted back (as were handling a message from the extension here)\n        const disabledQueueArg = { ...arg, queueAction: noop };\n        switch (arg.payload.data.kind) {\n            case 'clear':\n                // tslint:disable-next-line: no-any\n                return Execution.clearAllOutputs(disabledQueueArg as any);\n            case 'edit':\n                return applyCellEdit({\n                    ...disabledQueueArg,\n                    payload: { ...arg.payload, data: { id: arg.payload.data.id, changes: arg.payload.data.forward } }\n                });\n            case 'insert':\n                return insertAbove({\n                    ...disabledQueueArg,\n                    payload: {\n                        ...arg.payload,\n                        data: { newCellId: arg.payload.data.cell.id, cellId: arg.payload.data.codeCellAboveId }\n                    }\n                });\n            case 'remove':\n                return deleteCell({\n                    ...disabledQueueArg,\n                    payload: { ...arg.payload, data: { cellId: arg.payload.data.cell.id } }\n                });\n            case 'remove_all':\n                return deleteAllCells({\n                    ...disabledQueueArg,\n                    payload: { ...arg.payload, data: { newCellId: arg.payload.data.newCellId } }\n                });\n            case 'swap':\n                return Movement.swapCells({\n                    ...disabledQueueArg,\n                    payload: {\n                        ...arg.payload,\n                        data: {\n                            firstCellId: arg.payload.data.secondCellId,\n                            secondCellId: arg.payload.data.firstCellId\n                        }\n                    }\n                });\n            case 'modify':\n                // Redo for modify should reapply the outputs. Go through each and apply the update\n                let result = arg.prevState;\n                arg.payload.data.newCells.forEach((c) => {\n                    result = updateCell({\n                        ...disabledQueueArg,\n                        prevState: result,\n                        payload: { ...arg.payload, data: c }\n                    });\n                });\n                return result;\n            default:\n                // Modify, file, version can all be ignored.\n                break;\n        }\n\n        return arg.prevState;\n    }\n\n    export function handleUpdate(arg: NativeEditorReducerArg<NotebookModelChange>): IMainState {\n        switch (arg.payload.data.source) {\n            case 'undo':\n                return handleUndoModel(arg);\n            case 'redo':\n                return handleRedoModel(arg);\n            default:\n                break;\n        }\n        return arg.prevState;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport { InteractiveWindowMessages } from '../../../../client/datascience/interactive-common/interactiveWindowTypes';\nimport { CssMessages, SharedMessages } from '../../../../client/datascience/messages';\nimport { CommonEffects } from '../../../interactive-common/redux/reducers/commonEffects';\nimport { Kernel } from '../../../interactive-common/redux/reducers/kernel';\nimport { Transfer } from '../../../interactive-common/redux/reducers/transfer';\nimport { CommonActionType } from '../../../interactive-common/redux/reducers/types';\nimport { INativeEditorActionMapping } from '../mapping';\nimport { Creation } from './creation';\nimport { Effects } from './effects';\nimport { Execution } from './execution';\nimport { Movement } from './movement';\n\n// The list of reducers. 1 per message/action.\nexport const reducerMap: Partial<INativeEditorActionMapping> = {\n    // State updates\n    [CommonActionType.INSERT_ABOVE_AND_FOCUS_NEW_CELL]: Creation.insertAboveAndFocusCell,\n    [CommonActionType.INSERT_ABOVE_FIRST_AND_FOCUS_NEW_CELL]: Creation.insertAboveFirstAndFocusCell,\n    [CommonActionType.INSERT_BELOW_AND_FOCUS_NEW_CELL]: Creation.insertBelowAndFocusCell,\n    [CommonActionType.INSERT_ABOVE]: Creation.insertAbove,\n    [CommonActionType.INSERT_ABOVE_FIRST]: Creation.insertAboveFirst,\n    [CommonActionType.INSERT_BELOW]: Creation.insertBelow,\n    [CommonActionType.FOCUS_CELL]: Effects.focusCell,\n    [CommonActionType.UNFOCUS_CELL]: Effects.unfocusCell,\n    [CommonActionType.ADD_AND_FOCUS_NEW_CELL]: Creation.addAndFocusCell,\n    [CommonActionType.ADD_NEW_CELL]: Creation.addNewCell,\n    [CommonActionType.EXECUTE_CELL_AND_ADVANCE]: Execution.executeCellAndAdvance,\n    [CommonActionType.EXECUTE_CELL]: Execution.executeCell,\n    [CommonActionType.EXECUTE_ALL_CELLS]: Execution.executeAllCells,\n    [CommonActionType.EXECUTE_ABOVE]: Execution.executeAbove,\n    [CommonActionType.EXECUTE_CELL_AND_BELOW]: Execution.executeCellAndBelow,\n    [CommonActionType.RESTART_KERNEL]: Kernel.restartKernel,\n    [CommonActionType.INTERRUPT_KERNEL]: Kernel.interruptKernel,\n    [InteractiveWindowMessages.ClearAllOutputs]: Execution.clearAllOutputs,\n    [CommonActionType.EXPORT]: Transfer.exportCells,\n    [CommonActionType.SAVE]: Transfer.save,\n    [CommonActionType.SHOW_DATA_VIEWER]: Transfer.showDataViewer,\n    [CommonActionType.SEND_COMMAND]: Transfer.sendCommand,\n    [CommonActionType.SELECT_CELL]: Effects.selectCell,\n    [InteractiveWindowMessages.SelectKernel]: Kernel.selectKernel,\n    [CommonActionType.SELECT_SERVER]: Kernel.selectJupyterURI,\n    [CommonActionType.MOVE_CELL_UP]: Movement.moveCellUp,\n    [CommonActionType.MOVE_CELL_DOWN]: Movement.moveCellDown,\n    [CommonActionType.DELETE_CELL]: Creation.deleteCell,\n    [CommonActionType.TOGGLE_LINE_NUMBERS]: Effects.toggleLineNumbers,\n    [CommonActionType.TOGGLE_OUTPUT]: Effects.toggleOutput,\n    [CommonActionType.CHANGE_CELL_TYPE]: Execution.changeCellType,\n    [InteractiveWindowMessages.Undo]: Execution.undo,\n    [InteractiveWindowMessages.Redo]: Execution.redo,\n    [CommonActionType.ARROW_UP]: Movement.arrowUp,\n    [CommonActionType.ARROW_DOWN]: Movement.arrowDown,\n    [CommonActionType.EDIT_CELL]: Transfer.editCell,\n    [InteractiveWindowMessages.ShowPlot]: Transfer.showPlot,\n    [CommonActionType.LINK_CLICK]: Transfer.linkClick,\n    [CommonActionType.GATHER_CELL]: Transfer.gather,\n    [CommonActionType.GATHER_CELL_TO_SCRIPT]: Transfer.gatherToScript,\n    [CommonActionType.EDITOR_LOADED]: Transfer.started,\n    [CommonActionType.LOADED_ALL_CELLS]: Transfer.loadedAllCells,\n    [CommonActionType.UNMOUNT]: Creation.unmount,\n    [CommonActionType.LOAD_IPYWIDGET_CLASS_SUCCESS]: CommonEffects.handleLoadIPyWidgetClassSuccess,\n    [CommonActionType.LOAD_IPYWIDGET_CLASS_FAILURE]: CommonEffects.handleLoadIPyWidgetClassFailure,\n    [CommonActionType.IPYWIDGET_WIDGET_VERSION_NOT_SUPPORTED]: CommonEffects.notifyAboutUnsupportedWidgetVersions,\n\n    // Messages from the webview (some are ignored)\n    [InteractiveWindowMessages.StartCell]: Creation.startCell,\n    [InteractiveWindowMessages.FinishCell]: Creation.finishCell,\n    [InteractiveWindowMessages.UpdateCellWithExecutionResults]: Creation.updateCell,\n    [InteractiveWindowMessages.NotebookDirty]: CommonEffects.notebookDirty,\n    [InteractiveWindowMessages.NotebookClean]: CommonEffects.notebookClean,\n    [InteractiveWindowMessages.LoadAllCells]: Creation.loadAllCells,\n    [InteractiveWindowMessages.NotebookRunAllCells]: Execution.executeAllCells,\n    [InteractiveWindowMessages.NotebookRunSelectedCell]: Execution.executeSelectedCell,\n    [InteractiveWindowMessages.NotebookAddCellBelow]: Creation.addAndFocusCell,\n    [InteractiveWindowMessages.DoSave]: Transfer.save,\n    [InteractiveWindowMessages.DeleteAllCells]: Creation.deleteAllCells,\n    [InteractiveWindowMessages.Undo]: Execution.undo,\n    [InteractiveWindowMessages.Redo]: Execution.redo,\n    [InteractiveWindowMessages.StartProgress]: CommonEffects.startProgress,\n    [InteractiveWindowMessages.StopProgress]: CommonEffects.stopProgress,\n    [SharedMessages.UpdateSettings]: Effects.updateSettings,\n    [InteractiveWindowMessages.Activate]: CommonEffects.activate,\n    [InteractiveWindowMessages.RestartKernel]: Kernel.handleRestarted,\n    [CssMessages.GetCssResponse]: CommonEffects.handleCss,\n    [InteractiveWindowMessages.MonacoReady]: CommonEffects.monacoReady,\n    [CssMessages.GetMonacoThemeResponse]: CommonEffects.monacoThemeChange,\n    [InteractiveWindowMessages.UpdateModel]: Creation.handleUpdate,\n    [InteractiveWindowMessages.UpdateKernel]: Kernel.updateStatus,\n    [SharedMessages.LocInit]: CommonEffects.handleLocInit,\n    [InteractiveWindowMessages.UpdateDisplayData]: CommonEffects.handleUpdateDisplayData\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\n\n// This must be on top, do not change. Required by webpack.\nimport '../common/main';\n// This must be on top, do not change. Required by webpack.\n\n// tslint:disable-next-line: ordered-imports\nimport '../common/index.css';\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { WidgetManagerComponent } from '../ipywidgets/container';\nimport { IVsCodeApi, PostOffice } from '../react-common/postOffice';\nimport { detectBaseTheme } from '../react-common/themeDetector';\nimport { getConnectedNativeEditor } from './nativeEditor';\nimport { createStore } from './redux/store';\n\n// This special function talks to vscode from a web panel\nexport declare function acquireVsCodeApi(): IVsCodeApi;\nconst baseTheme = detectBaseTheme();\n// tslint:disable-next-line: no-any\nconst testMode = (window as any).inTestMode;\n// tslint:disable-next-line: no-typeof-undefined\nconst skipDefault = testMode ? false : typeof acquireVsCodeApi !== 'undefined';\n\n// Create the redux store\nconst postOffice = new PostOffice();\nconst store = createStore(skipDefault, baseTheme, testMode, postOffice);\n\n// Wire up a connected react control for our NativeEditor\nconst ConnectedNativeEditor = getConnectedNativeEditor();\n\n// Stick them all together\nReactDOM.render(\n    <Provider store={store}>\n        <ConnectedNativeEditor />\n        <WidgetManagerComponent postOffice={postOffice} widgetContainerId={'rootWidget'} store={store} />\n    </Provider>,\n    document.getElementById('root') as HTMLElement\n);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\n\nimport * as ReduxCommon from '../../interactive-common/redux/store';\nimport { PostOffice } from '../../react-common/postOffice';\nimport { reducerMap } from './reducers';\n\n// This special version uses the reducer map from the INativeEditorMapping\nexport function createStore(skipDefault: boolean, baseTheme: string, testMode: boolean, postOffice: PostOffice) {\n    return ReduxCommon.createStore(skipDefault, baseTheme, testMode, true, reducerMap, postOffice);\n}\n","module.exports = log4js;","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\nexports.i(require(\"-!../../../node_modules/css-loader/index.js!../interactive-common/common.css\"), \"\");\n\n// module\nexports.push([module.id, \"/* Import common styles and then override them below */\\n.toolbar-panel-button {\\n  border-width: 1px;\\n  border-style: solid;\\n  border-color: var(--override-badge-background, var(--vscode-badge-background));\\n  color: var(--override-foreground, var(--vscode-editor-foreground));\\n  text-align: center;\\n  overflow: hidden;\\n  margin-left: 2px;\\n  padding: 2px;\\n  background-color: transparent;\\n  cursor: hand;\\n}\\n.cell-wrapper {\\n  margin: 2px 2px 0px 0px;\\n  position: relative;\\n  min-height: 55px;\\n}\\n.cell-wrapper-focused {\\n  margin: 2px 2px 0px 0px;\\n}\\n.cell-wrapper-selected {\\n  margin: 2px 2px 0px 0px;\\n}\\n.cell-menu-bar-outer {\\n  justify-self: right;\\n}\\n.cell-output-wrapper {\\n  grid-row: 1;\\n  grid-column: 3;\\n}\\n.cell-output {\\n  margin-top: 5px;\\n  background: transparent;\\n  width: 100%;\\n  overflow-x: scroll;\\n}\\n.cell-output-text {\\n  white-space: pre-wrap;\\n  word-break: break-all;\\n  overflow-x: hidden;\\n}\\n.markdown-cell-output-container {\\n  grid-row: 1;\\n  grid-column: 3;\\n}\\n.markdown-cell-output {\\n  width: 100%;\\n  overflow-x: scroll;\\n}\\n.cell-outer {\\n  display: grid;\\n  grid-template-columns: auto auto minmax(0, 1fr);\\n}\\n.cell-outer-editable {\\n  display: grid;\\n  grid-template-columns: auto auto minmax(0, 1fr);\\n  margin-top: 0px;\\n}\\n.cell-state-selector {\\n  border-width: 1px;\\n  border-style: solid;\\n  border-color: var(--override-badge-background, var(--vscode-badge-background));\\n  color: var(--override-foreground, var(--vscode-editor-foreground));\\n  text-align: center;\\n  overflow: hidden;\\n  margin-left: 2px;\\n  padding: 2px;\\n  background-color: transparent;\\n  cursor: hand;\\n}\\n.cell-state-selector-option {\\n  border-width: 1px;\\n  border-style: solid;\\n  border-color: var(--override-badge-background, var(--vscode-badge-background));\\n  color: var(--override-foreground, var(--vscode-editor-foreground));\\n  background-color: var(--override-background, var(--vscode-editor-background));\\n}\\n.code-area {\\n  position: relative;\\n  width: 100%;\\n  padding-right: 8px;\\n  margin-bottom: 0px;\\n  padding-left: 2px;\\n  padding-top: 2px;\\n  background: var(--override-widget-background, var(--vscode-notifications-background));\\n}\\n.markdown-editor-area {\\n  position: relative;\\n  width: 100%;\\n  padding-right: 10px;\\n  margin-bottom: 0px;\\n  padding-left: 2px;\\n  padding-top: 2px;\\n  background: var(--override-widget-background, var(--vscode-notifications-background));\\n}\\n.code-watermark {\\n  top: 5px;\\n  /* Account for extra padding and border in native editor */\\n}\\n.cell-input-wrapper {\\n  grid-column: 3;\\n  grid-row: 1;\\n}\\n.cell-input {\\n  margin: 2px 10px 0px 0px;\\n}\\n.content-div {\\n  grid-column: 3;\\n}\\n.controls-div {\\n  min-width: 34px;\\n  padding-left: 4px;\\n  padding-right: 4px;\\n  display: block;\\n  grid-column: 2;\\n  grid-row: 1;\\n}\\n.navbar-div {\\n  grid-column: 1;\\n  visibility: hidden;\\n  display: grid;\\n  grid-template-rows: var(--button-size) var(--button-size) auto;\\n}\\n.navbar-add-button {\\n  align-self: end;\\n}\\n.execution-count {\\n  justify-self: end;\\n  margin-bottom: 10px;\\n  margin-top: 1px;\\n}\\n.execution-count-busy-outer {\\n  justify-self: end;\\n}\\n.native-editor-celltoolbar-inner {\\n  justify-self: center;\\n  grid-column: 1;\\n}\\n.native-editor-celltoolbar-middle {\\n  display: flex;\\n  grid-column: 3;\\n  grid-row: 2;\\n  justify-items: left;\\n  background: var(--vscode-notifications-background);\\n}\\n.native-editor-celltoolbar-divider {\\n  background-color: var(--vscode-badge-background);\\n  height: 2px;\\n}\\n.code-toolbar {\\n  visibility: visible;\\n}\\n.markdown-toolbar {\\n  visibility: collapse;\\n}\\n.hover-cell-button {\\n  visibility: collapse;\\n}\\n.cell-wrapper:hover .hover-cell-button {\\n  visibility: visible;\\n}\\n.cell-wrapper-selected .hover-cell-button {\\n  visibility: visible;\\n}\\n.cell-wrapper-focused .hover-cell-button {\\n  visibility: visible;\\n}\\n.delete-cell-button {\\n  right: 2px;\\n  position: absolute;\\n  visibility: collapse;\\n}\\n.cell-wrapper:hover .navbar-div {\\n  visibility: visible;\\n}\\n.cell-wrapper-selected .navbar-div {\\n  visibility: visible;\\n}\\n.cell-wrapper-focused .navbar-div {\\n  visibility: visible;\\n}\\n.cell-wrapper:hover .markdown-toolbar {\\n  visibility: visible;\\n}\\n.cell-wrapper-selected .markdown-toolbar {\\n  visibility: visible;\\n}\\n.cell-wrapper-focused .markdown-toolbar {\\n  visibility: visible;\\n}\\n.native-editor-flyout-button {\\n  width: auto;\\n  height: auto;\\n  border-color: transparent;\\n  background-color: transparent;\\n  padding: 0px;\\n  margin-left: 4px;\\n  margin-right: 0px;\\n  margin-top: 0px;\\n  margin-bottom: 0px;\\n  border-width: 0px;\\n}\\n.native-editor-flyout-button:focus {\\n  outline: none;\\n}\\n.native-editor-cellflyout {\\n  position: relative;\\n  left: 20px;\\n  top: -15px;\\n  width: auto;\\n  height: auto;\\n  padding-top: 2px;\\n  padding-right: 2px;\\n  z-index: 100;\\n}\\n.native-editor-cellflyout-selected {\\n  background-color: var(--vscode-peekView-border);\\n}\\n.native-editor-cellflyout-focused {\\n  background-color: var(--vscode-editorInfo-foreground);\\n}\\n.flyout-button-content {\\n  color: var(--override-foreground, var(--vscode-editor-foreground));\\n}\\n.native-button {\\n  background: transparent;\\n  z-index: 10;\\n}\\n#toolbar-panel {\\n  margin-top: 2px;\\n  margin-bottom: 2px;\\n  margin-left: 0px;\\n  margin-right: 0px;\\n}\\n#content-panel-div {\\n  overflow: hidden;\\n}\\n/* Fix image buttons that are supposed to be hidden from showing up */\\n.flyout-children-hidden .image-button {\\n  width: 0px;\\n  height: 0px;\\n  margin-left: 0px;\\n  padding: 0px;\\n}\\n.add-cell-line {\\n  display: flex;\\n  justify-content: left;\\n  margin-top: 5px;\\n  margin-bottom: 0px;\\n  margin-left: 5px;\\n  margin-right: 5px;\\n}\\n.add-cell-line:focus-within {\\n  outline: 1px solid black;\\n}\\n.add-cell-line-top {\\n  margin-top: 2px;\\n  margin-bottom: 0px;\\n}\\n.add-cell-line-top-force-visible {\\n  margin-top: 2px;\\n  margin-bottom: 0px;\\n}\\n.add-cell-line-top .add-cell-line-button {\\n  visibility: hidden;\\n}\\n.add-cell-line-button {\\n  border-width: 0px;\\n  border-style: solid;\\n  text-align: center;\\n  line-height: 16px;\\n  background-color: transparent;\\n  cursor: hand;\\n  height: var(--button-size);\\n  padding: 0px;\\n  display: flex;\\n}\\n.add-cell-line-button:focus {\\n  outline: none;\\n}\\n.add-cell-line-top:hover .add-cell-line-button {\\n  visibility: visible;\\n}\\n.add-cell-line-button .image-button-image {\\n  height: var(--button-size);\\n}\\n.add-cell-line-button .image-button-image svg {\\n  height: var(--button-size);\\n}\\n.add-cell-line-divider {\\n  margin-top: 8px;\\n  margin-left: 2px;\\n  width: calc(100% - 40px);\\n  border-width: 0px;\\n  border-top-color: var(--override-badge-background, var(--vscode-badge-background));\\n  border-top-width: 1px;\\n  border-style: solid;\\n}\\n.add-cell-line-divider:hover {\\n  cursor: pointer;\\n}\\n.cell-wrapper-selected .add-cell-line {\\n  visibility: visible;\\n}\\n.cell-wrapper-focused .add-cell-line {\\n  visibility: visible;\\n}\\n/*\\nCell Row Container layout\\n--------------------------\\ncollapse-bar        controls-div        [cell-input, cell-output, markdown-cell-output-container]\\n(expanded c-bar)    celltoolbar-middle\\n*/\\n.cell-row-container {\\n  display: grid;\\n  grid-template-columns: auto auto minmax(0, 1fr);\\n  grid-template-rows: 1fr auto;\\n}\\n.collapse-bar {\\n  grid-column: 1;\\n  grid-row-start: 1;\\n  grid-row-end: 2;\\n  background-color: transparent;\\n  max-width: 8px;\\n  min-width: 8px;\\n}\\n.cell-wrapper:hover .collapse-bar {\\n  background-color: var(--override-widget-background, var(--vscode-notifications-background));\\n}\\n.collapse-bar-markdown {\\n  margin: 0px 44px 0px 0px;\\n}\\n.collapse-bar-output {\\n  margin: 0px 28px 0px 16px;\\n}\\n.collapse-bar-selected {\\n  background-color: var(--vscode-peekView-border);\\n  grid-row-start: 1;\\n  grid-row-end: 3;\\n}\\n.collapse-bar-focused {\\n  background: repeating-linear-gradient(-45deg, transparent, transparent 3px, var(--vscode-editorGutter-addedBackground) 3px, var(--vscode-editorGutter-addedBackground) 6px);\\n  grid-row-start: 1;\\n  grid-row-end: 3;\\n}\\n.cell-wrapper:hover .collapse-bar-selected {\\n  background-color: var(--vscode-peekView-border);\\n}\\n.cell-wrapper:hover .collapse-bar-focused {\\n  background: repeating-linear-gradient(-45deg, transparent, transparent 3px, var(--vscode-editorGutter-addedBackground) 3px, var(--vscode-editorGutter-addedBackground) 6px);\\n}\\n.add-divider {\\n  visibility: hidden;\\n  margin: 0px;\\n  position: absolute;\\n  bottom: 8px;\\n}\\n.cell-wrapper:hover .add-divider {\\n  visibility: hidden;\\n  z-index: -100;\\n  pointer-events: none;\\n}\\n.cell-wrapper-selected .add-divider {\\n  visibility: hidden;\\n  z-index: -100;\\n  pointer-events: none;\\n}\\n.cell-wrapper-focused .add-divider {\\n  visibility: hidden;\\n  z-index: -100;\\n  pointer-events: none;\\n}\\n.cell-wrapper-selected:hover .add-divider {\\n  visibility: hidden;\\n  z-index: -100;\\n  pointer-events: none;\\n}\\n.cell-wrapper-focused:hover .add-divider {\\n  visibility: hidden;\\n  z-index: -100;\\n  pointer-events: none;\\n}\\n.native-editor-celltoolbar-middle .image-button {\\n  margin-right: 3px;\\n  margin-top: 4px;\\n  margin-bottom: 4px;\\n  margin-left: 3px;\\n}\\n\", \"\"]);\n\n// exports\n"],"sourceRoot":""}